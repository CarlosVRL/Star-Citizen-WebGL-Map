/*!
 * starcitizen-webgl-map v0.2.0 by Lianna Eeftinck
 * Copyright 2014 Lianna Eeftinck
 * https://github.com/Leeft/Star-Citizen-WebGL-Map
 * Licensed under http://opensource.org/licenses/MIT
 */
if (typeof jQuery === "undefined") { throw new Error("starcitizen-webgl-map requires jQuery"); }
if (typeof THREE === "undefined") { throw new Error("starcitizen-webgl-map requires THREE.js"); }
/**
* @author LiannaEeftinck / https://github.com/Leeft
*/

var SCMAP = SCMAP || { REVISION: '3' };

self.console = self.console || {
   info: function () {},
   log: function () {},
   debug: function () {},
   warn: function () {},
   error: function () {}
};

SCMAP.data = {
   factions: [],
   crime_levels: [],
   uee_strategic_values: [],
   goods: [],
   map: {},
   systems: [],
   systemsById: []
};

SCMAP.Symbol = {};
SCMAP.Symbols = {};

SCMAP.Symbol.SIZE = 24;
SCMAP.Symbol.SPACING = 9;

SCMAP.Symbol.getTag = function ( icon ) {
   var $icon = $( '<i title="'+icon.description+'" class="fa fa-fw '+icon.faClass+'"></i>' );
   $icon.css( 'color', icon.color );
   return $icon;
};

SCMAP.Symbols.DANGER = {
   code: "\uf071",
   scale: 0.9,
   faClass: 'fa-warning',
   description: 'Danger, hostile faction',
   color: 'rgba(255,50,50,0.95)'
};
SCMAP.Symbols.WARNING = {
   code: "\uf071",
   scale: 0.9,
   faClass: 'fa-warning',
   description: 'Warning, hostile environment',
   color: 'rgba(255,117,25,0.95)'
};
SCMAP.Symbols.HANGAR = {
   code: "\uf015",
   scale: 1.15,
   faClass: 'fa-home',
   description: 'Hangar location',
   color: 'rgba(255,255,255,0.95)',
   offset: new THREE.Vector2( -0.25, 2 )
};
SCMAP.Symbols.INFO = {
   code: "\uf05a",
   scale: 1.0,
   faClass: 'fa-info-circle',
   description: 'Information available',
   color: 'rgba(255, 162, 255, 0.95)'//,
   //offset: new THREE.Vector2( 0, 2 )
};
SCMAP.Symbols.TRADE = {
   code: "\uf0ec",
   scale: 0.90,
   faClass: 'fa-exchange',
   description: 'Major trade hub',
   color: 'rgba(255,255,0,0.95)',
   offset: new THREE.Vector2( 0, -3 )
};
//SCMAP.Symbols.TRADE = {
//   code: "\uf0d1",
//   scale: 0.95,
//   faClass: 'fa-truck',
//   description: 'Major trade hub',
//   color: 'rgba(255,255,0,0.95)',
//   offset: new THREE.Vector2( -2, -2 )
//};
SCMAP.Symbols.BANNED = {
   code: "\uf05e",
   scale: 1.0,
   faClass: 'fa-ban',
   description: 'System off-limits',
   color: 'rgba(255, 117, 25, 0.95)'
};
SCMAP.Symbols.COMMENTS = {
   code: "\uf075",
   scale: 1.0,
   faClass: 'fa-comment',
   description: 'Your comments',
   color: 'rgba(106, 187, 207, 0.95)',
   offset: new THREE.Vector2( 0, -3 )
};
SCMAP.Symbols.BOOKMARK = {
   code: "\uf02e",
   scale: 1.05,
   faClass: 'fa-bookmark',
   description: 'Bookmarked',
   color: 'rgba(102, 193, 0, 0.95)',
   offset: new THREE.Vector2( -2, 1 )
};

SCMAP.travelTimeAU = function ( distanceAU ) {
   return( SCMAP.approximateTraveltimePerAU * distanceAU );
};

SCMAP.usersFaction = function ( ) {
   // TODO: allow users to set their faction, if ever needed
   return SCMAP.data.factionsByName.UEE;
};

// constants here

SCMAP.LYtoAU = 63241.077;
SCMAP.approximateTraveltimePerAU = ( ( 8 * 60 ) + 19 ) * 5; // 8:19 at 1c, but autopilot speed is 0.2c

// EOF

/**
* @author LiannaEeftinck / https://github.com/Leeft
*/

SCMAP.Settings = function () {
   this.glow = true;
   this.labels = true;
   this.labelIcons = true;
};

SCMAP.settings = new SCMAP.Settings();

/**
 * @author Leeft / https://github.com/Leeft
 */
/* Used OrbitControls.js as a template - But it doesn't do the same thing! */
/*global THREE, console, window */

SCMAP.Editor = function ( map, camera, domElement ) {

   this.map = map;
   this.camera = camera; // used to find our directions
   this.domElement = ( domElement !== undefined ) ? domElement : document;

   ///////////
   // API

   // Set to true to enable the editor while in edit mode
   this.enabled = false;

   ////////////
   // internals

   var scope = this;

   var moveStart = new THREE.Vector2();
   var moveEnd   = new THREE.Vector2();
   var moveDelta = new THREE.Vector2();

   var move = new THREE.Vector3();

   var lastPosition = new THREE.Vector3();

   var STATE = { NONE : -1, MOVE_XZ : 0, MOVE_Y : 1 };
   var state = STATE.NONE;

   // events

   var changeEvent = { type: 'change' };

   // pass in distance in world space to move left
   this.moveLeft = function ( distance ) {
      var sameLevelTarget = window.controls.target.clone().setY( this.camera.position.y );
      var vectorBack = this.camera.position.clone().sub( sameLevelTarget ).negate().setLength( distance );
      var axis = new THREE.Vector3( 0, 1, 0 );
      vectorBack.applyAxisAngle( axis, THREE.Math.degToRad( 90 ) );
      move.add( vectorBack );
   };

   // pass in distance in world space to move up
   this.moveUp = function ( distance ) {
      var moveOffset = new THREE.Vector3();
      var te = this.map.selected.object.matrix.elements;
      // get Y column of matrix
      moveOffset.set( te[4], te[5], te[6] );
      moveOffset.multiplyScalar(distance);
      move.add( moveOffset );
   };

   // pass in distance in world space to move forward
   this.moveBack = function ( distance ) {
      var sameLevelTarget = window.controls.target.clone().setY( this.camera.position.y );
      var vectorBack = this.camera.position.clone().sub( sameLevelTarget ).negate().setLength( distance );
      move.add( vectorBack );
   };

   // main entry point; pass in Vector2 of change desired in pixel space,
   // right and down are positive
   this.move = function ( delta ) {
      var element = scope.domElement === document ? scope.domElement.body : scope.domElement;
      var offset = scope.map.selected.object.position.clone().sub( scope.camera.position );
      var targetDistance = offset.length();

      // half of the fov is center to top of screen
      targetDistance *= Math.tan( (scope.camera.fov/2) * Math.PI / 180.0 );
      // we actually don't use screenWidth, since perspective camera is fixed to screen height
      if ( state === STATE.MOVE_Y ) {
         scope.moveUp( 2 * delta.y * targetDistance / element.clientHeight );
      } else {
         scope.moveLeft( 2 * delta.x * targetDistance / element.clientHeight );
         scope.moveBack( 2 * delta.y * targetDistance / element.clientHeight );
      }
      //if ( this.mapMode ) {
      //} else {
         //scope.moveUp( 2 * delta.y * targetDistance / element.clientHeight );
      //}
   };

   this.update = function () {
      if ( scope.enabled === false ) { return; }
      if ( this.map.selected === undefined ) { return; }

      // move target to new location
      this.map.selected.object.position.sub( move );
      if ( this.map.selected.object.system.labelObject !== undefined ) {
         this.map.selected.object.system.labelObject.position.sub( move );
      }
      for ( var i = 0; i < this.map.selected.object.system.routeObjects.length; i++ ) {
         var routeObject = this.map.selected.object.system.routeObjects[i];
         routeObject.geometry.verticesNeedUpdate = true;
      }
      //for ( var i = 0; i < this.map.selected.object.system.jumppoints.length; i++ ) {
      //   var destination = this.map.selected.object.system.jumppoints[i].destination;
      //   for ( var i = 0; i < destination.routeObjects.length; i++ ) {
      //      var routeObject = destination.routeObjects[i];
      //      routeObject.geometry.verticesNeedUpdate = true;
      //   }
      //}

      move.set( 0, 0, 0 );

      if ( lastPosition.distanceTo( this.map.selected.object.position ) > 0 ) {
         this.dispatchEvent( changeEvent );
         lastPosition.copy( this.map.selected.object.position );
      }
   };

   function onMouseDown( event ) {
      if ( scope.enabled === false ) { return; }
      if ( scope.map.selected === undefined ) return;
      if ( event.altKey ) { return; }

      event.preventDefault();

      if ( event.button === 0 ) {
         state = STATE.MOVE_XZ;
      } else if ( event.button === 2 ) {
         state = STATE.MOVE_Y;
      }

      moveStart.set( event.clientX, event.clientY );

      scope.domElement.addEventListener( 'mousemove', onMouseMove, false );
      scope.domElement.addEventListener( 'mouseup', onMouseUp, false );
   }

   function onMouseMove( event ) {
      if ( scope.enabled === false ) return;
      if ( scope.map.selected === undefined ) return;
      if ( event.altKey ) { return; }

      event.preventDefault();

      if ( state === STATE.MOVE_XZ || state === STATE.MOVE_Y ) {
         moveEnd.set( event.clientX, event.clientY );
         moveDelta.subVectors( moveEnd, moveStart );
         scope.move( moveDelta );
         moveStart.copy( moveEnd );
      }

      scope.update();

   }

   function onMouseUp( event ) {
      if ( scope.enabled === false ) return;
      if ( event.altKey ) { return; }

      scope.domElement.removeEventListener( 'mousemove', onMouseMove, false );
      scope.domElement.removeEventListener( 'mouseup', onMouseUp, false );

      state = STATE.NONE;
   }

   this.domElement.addEventListener( 'contextmenu', function ( event ) { event.preventDefault(); }, false );
   this.domElement.addEventListener( 'mousedown', onMouseDown, false );
};

SCMAP.Editor.prototype = Object.create( THREE.EventDispatcher.prototype );

function _build_selected_system_object () {
   var object = new THREE.JSONLoader().parse( {
    "metadata" : {
        "formatVersion" : 3.1,
        "sourceFile"    : "selected_system.obj",
        "generatedBy"   : "OBJConverter",
        "vertices"      : 248,
        "faces"         : 248,
        "normals"       : 960,
        "colors"        : 0,
        "uvs"           : 0,
        "materials"     : 1
    },
    "scale" : 1,
    "vertices": [-0.5,0.5,0.5,-0.52,0.2,0.5,-0.52,0.2,0.44,-0.52,0.44,0.44,-0.52,0.5,0.5,-0.5,0.52,0.5,-0.5,0.5,0.52,-0.52,0.44,0.2,-0.52,0.5,0.2,-0.5,0.52,0.2,-0.44,0.52,0.2,-0.44,0.52,0.44,-0.44,0.44,0.52,-0.5,0.2,0.52,-0.44,0.2,0.52,-0.2,0.52,0.44,-0.2,0.52,0.5,-0.2,0.5,0.52,-0.2,0.44,0.52,-0.5,0.44,0.2,-0.5,0.5,0.2,-0.44,0.5,0.2,-0.2,0.44,0.5,-0.2,0.5,0.44,-0.2,0.5,0.5,-0.5,0.44,0.44,-0.44,0.44,0.5,-0.44,0.5,0.44,-0.5,0.2,0.5,-0.5,0.2,0.44,-0.44,0.2,0.5,0.5,0.5,0.5,0.52,0.2,0.5,0.52,0.2,0.44,0.52,0.44,0.44,0.52,0.5,0.5,0.5,0.52,0.5,0.5,0.5,0.52,0.52,0.44,0.2,0.52,0.5,0.2,0.5,0.52,0.2,0.44,0.52,0.2,0.44,0.52,0.44,0.44,0.44,0.52,0.5,0.2,0.52,0.44,0.2,0.52,0.2,0.52,0.44,0.2,0.52,0.5,0.2,0.5,0.52,0.2,0.44,0.52,0.5,0.44,0.2,0.5,0.5,0.2,0.44,0.5,0.2,0.2,0.44,0.5,0.2,0.5,0.44,0.2,0.5,0.5,0.5,0.44,0.44,0.44,0.44,0.5,0.44,0.5,0.44,0.5,0.2,0.5,0.5,0.2,0.44,0.44,0.2,0.5,-0.5,-0.5,0.5,-0.52,-0.2,0.5,-0.52,-0.2,0.44,-0.52,-0.44,0.44,-0.52,-0.5,0.5,-0.5,-0.52,0.5,-0.5,-0.5,0.52,-0.52,-0.44,0.2,-0.52,-0.5,0.2,-0.5,-0.52,0.2,-0.44,-0.52,0.2,-0.44,-0.52,0.44,-0.44,-0.44,0.52,-0.5,-0.2,0.52,-0.44,-0.2,0.52,-0.2,-0.52,0.44,-0.2,-0.52,0.5,-0.2,-0.5,0.52,-0.2,-0.44,0.52,-0.5,-0.44,0.2,-0.5,-0.5,0.2,-0.44,-0.5,0.2,-0.2,-0.44,0.5,-0.2,-0.5,0.44,-0.2,-0.5,0.5,-0.5,-0.44,0.44,-0.44,-0.44,0.5,-0.44,-0.5,0.44,-0.5,-0.2,0.5,-0.5,-0.2,0.44,-0.44,-0.2,0.5,0.5,-0.5,0.5,0.52,-0.2,0.5,0.52,-0.2,0.44,0.52,-0.44,0.44,0.52,-0.5,0.5,0.5,-0.52,0.5,0.5,-0.5,0.52,0.52,-0.44,0.2,0.52,-0.5,0.2,0.5,-0.52,0.2,0.44,-0.52,0.2,0.44,-0.52,0.44,0.44,-0.44,0.52,0.5,-0.2,0.52,0.44,-0.2,0.52,0.2,-0.52,0.44,0.2,-0.52,0.5,0.2,-0.5,0.52,0.2,-0.44,0.52,0.5,-0.44,0.2,0.5,-0.5,0.2,0.44,-0.5,0.2,0.2,-0.44,0.5,0.2,-0.5,0.44,0.2,-0.5,0.5,0.5,-0.44,0.44,0.44,-0.44,0.5,0.44,-0.5,0.44,0.5,-0.2,0.5,0.5,-0.2,0.44,0.44,-0.2,0.5,-0.5,0.5,-0.5,-0.52,0.2,-0.5,-0.52,0.2,-0.44,-0.52,0.44,-0.44,-0.52,0.5,-0.5,-0.5,0.52,-0.5,-0.5,0.5,-0.52,-0.52,0.44,-0.2,-0.52,0.5,-0.2,-0.5,0.52,-0.2,-0.44,0.52,-0.2,-0.44,0.52,-0.44,-0.44,0.44,-0.52,-0.5,0.2,-0.52,-0.44,0.2,-0.52,-0.2,0.52,-0.44,-0.2,0.52,-0.5,-0.2,0.5,-0.52,-0.2,0.44,-0.52,-0.5,0.44,-0.2,-0.5,0.5,-0.2,-0.44,0.5,-0.2,-0.2,0.44,-0.5,-0.2,0.5,-0.44,-0.2,0.5,-0.5,-0.5,0.44,-0.44,-0.44,0.44,-0.5,-0.44,0.5,-0.44,-0.5,0.2,-0.5,-0.5,0.2,-0.44,-0.44,0.2,-0.5,0.5,0.5,-0.5,0.52,0.2,-0.5,0.52,0.2,-0.44,0.52,0.44,-0.44,0.52,0.5,-0.5,0.5,0.52,-0.5,0.5,0.5,-0.52,0.52,0.44,-0.2,0.52,0.5,-0.2,0.5,0.52,-0.2,0.44,0.52,-0.2,0.44,0.52,-0.44,0.44,0.44,-0.52,0.5,0.2,-0.52,0.44,0.2,-0.52,0.2,0.52,-0.44,0.2,0.52,-0.5,0.2,0.5,-0.52,0.2,0.44,-0.52,0.5,0.44,-0.2,0.5,0.5,-0.2,0.44,0.5,-0.2,0.2,0.44,-0.5,0.2,0.5,-0.44,0.2,0.5,-0.5,0.5,0.44,-0.44,0.44,0.44,-0.5,0.44,0.5,-0.44,0.5,0.2,-0.5,0.5,0.2,-0.44,0.44,0.2,-0.5,-0.5,-0.5,-0.5,-0.52,-0.2,-0.5,-0.52,-0.2,-0.44,-0.52,-0.44,-0.44,-0.52,-0.5,-0.5,-0.5,-0.52,-0.5,-0.5,-0.5,-0.52,-0.52,-0.44,-0.2,-0.52,-0.5,-0.2,-0.5,-0.52,-0.2,-0.44,-0.52,-0.2,-0.44,-0.52,-0.44,-0.44,-0.44,-0.52,-0.5,-0.2,-0.52,-0.44,-0.2,-0.52,-0.2,-0.52,-0.44,-0.2,-0.52,-0.5,-0.2,-0.5,-0.52,-0.2,-0.44,-0.52,-0.5,-0.44,-0.2,-0.5,-0.5,-0.2,-0.44,-0.5,-0.2,-0.2,-0.44,-0.5,-0.2,-0.5,-0.44,-0.2,-0.5,-0.5,-0.5,-0.44,-0.44,-0.44,-0.44,-0.5,-0.44,-0.5,-0.44,-0.5,-0.2,-0.5,-0.5,-0.2,-0.44,-0.44,-0.2,-0.5,0.5,-0.5,-0.5,0.52,-0.2,-0.5,0.52,-0.2,-0.44,0.52,-0.44,-0.44,0.52,-0.5,-0.5,0.5,-0.52,-0.5,0.5,-0.5,-0.52,0.52,-0.44,-0.2,0.52,-0.5,-0.2,0.5,-0.52,-0.2,0.44,-0.52,-0.2,0.44,-0.52,-0.44,0.44,-0.44,-0.52,0.5,-0.2,-0.52,0.44,-0.2,-0.52,0.2,-0.52,-0.44,0.2,-0.52,-0.5,0.2,-0.5,-0.52,0.2,-0.44,-0.52,0.5,-0.44,-0.2,0.5,-0.5,-0.2,0.44,-0.5,-0.2,0.2,-0.44,-0.5,0.2,-0.5,-0.44,0.2,-0.5,-0.5,0.5,-0.44,-0.44,0.44,-0.44,-0.5,0.44,-0.5,-0.44,0.5,-0.2,-0.5,0.5,-0.2,-0.44,0.44,-0.2,-0.5],
    "morphTargets": [],
    "morphColors": [],
    "normals": [-0.25969,0.62694,-0.73451,-0.62694,0.25969,-0.73451,-0.91018,0.29289,0.29289,-0.29289,0.91018,0.29289,-0.62694,-0.73451,0.25969,-0.25969,-0.73451,0.62694,-0.29289,0.29289,0.91018,-0.91018,0.29289,0.29289,0.73451,0.25969,0.62694,0.73451,0.62694,0.25969,-0.29289,0.91018,0.29289,-0.29289,0.29289,0.91018,-0.29289,0.29289,0.91018,-0.29289,0.91018,0.29289,-0.91018,0.29289,0.29289,0.57735,-0.57735,-0.57735,0.57735,-0.57735,0.57735,0.40825,-0.40825,0.8165,0.40825,-0.40825,-0.8165,0.57735,-0.57735,0.57735,0.57735,-0.57735,-0.57735,0.40825,-0.40825,-0.8165,0.40825,-0.40825,0.8165,0.57735,0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.40825,-0.8165,-0.40825,0.40825,0.8165,-0.40825,0.57735,-0.57735,-0.57735,0.57735,0.57735,-0.57735,0.40825,0.8165,-0.40825,0.40825,-0.8165,-0.40825,-0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.8165,-0.40825,-0.40825,-0.8165,-0.40825,-0.40825,0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.8165,-0.40825,-0.40825,0.8165,-0.40825,-0.40825,0.57735,-0.57735,0.57735,0.40825,-0.40825,0.8165,-0.29289,0.29289,0.91018,-0.25969,-0.73451,0.62694,0.40825,-0.40825,0.8165,0.57735,-0.57735,0.57735,0.73451,0.25969,0.62694,-0.29289,0.29289,0.91018,-0.91018,0.29289,0.29289,-0.8165,-0.40825,-0.40825,-0.57735,-0.57735,-0.57735,-0.62694,-0.73451,0.25969,-0.57735,-0.57735,-0.57735,-0.8165,-0.40825,-0.40825,-0.91018,0.29289,0.29289,-0.62694,0.25969,-0.73451,0.40825,0.8165,-0.40825,0.57735,0.57735,-0.57735,-0.25969,0.62694,-0.73451,-0.29289,0.91018,0.29289,0.57735,0.57735,-0.57735,0.40825,0.8165,-0.40825,-0.29289,0.91018,0.29289,0.73451,0.62694,0.25969,0.57735,-0.57735,-0.57735,0.8165,-0.40825,-0.40825,0.57735,-0.57735,-0.57735,0.30151,-0.90453,-0.30151,0.8165,-0.40825,-0.40825,0.57735,-0.57735,-0.57735,0.30151,-0.30151,-0.90453,0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.40825,-0.8165,-0.40825,0.57735,-0.57735,-0.57735,0.30151,-0.30151,-0.90453,0.57735,-0.57735,-0.57735,0.40825,-0.8165,-0.40825,0.57735,-0.57735,-0.57735,0.90453,-0.30151,-0.30151,0.40825,-0.40825,-0.8165,0.57735,-0.57735,-0.57735,0.30151,-0.90453,-0.30151,0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.40825,-0.40825,-0.8165,0.57735,-0.57735,-0.57735,0.90453,-0.30151,-0.30151,0.57735,-0.57735,-0.57735,0.90453,-0.30151,-0.30151,0.73451,0.25969,0.62694,0.57735,-0.57735,0.57735,0.90453,-0.30151,-0.30151,0.73451,0.62694,0.25969,0.73451,0.25969,0.62694,0.57735,-0.57735,-0.57735,0.57735,0.57735,-0.57735,0.73451,0.62694,0.25969,0.90453,-0.30151,-0.30151,-0.62694,0.25969,-0.73451,-0.25969,0.62694,-0.73451,0.30151,-0.30151,-0.90453,-0.62694,0.25969,-0.73451,0.30151,-0.30151,-0.90453,0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.62694,-0.73451,0.25969,-0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.30151,-0.90453,-0.30151,-0.62694,-0.73451,0.25969,0.30151,-0.90453,-0.30151,-0.25969,-0.73451,0.62694,0.30151,-0.30151,-0.90453,-0.25969,0.62694,-0.73451,0.57735,0.57735,-0.57735,0.57735,-0.57735,-0.57735,-0.25969,-0.73451,0.62694,0.30151,-0.90453,-0.30151,0.57735,-0.57735,-0.57735,0.57735,-0.57735,0.57735,0.91018,0.29289,0.29289,0.62694,0.25969,-0.73451,0.25969,0.62694,-0.73451,0.29289,0.91018,0.29289,0.29289,0.29289,0.91018,0.25969,-0.73451,0.62694,0.62694,-0.73451,0.25969,0.91018,0.29289,0.29289,0.29289,0.91018,0.29289,-0.73451,0.62694,0.25969,-0.73451,0.25969,0.62694,0.29289,0.29289,0.91018,0.29289,0.91018,0.29289,0.29289,0.29289,0.91018,0.91018,0.29289,0.29289,-0.40825,-0.40825,0.8165,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,-0.57735,-0.40825,-0.40825,-0.8165,-0.40825,-0.40825,-0.8165,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,0.57735,-0.40825,-0.40825,0.8165,-0.40825,-0.8165,-0.40825,-0.57735,-0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.40825,0.8165,-0.40825,-0.40825,0.8165,-0.40825,-0.57735,0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.40825,-0.8165,-0.40825,-0.8165,-0.40825,-0.40825,-0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.8165,-0.40825,-0.40825,0.8165,-0.40825,-0.40825,0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.8165,-0.40825,-0.40825,0.29289,0.29289,0.91018,-0.40825,-0.40825,0.8165,-0.57735,-0.57735,0.57735,0.25969,-0.73451,0.62694,-0.73451,0.25969,0.62694,-0.57735,-0.57735,0.57735,-0.40825,-0.40825,0.8165,0.29289,0.29289,0.91018,0.57735,-0.57735,-0.57735,0.8165,-0.40825,-0.40825,0.91018,0.29289,0.29289,0.62694,-0.73451,0.25969,0.91018,0.29289,0.29289,0.8165,-0.40825,-0.40825,0.57735,-0.57735,-0.57735,0.62694,0.25969,-0.73451,0.25969,0.62694,-0.73451,-0.57735,0.57735,-0.57735,-0.40825,0.8165,-0.40825,0.29289,0.91018,0.29289,0.29289,0.91018,0.29289,-0.40825,0.8165,-0.40825,-0.57735,0.57735,-0.57735,-0.73451,0.62694,0.25969,-0.57735,-0.57735,-0.57735,-0.8165,-0.40825,-0.40825,-0.57735,-0.57735,-0.57735,-0.30151,-0.90453,-0.30151,-0.30151,-0.30151,-0.90453,-0.57735,-0.57735,-0.57735,-0.8165,-0.40825,-0.40825,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.40825,-0.8165,-0.40825,-0.57735,-0.57735,-0.57735,-0.30151,-0.30151,-0.90453,-0.57735,-0.57735,-0.57735,-0.40825,-0.8165,-0.40825,-0.57735,-0.57735,-0.57735,-0.90453,-0.30151,-0.30151,-0.30151,-0.90453,-0.30151,-0.57735,-0.57735,-0.57735,-0.40825,-0.40825,-0.8165,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.40825,-0.40825,-0.8165,-0.57735,-0.57735,-0.57735,-0.90453,-0.30151,-0.30151,-0.73451,0.25969,0.62694,-0.90453,-0.30151,-0.30151,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,0.57735,-0.73451,0.62694,0.25969,-0.90453,-0.30151,-0.30151,-0.73451,0.25969,0.62694,-0.73451,0.62694,0.25969,-0.57735,0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.90453,-0.30151,-0.30151,0.25969,0.62694,-0.73451,0.62694,0.25969,-0.73451,-0.30151,-0.30151,-0.90453,-0.57735,-0.57735,-0.57735,-0.30151,-0.30151,-0.90453,0.62694,0.25969,-0.73451,0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.62694,-0.73451,0.25969,-0.30151,-0.90453,-0.30151,-0.30151,-0.90453,-0.30151,0.62694,-0.73451,0.25969,0.25969,-0.73451,0.62694,-0.57735,0.57735,-0.57735,0.25969,0.62694,-0.73451,-0.30151,-0.30151,-0.90453,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.30151,-0.90453,-0.30151,0.25969,-0.73451,0.62694,-0.57735,-0.57735,0.57735,-0.91018,-0.29289,0.29289,-0.62694,-0.25969,-0.73451,-0.25969,-0.62694,-0.73451,-0.29289,-0.91018,0.29289,-0.29289,-0.29289,0.91018,-0.25969,0.73451,0.62694,-0.62694,0.73451,0.25969,-0.91018,-0.29289,0.29289,-0.29289,-0.91018,0.29289,0.73451,-0.62694,0.25969,0.73451,-0.25969,0.62694,-0.29289,-0.29289,0.91018,-0.29289,-0.91018,0.29289,-0.29289,-0.29289,0.91018,-0.91018,-0.29289,0.29289,0.40825,0.40825,0.8165,0.57735,0.57735,0.57735,0.57735,0.57735,-0.57735,0.40825,0.40825,-0.8165,0.40825,0.40825,-0.8165,0.57735,0.57735,-0.57735,0.57735,0.57735,0.57735,0.40825,0.40825,0.8165,0.40825,0.8165,-0.40825,0.57735,0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.40825,-0.8165,-0.40825,0.40825,-0.8165,-0.40825,0.57735,-0.57735,-0.57735,0.57735,0.57735,-0.57735,0.40825,0.8165,-0.40825,0.8165,0.40825,-0.40825,0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.8165,0.40825,-0.40825,-0.8165,0.40825,-0.40825,-0.57735,0.57735,-0.57735,0.57735,0.57735,-0.57735,0.8165,0.40825,-0.40825,-0.29289,-0.29289,0.91018,0.40825,0.40825,0.8165,0.57735,0.57735,0.57735,-0.25969,0.73451,0.62694,0.73451,-0.25969,0.62694,0.57735,0.57735,0.57735,0.40825,0.40825,0.8165,-0.29289,-0.29289,0.91018,-0.57735,0.57735,-0.57735,-0.8165,0.40825,-0.40825,-0.91018,-0.29289,0.29289,-0.62694,0.73451,0.25969,-0.91018,-0.29289,0.29289,-0.8165,0.40825,-0.40825,-0.57735,0.57735,-0.57735,-0.62694,-0.25969,-0.73451,-0.25969,-0.62694,-0.73451,0.57735,-0.57735,-0.57735,0.40825,-0.8165,-0.40825,-0.29289,-0.91018,0.29289,-0.29289,-0.91018,0.29289,0.40825,-0.8165,-0.40825,0.57735,-0.57735,-0.57735,0.73451,-0.62694,0.25969,0.57735,0.57735,-0.57735,0.8165,0.40825,-0.40825,0.57735,0.57735,-0.57735,0.30151,0.90453,-0.30151,0.30151,0.30151,-0.90453,0.57735,0.57735,-0.57735,0.8165,0.40825,-0.40825,0.57735,0.57735,-0.57735,0.57735,0.57735,-0.57735,0.40825,0.8165,-0.40825,0.57735,0.57735,-0.57735,0.30151,0.30151,-0.90453,0.57735,0.57735,-0.57735,0.40825,0.8165,-0.40825,0.57735,0.57735,-0.57735,0.90453,0.30151,-0.30151,0.30151,0.90453,-0.30151,0.57735,0.57735,-0.57735,0.40825,0.40825,-0.8165,0.57735,0.57735,-0.57735,0.57735,0.57735,-0.57735,0.40825,0.40825,-0.8165,0.57735,0.57735,-0.57735,0.90453,0.30151,-0.30151,0.73451,-0.25969,0.62694,0.90453,0.30151,-0.30151,0.57735,0.57735,-0.57735,0.57735,0.57735,0.57735,0.73451,-0.62694,0.25969,0.90453,0.30151,-0.30151,0.73451,-0.25969,0.62694,0.73451,-0.62694,0.25969,0.57735,-0.57735,-0.57735,0.57735,0.57735,-0.57735,0.90453,0.30151,-0.30151,-0.25969,-0.62694,-0.73451,-0.62694,-0.25969,-0.73451,0.30151,0.30151,-0.90453,0.57735,0.57735,-0.57735,0.30151,0.30151,-0.90453,-0.62694,-0.25969,-0.73451,-0.57735,0.57735,-0.57735,0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.62694,0.73451,0.25969,0.30151,0.90453,-0.30151,0.30151,0.90453,-0.30151,-0.62694,0.73451,0.25969,-0.25969,0.73451,0.62694,0.57735,-0.57735,-0.57735,-0.25969,-0.62694,-0.73451,0.30151,0.30151,-0.90453,0.57735,0.57735,-0.57735,0.57735,0.57735,-0.57735,0.30151,0.90453,-0.30151,-0.25969,0.73451,0.62694,0.57735,0.57735,0.57735,0.25969,-0.62694,-0.73451,0.62694,-0.25969,-0.73451,0.91018,-0.29289,0.29289,0.29289,-0.91018,0.29289,0.62694,0.73451,0.25969,0.25969,0.73451,0.62694,0.29289,-0.29289,0.91018,0.91018,-0.29289,0.29289,-0.73451,-0.25969,0.62694,-0.73451,-0.62694,0.25969,0.29289,-0.91018,0.29289,0.29289,-0.29289,0.91018,0.29289,-0.29289,0.91018,0.29289,-0.91018,0.29289,0.91018,-0.29289,0.29289,-0.57735,0.57735,-0.57735,-0.57735,0.57735,0.57735,-0.40825,0.40825,0.8165,-0.40825,0.40825,-0.8165,-0.57735,0.57735,0.57735,-0.57735,0.57735,-0.57735,-0.40825,0.40825,-0.8165,-0.40825,0.40825,0.8165,-0.57735,-0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.40825,0.8165,-0.40825,-0.40825,-0.8165,-0.40825,-0.57735,0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.40825,-0.8165,-0.40825,-0.40825,0.8165,-0.40825,0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.8165,0.40825,-0.40825,0.8165,0.40825,-0.40825,-0.57735,0.57735,-0.57735,0.57735,0.57735,-0.57735,0.8165,0.40825,-0.40825,-0.8165,0.40825,-0.40825,-0.57735,0.57735,0.57735,-0.40825,0.40825,0.8165,0.29289,-0.29289,0.91018,0.25969,0.73451,0.62694,-0.40825,0.40825,0.8165,-0.57735,0.57735,0.57735,-0.73451,-0.25969,0.62694,0.29289,-0.29289,0.91018,0.91018,-0.29289,0.29289,0.8165,0.40825,-0.40825,0.57735,0.57735,-0.57735,0.62694,0.73451,0.25969,0.57735,0.57735,-0.57735,0.8165,0.40825,-0.40825,0.91018,-0.29289,0.29289,0.62694,-0.25969,-0.73451,-0.40825,-0.8165,-0.40825,-0.57735,-0.57735,-0.57735,0.25969,-0.62694,-0.73451,0.29289,-0.91018,0.29289,-0.57735,-0.57735,-0.57735,-0.40825,-0.8165,-0.40825,0.29289,-0.91018,0.29289,-0.73451,-0.62694,0.25969,-0.57735,0.57735,-0.57735,-0.8165,0.40825,-0.40825,-0.57735,0.57735,-0.57735,-0.30151,0.90453,-0.30151,-0.8165,0.40825,-0.40825,-0.57735,0.57735,-0.57735,-0.30151,0.30151,-0.90453,-0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.40825,0.8165,-0.40825,-0.57735,0.57735,-0.57735,-0.30151,0.30151,-0.90453,-0.57735,0.57735,-0.57735,-0.40825,0.8165,-0.40825,-0.57735,0.57735,-0.57735,-0.90453,0.30151,-0.30151,-0.40825,0.40825,-0.8165,-0.57735,0.57735,-0.57735,-0.30151,0.90453,-0.30151,-0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.40825,0.40825,-0.8165,-0.57735,0.57735,-0.57735,-0.90453,0.30151,-0.30151,-0.57735,0.57735,-0.57735,-0.90453,0.30151,-0.30151,-0.73451,-0.25969,0.62694,-0.57735,0.57735,0.57735,-0.90453,0.30151,-0.30151,-0.73451,-0.62694,0.25969,-0.73451,-0.25969,0.62694,-0.57735,0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.73451,-0.62694,0.25969,-0.90453,0.30151,-0.30151,0.62694,-0.25969,-0.73451,0.25969,-0.62694,-0.73451,-0.30151,0.30151,-0.90453,0.62694,-0.25969,-0.73451,-0.30151,0.30151,-0.90453,-0.57735,0.57735,-0.57735,0.57735,0.57735,-0.57735,0.62694,0.73451,0.25969,0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.30151,0.90453,-0.30151,0.62694,0.73451,0.25969,-0.30151,0.90453,-0.30151,0.25969,0.73451,0.62694,-0.30151,0.30151,-0.90453,0.25969,-0.62694,-0.73451,-0.57735,-0.57735,-0.57735,-0.57735,0.57735,-0.57735,0.25969,0.73451,0.62694,-0.30151,0.90453,-0.30151,-0.57735,0.57735,-0.57735,-0.57735,0.57735,0.57735,-0.91018,0.29289,-0.29289,-0.62694,0.25969,0.73451,-0.25969,0.62694,0.73451,-0.29289,0.91018,-0.29289,-0.29289,0.29289,-0.91018,-0.25969,-0.73451,-0.62694,-0.62694,-0.73451,-0.25969,-0.91018,0.29289,-0.29289,-0.29289,0.91018,-0.29289,0.73451,0.62694,-0.25969,0.73451,0.25969,-0.62694,-0.29289,0.29289,-0.91018,-0.29289,0.91018,-0.29289,-0.29289,0.29289,-0.91018,-0.91018,0.29289,-0.29289,0.40825,-0.40825,-0.8165,0.57735,-0.57735,-0.57735,0.57735,-0.57735,0.57735,0.40825,-0.40825,0.8165,0.40825,-0.40825,0.8165,0.57735,-0.57735,0.57735,0.57735,-0.57735,-0.57735,0.40825,-0.40825,-0.8165,0.40825,-0.8165,0.40825,0.57735,-0.57735,0.57735,0.57735,0.57735,0.57735,0.40825,0.8165,0.40825,0.40825,0.8165,0.40825,0.57735,0.57735,0.57735,0.57735,-0.57735,0.57735,0.40825,-0.8165,0.40825,0.8165,-0.40825,0.40825,0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.8165,-0.40825,0.40825,-0.8165,-0.40825,0.40825,-0.57735,-0.57735,0.57735,0.57735,-0.57735,0.57735,0.8165,-0.40825,0.40825,-0.29289,0.29289,-0.91018,0.40825,-0.40825,-0.8165,0.57735,-0.57735,-0.57735,-0.25969,-0.73451,-0.62694,0.73451,0.25969,-0.62694,0.57735,-0.57735,-0.57735,0.40825,-0.40825,-0.8165,-0.29289,0.29289,-0.91018,-0.57735,-0.57735,0.57735,-0.8165,-0.40825,0.40825,-0.91018,0.29289,-0.29289,-0.62694,-0.73451,-0.25969,-0.91018,0.29289,-0.29289,-0.8165,-0.40825,0.40825,-0.57735,-0.57735,0.57735,-0.62694,0.25969,0.73451,-0.25969,0.62694,0.73451,0.57735,0.57735,0.57735,0.40825,0.8165,0.40825,-0.29289,0.91018,-0.29289,-0.29289,0.91018,-0.29289,0.40825,0.8165,0.40825,0.57735,0.57735,0.57735,0.73451,0.62694,-0.25969,0.57735,-0.57735,0.57735,0.8165,-0.40825,0.40825,0.57735,-0.57735,0.57735,0.30151,-0.90453,0.30151,0.30151,-0.30151,0.90453,0.57735,-0.57735,0.57735,0.8165,-0.40825,0.40825,0.57735,-0.57735,0.57735,0.57735,-0.57735,0.57735,0.40825,-0.8165,0.40825,0.57735,-0.57735,0.57735,0.30151,-0.30151,0.90453,0.57735,-0.57735,0.57735,0.40825,-0.8165,0.40825,0.57735,-0.57735,0.57735,0.90453,-0.30151,0.30151,0.30151,-0.90453,0.30151,0.57735,-0.57735,0.57735,0.40825,-0.40825,0.8165,0.57735,-0.57735,0.57735,0.57735,-0.57735,0.57735,0.40825,-0.40825,0.8165,0.57735,-0.57735,0.57735,0.90453,-0.30151,0.30151,0.73451,0.25969,-0.62694,0.90453,-0.30151,0.30151,0.57735,-0.57735,0.57735,0.57735,-0.57735,-0.57735,0.73451,0.62694,-0.25969,0.90453,-0.30151,0.30151,0.73451,0.25969,-0.62694,0.73451,0.62694,-0.25969,0.57735,0.57735,0.57735,0.57735,-0.57735,0.57735,0.90453,-0.30151,0.30151,-0.25969,0.62694,0.73451,-0.62694,0.25969,0.73451,0.30151,-0.30151,0.90453,0.57735,-0.57735,0.57735,0.30151,-0.30151,0.90453,-0.62694,0.25969,0.73451,-0.57735,-0.57735,0.57735,0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.62694,-0.73451,-0.25969,0.30151,-0.90453,0.30151,0.30151,-0.90453,0.30151,-0.62694,-0.73451,-0.25969,-0.25969,-0.73451,-0.62694,0.57735,0.57735,0.57735,-0.25969,0.62694,0.73451,0.30151,-0.30151,0.90453,0.57735,-0.57735,0.57735,0.57735,-0.57735,0.57735,0.30151,-0.90453,0.30151,-0.25969,-0.73451,-0.62694,0.57735,-0.57735,-0.57735,0.25969,0.62694,0.73451,0.62694,0.25969,0.73451,0.91018,0.29289,-0.29289,0.29289,0.91018,-0.29289,0.62694,-0.73451,-0.25969,0.25969,-0.73451,-0.62694,0.29289,0.29289,-0.91018,0.91018,0.29289,-0.29289,-0.73451,0.25969,-0.62694,-0.73451,0.62694,-0.25969,0.29289,0.91018,-0.29289,0.29289,0.29289,-0.91018,0.29289,0.29289,-0.91018,0.29289,0.91018,-0.29289,0.91018,0.29289,-0.29289,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,-0.57735,-0.40825,-0.40825,-0.8165,-0.40825,-0.40825,0.8165,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,0.57735,-0.40825,-0.40825,0.8165,-0.40825,-0.40825,-0.8165,-0.57735,0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.40825,-0.8165,0.40825,-0.40825,0.8165,0.40825,-0.57735,-0.57735,0.57735,-0.57735,0.57735,0.57735,-0.40825,0.8165,0.40825,-0.40825,-0.8165,0.40825,0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.8165,-0.40825,0.40825,0.8165,-0.40825,0.40825,-0.57735,-0.57735,0.57735,0.57735,-0.57735,0.57735,0.8165,-0.40825,0.40825,-0.8165,-0.40825,0.40825,-0.57735,-0.57735,-0.57735,-0.40825,-0.40825,-0.8165,0.29289,0.29289,-0.91018,0.25969,-0.73451,-0.62694,-0.40825,-0.40825,-0.8165,-0.57735,-0.57735,-0.57735,-0.73451,0.25969,-0.62694,0.29289,0.29289,-0.91018,0.91018,0.29289,-0.29289,0.8165,-0.40825,0.40825,0.57735,-0.57735,0.57735,0.62694,-0.73451,-0.25969,0.57735,-0.57735,0.57735,0.8165,-0.40825,0.40825,0.91018,0.29289,-0.29289,0.62694,0.25969,0.73451,-0.40825,0.8165,0.40825,-0.57735,0.57735,0.57735,0.25969,0.62694,0.73451,0.29289,0.91018,-0.29289,-0.57735,0.57735,0.57735,-0.40825,0.8165,0.40825,0.29289,0.91018,-0.29289,-0.73451,0.62694,-0.25969,-0.57735,-0.57735,0.57735,-0.8165,-0.40825,0.40825,-0.57735,-0.57735,0.57735,-0.30151,-0.90453,0.30151,-0.8165,-0.40825,0.40825,-0.57735,-0.57735,0.57735,-0.30151,-0.30151,0.90453,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.40825,-0.8165,0.40825,-0.57735,-0.57735,0.57735,-0.30151,-0.30151,0.90453,-0.57735,-0.57735,0.57735,-0.40825,-0.8165,0.40825,-0.57735,-0.57735,0.57735,-0.90453,-0.30151,0.30151,-0.40825,-0.40825,0.8165,-0.57735,-0.57735,0.57735,-0.30151,-0.90453,0.30151,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.40825,-0.40825,0.8165,-0.57735,-0.57735,0.57735,-0.90453,-0.30151,0.30151,-0.57735,-0.57735,0.57735,-0.90453,-0.30151,0.30151,-0.73451,0.25969,-0.62694,-0.57735,-0.57735,-0.57735,-0.90453,-0.30151,0.30151,-0.73451,0.62694,-0.25969,-0.73451,0.25969,-0.62694,-0.57735,-0.57735,0.57735,-0.57735,0.57735,0.57735,-0.73451,0.62694,-0.25969,-0.90453,-0.30151,0.30151,0.62694,0.25969,0.73451,0.25969,0.62694,0.73451,-0.30151,-0.30151,0.90453,0.62694,0.25969,0.73451,-0.30151,-0.30151,0.90453,-0.57735,-0.57735,0.57735,0.57735,-0.57735,0.57735,0.62694,-0.73451,-0.25969,0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.30151,-0.90453,0.30151,0.62694,-0.73451,-0.25969,-0.30151,-0.90453,0.30151,0.25969,-0.73451,-0.62694,-0.30151,-0.30151,0.90453,0.25969,0.62694,0.73451,-0.57735,0.57735,0.57735,-0.57735,-0.57735,0.57735,0.25969,-0.73451,-0.62694,-0.30151,-0.90453,0.30151,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,-0.57735,-0.25969,-0.62694,0.73451,-0.62694,-0.25969,0.73451,-0.91018,-0.29289,-0.29289,-0.29289,-0.91018,-0.29289,-0.62694,0.73451,-0.25969,-0.25969,0.73451,-0.62694,-0.29289,-0.29289,-0.91018,-0.91018,-0.29289,-0.29289,0.73451,-0.25969,-0.62694,0.73451,-0.62694,-0.25969,-0.29289,-0.91018,-0.29289,-0.29289,-0.29289,-0.91018,-0.29289,-0.29289,-0.91018,-0.29289,-0.91018,-0.29289,-0.91018,-0.29289,-0.29289,0.57735,0.57735,0.57735,0.57735,0.57735,-0.57735,0.40825,0.40825,-0.8165,0.40825,0.40825,0.8165,0.57735,0.57735,-0.57735,0.57735,0.57735,0.57735,0.40825,0.40825,0.8165,0.40825,0.40825,-0.8165,0.57735,-0.57735,0.57735,0.57735,0.57735,0.57735,0.40825,0.8165,0.40825,0.40825,-0.8165,0.40825,0.57735,0.57735,0.57735,0.57735,-0.57735,0.57735,0.40825,-0.8165,0.40825,0.40825,0.8165,0.40825,-0.57735,0.57735,0.57735,0.57735,0.57735,0.57735,0.8165,0.40825,0.40825,-0.8165,0.40825,0.40825,0.57735,0.57735,0.57735,-0.57735,0.57735,0.57735,-0.8165,0.40825,0.40825,0.8165,0.40825,0.40825,0.57735,0.57735,-0.57735,0.40825,0.40825,-0.8165,-0.29289,-0.29289,-0.91018,-0.25969,0.73451,-0.62694,0.40825,0.40825,-0.8165,0.57735,0.57735,-0.57735,0.73451,-0.25969,-0.62694,-0.29289,-0.29289,-0.91018,-0.91018,-0.29289,-0.29289,-0.8165,0.40825,0.40825,-0.57735,0.57735,0.57735,-0.62694,0.73451,-0.25969,-0.57735,0.57735,0.57735,-0.8165,0.40825,0.40825,-0.91018,-0.29289,-0.29289,-0.62694,-0.25969,0.73451,0.40825,-0.8165,0.40825,0.57735,-0.57735,0.57735,-0.25969,-0.62694,0.73451,-0.29289,-0.91018,-0.29289,0.57735,-0.57735,0.57735,0.40825,-0.8165,0.40825,-0.29289,-0.91018,-0.29289,0.73451,-0.62694,-0.25969,0.57735,0.57735,0.57735,0.8165,0.40825,0.40825,0.57735,0.57735,0.57735,0.30151,0.90453,0.30151,0.8165,0.40825,0.40825,0.57735,0.57735,0.57735,0.30151,0.30151,0.90453,0.57735,0.57735,0.57735,0.57735,0.57735,0.57735,0.40825,0.8165,0.40825,0.57735,0.57735,0.57735,0.30151,0.30151,0.90453,0.57735,0.57735,0.57735,0.40825,0.8165,0.40825,0.57735,0.57735,0.57735,0.90453,0.30151,0.30151,0.40825,0.40825,0.8165,0.57735,0.57735,0.57735,0.30151,0.90453,0.30151,0.57735,0.57735,0.57735,0.57735,0.57735,0.57735,0.40825,0.40825,0.8165,0.57735,0.57735,0.57735,0.90453,0.30151,0.30151,0.57735,0.57735,0.57735,0.90453,0.30151,0.30151,0.73451,-0.25969,-0.62694,0.57735,0.57735,-0.57735,0.90453,0.30151,0.30151,0.73451,-0.62694,-0.25969,0.73451,-0.25969,-0.62694,0.57735,0.57735,0.57735,0.57735,-0.57735,0.57735,0.73451,-0.62694,-0.25969,0.90453,0.30151,0.30151,-0.62694,-0.25969,0.73451,-0.25969,-0.62694,0.73451,0.30151,0.30151,0.90453,-0.62694,-0.25969,0.73451,0.30151,0.30151,0.90453,0.57735,0.57735,0.57735,-0.57735,0.57735,0.57735,-0.62694,0.73451,-0.25969,-0.57735,0.57735,0.57735,0.57735,0.57735,0.57735,0.30151,0.90453,0.30151,-0.62694,0.73451,-0.25969,0.30151,0.90453,0.30151,-0.25969,0.73451,-0.62694,0.30151,0.30151,0.90453,-0.25969,-0.62694,0.73451,0.57735,-0.57735,0.57735,0.57735,0.57735,0.57735,-0.25969,0.73451,-0.62694,0.30151,0.90453,0.30151,0.57735,0.57735,0.57735,0.57735,0.57735,-0.57735,0.91018,-0.29289,-0.29289,0.62694,-0.25969,0.73451,0.25969,-0.62694,0.73451,0.29289,-0.91018,-0.29289,0.29289,-0.29289,-0.91018,0.25969,0.73451,-0.62694,0.62694,0.73451,-0.25969,0.91018,-0.29289,-0.29289,0.29289,-0.91018,-0.29289,-0.73451,-0.62694,-0.25969,-0.73451,-0.25969,-0.62694,0.29289,-0.29289,-0.91018,0.29289,-0.91018,-0.29289,0.29289,-0.29289,-0.91018,0.91018,-0.29289,-0.29289,-0.40825,0.40825,-0.8165,-0.57735,0.57735,-0.57735,-0.57735,0.57735,0.57735,-0.40825,0.40825,0.8165,-0.40825,0.40825,0.8165,-0.57735,0.57735,0.57735,-0.57735,0.57735,-0.57735,-0.40825,0.40825,-0.8165,-0.40825,0.8165,0.40825,-0.57735,0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.40825,-0.8165,0.40825,-0.40825,-0.8165,0.40825,-0.57735,-0.57735,0.57735,-0.57735,0.57735,0.57735,-0.40825,0.8165,0.40825,-0.8165,0.40825,0.40825,-0.57735,0.57735,0.57735,0.57735,0.57735,0.57735,0.8165,0.40825,0.40825,0.8165,0.40825,0.40825,0.57735,0.57735,0.57735,-0.57735,0.57735,0.57735,-0.8165,0.40825,0.40825,0.29289,-0.29289,-0.91018,-0.40825,0.40825,-0.8165,-0.57735,0.57735,-0.57735,0.25969,0.73451,-0.62694,-0.73451,-0.25969,-0.62694,-0.57735,0.57735,-0.57735,-0.40825,0.40825,-0.8165,0.29289,-0.29289,-0.91018,0.57735,0.57735,0.57735,0.8165,0.40825,0.40825,0.91018,-0.29289,-0.29289,0.62694,0.73451,-0.25969,0.91018,-0.29289,-0.29289,0.8165,0.40825,0.40825,0.57735,0.57735,0.57735,0.62694,-0.25969,0.73451,0.25969,-0.62694,0.73451,-0.57735,-0.57735,0.57735,-0.40825,-0.8165,0.40825,0.29289,-0.91018,-0.29289,0.29289,-0.91018,-0.29289,-0.40825,-0.8165,0.40825,-0.57735,-0.57735,0.57735,-0.73451,-0.62694,-0.25969,-0.57735,0.57735,0.57735,-0.8165,0.40825,0.40825,-0.57735,0.57735,0.57735,-0.30151,0.90453,0.30151,-0.30151,0.30151,0.90453,-0.57735,0.57735,0.57735,-0.8165,0.40825,0.40825,-0.57735,0.57735,0.57735,-0.57735,0.57735,0.57735,-0.40825,0.8165,0.40825,-0.57735,0.57735,0.57735,-0.30151,0.30151,0.90453,-0.57735,0.57735,0.57735,-0.40825,0.8165,0.40825,-0.57735,0.57735,0.57735,-0.90453,0.30151,0.30151,-0.30151,0.90453,0.30151,-0.57735,0.57735,0.57735,-0.40825,0.40825,0.8165,-0.57735,0.57735,0.57735,-0.57735,0.57735,0.57735,-0.40825,0.40825,0.8165,-0.57735,0.57735,0.57735,-0.90453,0.30151,0.30151,-0.73451,-0.25969,-0.62694,-0.90453,0.30151,0.30151,-0.57735,0.57735,0.57735,-0.57735,0.57735,-0.57735,-0.73451,-0.62694,-0.25969,-0.90453,0.30151,0.30151,-0.73451,-0.25969,-0.62694,-0.73451,-0.62694,-0.25969,-0.57735,-0.57735,0.57735,-0.57735,0.57735,0.57735,-0.90453,0.30151,0.30151,0.25969,-0.62694,0.73451,0.62694,-0.25969,0.73451,-0.30151,0.30151,0.90453,-0.57735,0.57735,0.57735,-0.30151,0.30151,0.90453,0.62694,-0.25969,0.73451,0.57735,0.57735,0.57735,-0.57735,0.57735,0.57735,0.57735,0.57735,0.57735,0.62694,0.73451,-0.25969,-0.30151,0.90453,0.30151,-0.30151,0.90453,0.30151,0.62694,0.73451,-0.25969,0.25969,0.73451,-0.62694,-0.57735,-0.57735,0.57735,0.25969,-0.62694,0.73451,-0.30151,0.30151,0.90453,-0.57735,0.57735,0.57735,-0.57735,0.57735,0.57735,-0.30151,0.90453,0.30151,0.25969,0.73451,-0.62694,-0.57735,0.57735,-0.57735],
    "colors": [],
    "uvs": [[]],
    "faces": [35,9,8,4,5,0,0,1,2,3,35,1,13,6,4,0,4,5,6,7,35,17,16,5,6,0,8,9,10,11,34,6,5,4,0,12,13,14,35,22,18,12,26,0,15,16,17,18,35,14,30,26,12,0,19,20,21,22,35,15,23,27,11,0,23,24,25,26,35,21,10,11,27,0,27,28,29,30,35,7,19,25,3,0,31,32,33,34,35,29,2,3,25,0,35,36,37,38,35,14,12,6,13,0,39,40,41,42,35,12,18,17,6,0,43,44,45,46,35,4,3,2,1,0,47,48,49,50,35,7,3,4,8,0,51,52,53,54,35,11,10,9,5,0,55,56,57,58,35,15,11,5,16,0,59,60,61,62,35,29,25,0,28,0,63,64,65,66,35,25,19,20,0,0,67,68,69,70,35,21,27,0,20,0,71,72,73,74,35,0,27,23,24,0,75,76,77,78,35,26,30,28,0,0,79,80,81,82,35,22,26,0,24,0,83,84,85,86,35,22,24,17,18,0,87,88,89,90,34,24,16,17,0,91,92,93,35,23,15,16,24,0,94,95,96,97,34,8,9,20,0,98,99,100,35,8,20,19,7,0,101,102,103,104,35,1,2,29,28,0,105,106,107,108,34,1,28,13,0,109,110,111,35,20,9,10,21,0,112,113,114,115,35,13,28,30,14,0,116,117,118,119,35,35,39,40,36,0,120,121,122,123,35,37,44,32,35,0,124,125,126,127,35,36,47,48,37,0,128,129,130,131,34,36,37,35,0,132,133,134,35,43,49,53,57,0,135,136,137,138,35,57,61,45,43,0,139,140,141,142,35,58,54,46,42,0,143,144,145,146,35,42,41,52,58,0,147,148,149,150,35,56,50,38,34,0,151,152,153,154,35,34,33,60,56,0,155,156,157,158,35,37,43,45,44,0,159,160,161,162,35,48,49,43,37,0,163,164,165,166,35,33,34,35,32,0,167,168,169,170,35,35,34,38,39,0,171,172,173,174,35,40,41,42,36,0,175,176,177,178,35,36,42,46,47,0,179,180,181,182,35,31,56,60,59,0,183,184,185,186,35,51,50,56,31,0,187,188,189,190,35,31,58,52,51,0,191,192,193,194,35,54,58,31,55,0,195,196,197,198,35,59,61,57,31,0,199,200,201,202,35,31,57,53,55,0,203,204,205,206,35,48,55,53,49,0,207,208,209,210,34,47,55,48,0,211,212,213,35,47,46,54,55,0,214,215,216,217,34,40,39,51,0,218,219,220,35,50,51,39,38,0,221,222,223,224,35,60,33,32,59,0,225,226,227,228,34,59,32,44,0,229,230,231,35,41,40,51,52,0,232,233,234,235,35,61,59,44,45,0,236,237,238,239,35,66,70,71,67,0,240,241,242,243,35,68,75,63,66,0,244,245,246,247,35,67,78,79,68,0,248,249,250,251,34,67,68,66,0,252,253,254,35,74,80,84,88,0,255,256,257,258,35,88,92,76,74,0,259,260,261,262,35,89,85,77,73,0,263,264,265,266,35,73,72,83,89,0,267,268,269,270,35,87,81,69,65,0,271,272,273,274,35,65,64,91,87,0,275,276,277,278,35,68,74,76,75,0,279,280,281,282,35,79,80,74,68,0,283,284,285,286,35,64,65,66,63,0,287,288,289,290,35,66,65,69,70,0,291,292,293,294,35,71,72,73,67,0,295,296,297,298,35,67,73,77,78,0,299,300,301,302,35,62,87,91,90,0,303,304,305,306,35,82,81,87,62,0,307,308,309,310,35,62,89,83,82,0,311,312,313,314,35,85,89,62,86,0,315,316,317,318,35,90,92,88,62,0,319,320,321,322,35,62,88,84,86,0,323,324,325,326,35,79,86,84,80,0,327,328,329,330,34,78,86,79,0,331,332,333,35,78,77,85,86,0,334,335,336,337,34,71,70,82,0,338,339,340,35,81,82,70,69,0,341,342,343,344,35,91,64,63,90,0,345,346,347,348,34,90,63,75,0,349,350,351,35,72,71,82,83,0,352,353,354,355,35,92,90,75,76,0,356,357,358,359,35,102,101,97,98,0,360,361,362,363,35,94,106,99,97,0,364,365,366,367,35,110,109,98,99,0,368,369,370,371,34,99,98,97,0,372,373,374,35,115,111,105,119,0,375,376,377,378,35,107,123,119,105,0,379,380,381,382,35,108,116,120,104,0,383,384,385,386,35,114,103,104,120,0,387,388,389,390,35,100,112,118,96,0,391,392,393,394,35,122,95,96,118,0,395,396,397,398,35,107,105,99,106,0,399,400,401,402,35,105,111,110,99,0,403,404,405,406,35,97,96,95,94,0,407,408,409,410,35,100,96,97,101,0,411,412,413,414,35,104,103,102,98,0,415,416,417,418,35,108,104,98,109,0,419,420,421,422,35,122,118,93,121,0,423,424,425,426,35,118,112,113,93,0,427,428,429,430,35,114,120,93,113,0,431,432,433,434,35,93,120,116,117,0,435,436,437,438,35,119,123,121,93,0,439,440,441,442,35,115,119,93,117,0,443,444,445,446,35,115,117,110,111,0,447,448,449,450,34,117,109,110,0,451,452,453,35,116,108,109,117,0,454,455,456,457,34,101,102,113,0,458,459,460,35,101,113,112,100,0,461,462,463,464,35,94,95,122,121,0,465,466,467,468,34,94,121,106,0,469,470,471,35,113,102,103,114,0,472,473,474,475,35,106,121,123,107,0,476,477,478,479,35,128,132,133,129,0,480,481,482,483,35,130,137,125,128,0,484,485,486,487,35,129,140,141,130,0,488,489,490,491,34,129,130,128,0,492,493,494,35,136,142,146,150,0,495,496,497,498,35,150,154,138,136,0,499,500,501,502,35,151,147,139,135,0,503,504,505,506,35,135,134,145,151,0,507,508,509,510,35,149,143,131,127,0,511,512,513,514,35,127,126,153,149,0,515,516,517,518,35,130,136,138,137,0,519,520,521,522,35,141,142,136,130,0,523,524,525,526,35,126,127,128,125,0,527,528,529,530,35,128,127,131,132,0,531,532,533,534,35,133,134,135,129,0,535,536,537,538,35,129,135,139,140,0,539,540,541,542,35,124,149,153,152,0,543,544,545,546,35,144,143,149,124,0,547,548,549,550,35,124,151,145,144,0,551,552,553,554,35,147,151,124,148,0,555,556,557,558,35,152,154,150,124,0,559,560,561,562,35,124,150,146,148,0,563,564,565,566,35,141,148,146,142,0,567,568,569,570,34,140,148,141,0,571,572,573,35,140,139,147,148,0,574,575,576,577,34,133,132,144,0,578,579,580,35,143,144,132,131,0,581,582,583,584,35,153,126,125,152,0,585,586,587,588,34,152,125,137,0,589,590,591,35,134,133,144,145,0,592,593,594,595,35,154,152,137,138,0,596,597,598,599,35,164,163,159,160,0,600,601,602,603,35,156,168,161,159,0,604,605,606,607,35,172,171,160,161,0,608,609,610,611,34,161,160,159,0,612,613,614,35,177,173,167,181,0,615,616,617,618,35,169,185,181,167,0,619,620,621,622,35,170,178,182,166,0,623,624,625,626,35,176,165,166,182,0,627,628,629,630,35,162,174,180,158,0,631,632,633,634,35,184,157,158,180,0,635,636,637,638,35,169,167,161,168,0,639,640,641,642,35,167,173,172,161,0,643,644,645,646,35,159,158,157,156,0,647,648,649,650,35,162,158,159,163,0,651,652,653,654,35,166,165,164,160,0,655,656,657,658,35,170,166,160,171,0,659,660,661,662,35,184,180,155,183,0,663,664,665,666,35,180,174,175,155,0,667,668,669,670,35,176,182,155,175,0,671,672,673,674,35,155,182,178,179,0,675,676,677,678,35,181,185,183,155,0,679,680,681,682,35,177,181,155,179,0,683,684,685,686,35,177,179,172,173,0,687,688,689,690,34,179,171,172,0,691,692,693,35,178,170,171,179,0,694,695,696,697,34,163,164,175,0,698,699,700,35,163,175,174,162,0,701,702,703,704,35,156,157,184,183,0,705,706,707,708,34,156,183,168,0,709,710,711,35,175,164,165,176,0,712,713,714,715,35,168,183,185,169,0,716,717,718,719,35,195,194,190,191,0,720,721,722,723,35,187,199,192,190,0,724,725,726,727,35,203,202,191,192,0,728,729,730,731,34,192,191,190,0,732,733,734,35,208,204,198,212,0,735,736,737,738,35,200,216,212,198,0,739,740,741,742,35,201,209,213,197,0,743,744,745,746,35,207,196,197,213,0,747,748,749,750,35,193,205,211,189,0,751,752,753,754,35,215,188,189,211,0,755,756,757,758,35,200,198,192,199,0,759,760,761,762,35,198,204,203,192,0,763,764,765,766,35,190,189,188,187,0,767,768,769,770,35,193,189,190,194,0,771,772,773,774,35,197,196,195,191,0,775,776,777,778,35,201,197,191,202,0,779,780,781,782,35,215,211,186,214,0,783,784,785,786,35,211,205,206,186,0,787,788,789,790,35,207,213,186,206,0,791,792,793,794,35,186,213,209,210,0,795,796,797,798,35,212,216,214,186,0,799,800,801,802,35,208,212,186,210,0,803,804,805,806,35,208,210,203,204,0,807,808,809,810,34,210,202,203,0,811,812,813,35,209,201,202,210,0,814,815,816,817,34,194,195,206,0,818,819,820,35,194,206,205,193,0,821,822,823,824,35,187,188,215,214,0,825,826,827,828,34,187,214,199,0,829,830,831,35,206,195,196,207,0,832,833,834,835,35,199,214,216,200,0,836,837,838,839,35,221,225,226,222,0,840,841,842,843,35,223,230,218,221,0,844,845,846,847,35,222,233,234,223,0,848,849,850,851,34,222,223,221,0,852,853,854,35,229,235,239,243,0,855,856,857,858,35,243,247,231,229,0,859,860,861,862,35,244,240,232,228,0,863,864,865,866,35,228,227,238,244,0,867,868,869,870,35,242,236,224,220,0,871,872,873,874,35,220,219,246,242,0,875,876,877,878,35,223,229,231,230,0,879,880,881,882,35,234,235,229,223,0,883,884,885,886,35,219,220,221,218,0,887,888,889,890,35,221,220,224,225,0,891,892,893,894,35,226,227,228,222,0,895,896,897,898,35,222,228,232,233,0,899,900,901,902,35,217,242,246,245,0,903,904,905,906,35,237,236,242,217,0,907,908,909,910,35,217,244,238,237,0,911,912,913,914,35,240,244,217,241,0,915,916,917,918,35,245,247,243,217,0,919,920,921,922,35,217,243,239,241,0,923,924,925,926,35,234,241,239,235,0,927,928,929,930,34,233,241,234,0,931,932,933,35,233,232,240,241,0,934,935,936,937,34,226,225,237,0,938,939,940,35,236,237,225,224,0,941,942,943,944,35,246,219,218,245,0,945,946,947,948,34,245,218,230,0,949,950,951,35,227,226,237,238,0,952,953,954,955,35,247,245,230,231,0,956,957,958,959]
   } );
   return object.geometry;
}
SCMAP.SelectedSystemGeometry = SCMAP.SelectedSystemGeometry || _build_selected_system_object();

/**
* @author Lianna Eeftinck / https://github.com/Leeft
*/

SCMAP.JumpPoint = function ( data ) {
   this.name = ( typeof data.name === 'string' && data.name.length > 1 ) ? data.name : undefined;
   this.source = ( data.source instanceof SCMAP.System ) ? data.source : undefined;
   this.destination = ( data.destination instanceof SCMAP.System ) ? data.destination : undefined;
   this.drawn = false;
   this.typeId = ( typeof data.typeId === 'number' ) ? data.typeId : 4;
   this.entryAU = new THREE.Vector3(
      (typeof data.entryAU[ 0 ] === 'number') ? data.entryAU[ 0 ] : 0,
      (typeof data.entryAU[ 1 ] === 'number') ? data.entryAU[ 1 ] : 0,
      (typeof data.entryAU[ 2 ] === 'number') ? data.entryAU[ 2 ] : 0
   );

   if ( !this.isValid() ) {
      console.error( "Invalid route created" );
   } else {
      if ( this.name === undefined || this.name === '' ) {
         this.name = "[" + this.source.name + " to " + this.destination.name + "]";
      }
   }
};

SCMAP.JumpPoint.prototype = {
   constructor: SCMAP.JumpPoint,

   length: function() {
      if ( !this.isValid() ) { return; }
      return this.source.position.distanceTo( this.destination.position );
   },

   jumpTime: function() {
      if ( !this.isValid() ) { return; }
      // TODO FIXME: This is a rough guesstimate on how long it will take
      // to travel a JP, and not based in any facts ... no word from devs
      // on this so far.
      return this.length() * 4; // 2 mins for 30LY, ~Sol to Vega (27LY)
   },

   fuelConsumption: function() {
      if ( !this.isValid() ) { return; }
      // TODO: Devs have stated that JP's don't consume fuel to traverse.
      // If that changes, this needs to be quantified and fixed.
      return 0;
   },

   buildSceneObject: function() {
      var oppositeJumppoint, geometry;

      if ( this.drawn ) {
         return;
      }

      // Check if the opposite jumppoint has already been drawn
      oppositeJumppoint = this.getOppositeJumppoint();
      if ( oppositeJumppoint instanceof SCMAP.JumpPoint && oppositeJumppoint.drawn ) {
         return;
      }

      geometry = new THREE.Geometry();
      geometry.colors.push( this.source.faction.lineColor );
      geometry.vertices.push( this.source.sceneObject.position );
      geometry.colors.push( this.destination.faction.lineColor );
      geometry.vertices.push( this.destination.sceneObject.position );

      // Set both the jumppoints as drawn
      this.setDrawn();
      if ( oppositeJumppoint instanceof SCMAP.JumpPoint ) {
         oppositeJumppoint.setDrawn();
      }

      // This is apparently needed for dashed lines
      geometry.computeLineDistances();
      return new THREE.Line( geometry, this.getMaterial(), THREE.LinePieces );
   },

   getOppositeJumppoint: function() {
      for ( var i = 0; i < this.destination.jumpPoints.length; i++ ) {
         var jumppoint = this.destination.jumpPoints[i];
         if ( jumppoint.destination == this.source ) {
            return jumppoint;
         }
      }
   },

   getMaterial: function() {
      if ( this.typeId === 2 ) {
         return SCMAP.JumpPoint.Material.Undiscovered;
      } else if ( this.typeId === 4 ) {
         return SCMAP.JumpPoint.Material.Possible;
      } else {
         return SCMAP.JumpPoint.Material.Regular;
      }
   },

   isValid: function() {
      return( this.source instanceof SCMAP.System &&
         this.destination instanceof SCMAP.System &&
         this.source !== this.destination );
   },

   isUnconfirmed: function() {
      return ( this.typeId === 2 || this.typeId === 4 );
   },

   setDrawn: function() {
      this.drawn = true;
   }
};

SCMAP.JumpPoint.Material = {};
SCMAP.JumpPoint.Material.Regular = new THREE.LineBasicMaterial({
   color: 0xFFFFFF,
   linewidth: 2,
   vertexColors: true
});
SCMAP.JumpPoint.Material.Undiscovered = new THREE.LineDashedMaterial({
   color: 0xFFFFFF,
   dashSize: 0.75,
   gapSize: 0.75,
   linewidth: 2,
   vertexColors: true
});
SCMAP.JumpPoint.Material.Possible = new THREE.LineDashedMaterial({
   color: 0xFFFFFF,
   dashSize: 2,
   gapSize: 2,
   linewidth: 2,
   vertexColors: true
});

// EOF

/**
* @author Lianna Eeftinck / https://github.com/Leeft
*/

SCMAP.Faction = function ( data ) {

   this.id = undefined;
   this.name = 'Unclaimed';
   this.shortName = 'NONE';
   this.isRealFaction = false;
   this.color = new THREE.Color( 0xFFFFFF );
   this.planeColor = new THREE.Color( 0xFF0000 );
   this.lineColor = new THREE.Color( 0xFFFF00 );

   this.setValues( data );

   // Internals
   this._claimed = {
      systems: {}
   };
   this._darkMaterial = undefined;

};

SCMAP.Faction.prototype = {
   constructor: SCMAP.Faction,

   claim: function ( system ) {
      if ( ! system instanceof SCMAP.System ) {
         new Error( "A faction can only claim ownership over a system" );
         return;
      }
      this._claimed.systems[ system.uuid ] = true;
      return this;
   },

   claimed: function ( system ) {
      if ( ! system instanceof SCMAP.System ) {
         new Error( "A faction can only test ownership over a system" );
         return;
      }
      return this._claimed.systems[ system.uuid ];
   },

   material: function ( ) {
      if ( typeof this._darkMaterial === 'undefined' ) {
         this._darkMaterial = new THREE.MeshBasicMaterial({
            color: this.planeColor, vertexColors: true });
      }
      return this._darkMaterial;
   },

   isHostileTo: function ( comparedTo ) {
      if ( !( comparedTo instanceof SCMAP.Faction ) ) {
         throw "Can only compare to other factions";
      }
      // TODO: more data in database, more logic here
      // rather than lots of hardcoding
      if ( comparedTo.name === 'Vanduul' ) {
         return ( this.name !== 'Vanduul' );
      } else {
         return ( this.name === 'Vanduul' );
      }
   },

   getValue: function ( key ) {
      if ( key === undefined ) {
         return;
      }
      var value = this[ key ];
      return value;
   },

   setValues: function ( values ) {
      if ( values === undefined ) {
         return;
      }

      for ( var key in values ) {

         var newValue = values[ key ];
         if ( newValue === undefined ) {
            console.log( 'SCMAP.Faction: "' + key + '" parameter is undefined for "'+this.name+'"' );
            continue;
         }

         if ( key in this )
         {
            var currentValue = this[ key ];
            if ( currentValue instanceof THREE.Color ) {

               if ( newValue instanceof THREE.Color ) {
                  this[ key ] = newValue;
               } else {
                  newValue = newValue.replace( '0x', '#' );
                  this[ key ] = new THREE.Color( newValue );
               }
               if ( key === 'color' ) {
                  this.planeColor = this[ key ].clone().offsetHSL( 0, 0.5, 0 ).multiplyScalar( 0.20 );
                  this.lineColor = this[ key ].clone().offsetHSL( 0, 0.05, -0.05 );
               }

            } else {
               this[ key ] = newValue;
            }
         }

      }
   }
};

SCMAP.Faction.preprocessFactions = function () {
   var factionId, faction;

   SCMAP.data.factionsByName = {};

   for ( factionId in SCMAP.data.factions ) {

      faction = SCMAP.data.factions[ factionId ];
      if ( faction instanceof SCMAP.Faction ) {
         SCMAP.data.factionsByName[ faction.name ]      = faction;
         SCMAP.data.factionsByName[ faction.shortName ] = faction;
         continue;
      }

      faction = new SCMAP.Faction({
         id: factionId,
         name: faction.name,
         shortName: faction.short_name,
         color: faction.color,
         isRealFaction: faction.is_real_faction
      });

      SCMAP.data.factions[ factionId ]               = faction;
      SCMAP.data.factionsByName[ faction.name ]      = faction;
      SCMAP.data.factionsByName[ faction.shortName ] = faction;
   }
};

SCMAP.Faction.getById = function ( id ) {
   var faction = SCMAP.data.factions[ id ];
   if ( ! ( faction instanceof SCMAP.Faction ) ) {
      faction = SCMAP.data.factionsByName.Unclaimed;
   }
   return faction;
};
SCMAP.Faction.getByName = function ( name ) {
   var faction = SCMAP.data.factionsByName[ name ];
   if ( ! ( faction instanceof SCMAP.Faction ) ) {
      faction = SCMAP.data.factionsByName.Unclaimed;
   }
   return faction;
};

// EOF

/**
* @author Lianna Eeftinck / https://github.com/Leeft
*/

SCMAP.Goods = function ( data ) {

   this.id = undefined;
   this.name = 'Unknown';
   this.isBlackMarket = false;

   this.setValues( data );

   // Internals
   this._trade = {
      importing: [],
      exporting: [],
      blackMarket: []
   };

};

SCMAP.Goods.prototype = {
   constructor: SCMAP.Goods,

//   claim: function ( system ) {
//      if ( ! system instanceof SCMAP.System ) {
//         new Error( "A faction can only claim ownership over a system" );
//         return;
//      }
//      this._claimed.systems[ system.uuid ] = true;
//   },
//
//   claimed: function ( system ) {
//      if ( ! system instanceof SCMAP.System ) {
//         new Error( "A faction can only test ownership over a system" );
//         return;
//      }
//      return this._claimed.systems[ system.uuid ];
//   },
//
//   material: function ( ) {
//      if ( typeof this._darkMaterial === 'undefined' ) {
//         this._darkMaterial = new THREE.MeshBasicMaterial({ color: this.dark, vertexColors: false });
//      }
//      return this._darkMaterial;
//   },

   getValue: function ( key ) {
      if ( key === undefined ) {
         return;
      }
      var value = this[ key ];
      return value;
   },

   setValues: function ( values ) {
      if ( values === undefined ) {
         return;
      }

      for ( var key in values ) {

         var newValue = values[ key ];
         if ( newValue === undefined ) {
            console.log( 'SCMAP.Goods: "' + key + '" parameter is undefined for "'+this.name+'"' );
            continue;
         }

         if ( key in this )
         {
            var currentValue = this[ key ];
            this[ key ] = newValue;
         }

      }
   }
};

SCMAP.Goods.preprocessGoods = function () {
   var goodsId, goods;

   SCMAP.data.goodsByName = {};

   for ( goodsId in SCMAP.data.goods ) {

      goods = SCMAP.data.goods[ goodsId ];
      if ( goods instanceof SCMAP.Goods ) {
         SCMAP.data.goodsByName[ goods.name ] = goods;
         continue;
      }

      goods = new SCMAP.Goods({
         id: goodsId,
         name: goods.name,
         isBlackMarket: goods.black_market
      });

      SCMAP.data.goods[ goodsId ] = goods;
      SCMAP.data.goodsByName[ goods.name ] = goods;
   }
};

SCMAP.Goods.getById = function ( id ) {
   return SCMAP.data.goods[ id ];
};
SCMAP.Goods.getByName = function ( name ) {
   return SCMAP.data.goodsByName[ name ];
};

// EOF

/**
* @author Lianna Eeftinck / https://github.com/Leeft
*/

SCMAP.System = function ( data ) {
   // Filled in from the config
   this.id = undefined;
   this.uuid = undefined;
   this.name = '';
   this.nickname = '';
   this.position = new THREE.Vector3();
   this.faction = new SCMAP.Faction();
   this.size = 'medium';
   this.jumpPoints = [];
   this.starColor = new THREE.Color( 0xFFFFFF );
   this.source = undefined;
   this.planets = 0;
   this.planetaryRotation = [];
   this.import = [];
   this.export = [];
   this.crimeStatus = '';
   this.blackMarket = [];
   this.ueeStrategicValue = undefined;
   this.blob = [];

   this.setValues( data );

   // Generated
   this._routeObjects = [];
   this.scale = 1.0;
   this.binary = false;
};

SCMAP.System.prototype = {
   constructor: SCMAP.System,

   buildSceneObject: function () {
      var star, label, glow, position, lod, boxSize;

      this.sceneObject = new THREE.Object3D();

      // To make systems easier to click, we add an invisible cube to them
      // (probably also easier for the raycaster)
      star = new THREE.Mesh( SCMAP.System.CUBE, SCMAP.System.CUBE_MATERIAL );
      star.visible = false;
      boxSize = Math.min( 5.75, Math.max( 3.5, 5 * this.scale ) );
      star.scale.set( boxSize, boxSize, boxSize );
      this.sceneObject.add( star );

      // LOD for the systems to make them properly round up close
      lod = new THREE.LOD();
      for ( i = 0; i < SCMAP.System.LODMESH.length; i++ ) {
         star = new THREE.Mesh( SCMAP.System.LODMESH[ i ][ 0 ], this.starMaterial() );
         star.scale.set( this.scale, this.scale, this.scale );
         star.updateMatrix();
         star.matrixAutoUpdate = false;
         lod.addLevel( star, SCMAP.System.LODMESH[ i ][ 1 ] );
      }
      lod.updateMatrix();
      lod.matrixAutoUpdate = false;
      this.sceneObject.add( lod );

      glow = new THREE.Sprite( this.glowMaterial() );
      glow.scale.set( SCMAP.System.GLOW_SCALE * this.scale, SCMAP.System.GLOW_SCALE * this.scale, 1.0 );
      glow.isGlow = true;
      glow.sortParticles = true;
      glow.visible = SCMAP.settings.glow;
      this.sceneObject.add( glow );

      label = new THREE.Sprite( this.labelSprite( SCMAP.settings.labelIcons ) );
      label.position.set( 0, 3.5, 0 );
      label.position.set( 0, this.scale * 3, 0 );
      label.scale.set( SCMAP.System.LABEL_SCALE * label.material.map.image.width, SCMAP.System.LABEL_SCALE * label.material.map.image.height, 1 );
      label.isLabel = true;
      label.sortParticles = true;
      label.visible = SCMAP.settings.labels;
      this.sceneObject.add( label );

      position = this.position.clone();
      if ( storage && storage.mode === '2d' ) {
         position.setY( position.y * 0.005 );
      }
      this.sceneObject.position = position;
      this.sceneObject.system = this;
      this.sceneObject.scaleY = this.scaleY;
      return this.sceneObject;
   },

   updateSceneObject: function ( scene ) {
      for ( var i = 0; i < this.sceneObject.children.length; i++ ) {
         var object = this.sceneObject.children[i];
         if ( object.isLabel ) {
            this.updateLabelSprite( object.material, SCMAP.settings.labelIcons );
            object.visible = SCMAP.settings.labels;
         } else if ( object.isGlow ) {
            object.visible = SCMAP.settings.glow;
         }
      }
   },

   setLabelScale: function ( vector ) {
      for ( var i = 0; i < this.sceneObject.children.length; i++ ) {
         if ( this.sceneObject.children[i].isLabel ) {
            this.sceneObject.children[i].scale.copy( vector );
         }
      }
   },

   starMaterial: function () {
      return SCMAP.System.STAR_MATERIAL_WHITE;
   },

   glowMaterial: function () {
      var color = this.starColor;
      if ( color.equals( SCMAP.Color.BLACK ) ) {
         color.copy( SCMAP.Color.UNSET );
      }
      return new THREE.SpriteMaterial({
         map: SCMAP.System.GLOW_MAP,
         blending: THREE.AdditiveBlending,
         transparent: false,
         useScreenCoordinates: false,
         color: color
      });
   },

   labelSprite: function ( drawIcons ) {
      var canvas, texture, material;

      canvas = this.drawSystemText( drawIcons );

      texture = new THREE.Texture( canvas ) ;
      texture.needsUpdate = true;

      material = new THREE.SpriteMaterial({
         map: texture,
         useScreenCoordinates: false,
         blending: THREE.CustomBlending
      });

      return material;
   },

   // Refreshes the text and icons on the system's label
   updateLabelSprite: function ( spriteMaterial, drawLabels ) {
      var canvas, texture;
      canvas = this.drawSystemText( drawLabels );
      texture = new THREE.Texture( canvas ) ;
      texture.needsUpdate = true;
      spriteMaterial.map = texture;
   },

   // Draws the text on a label
   drawSystemText: function ( drawSymbols ) {
      var canvas, context, texture, text = this.name, actualWidth;
      var textX, textY;

      canvas = document.createElement('canvas');
      canvas.width = 256;
      canvas.height = 256;
      context = canvas.getContext('2d');

      context.font = '36pt Electrolize, Calibri, sans-serif';
      context.textAlign = 'center';
      context.strokeStyle = 'rgba(0,0,0,0.95)';
      context.lineWidth = 5;
      actualWidth = Math.ceil( context.measureText( text ).width + 1 );
      while ( actualWidth > canvas.width ) {
         canvas.width *= 2;
         canvas.height *= 2;
      }

      //context.beginPath();
      //context.rect( 0, 0, canvas.width, canvas.height );
      //context.lineWidth = 5;
      //context.strokeStyle = 'yellow';
      //context.stroke();

      textX = canvas.width / 2;
      textY = canvas.height / 2;

      context.font = '36pt Electrolize, Calibri, sans-serif';
      context.strokeStyle = 'rgba(0,0,0,0.95)';
      context.textAlign = 'center';
      context.lineWidth = 5;
      context.strokeText( text, textX, textY );

      context.fillStyle = this.faction.color.getStyle();
      context.fillText( text, textX, textY );

      if ( drawSymbols ) {
         this._drawSymbols( context, textX, textY - 50, this.getIcons() );
      }

      return canvas;
   },

   // Draws the icon(s) on a label
   _drawSymbols: function ( context, x, y, symbols ) {
      var i, symbol, totalWidth = ( SCMAP.Symbol.SIZE * symbols.length ) + ( SCMAP.Symbol.SPACING * ( symbols.length - 1 ) );
      var offX, offY;
      x -= totalWidth / 2;

      for ( i = 0; i < symbols.length; i++ )
      {
         symbol = symbols[ i ];

         offX = 0;
         offY = 0;

         context.font = ( SCMAP.Symbol.SIZE * symbol.scale).toFixed(1) + 'pt FontAwesome';

         if ( false ) {
            context.beginPath();
            context.rect( x, y - SCMAP.Symbol.SIZE, SCMAP.Symbol.SIZE, SCMAP.Symbol.SIZE );
            context.lineWidth = 5;
            context.strokeStyle = 'yellow';
            context.stroke();
         }

         if ( symbol.offset ) {
            offX = symbol.offset.x;
            offY = symbol.offset.y;
         }

         context.strokeStyle = 'rgba(0,0,0,0.95)';
         context.textAlign = 'center';
         context.lineWidth = 5;
         context.strokeText( symbol.code, x + offX + ( SCMAP.Symbol.SIZE / 2 ), y + offY );

         context.fillStyle = symbol.color;
         context.fillText( symbol.code, x + offX + ( SCMAP.Symbol.SIZE / 2 ), y + offY );

         x += SCMAP.Symbol.SIZE + SCMAP.Symbol.SPACING;
      }
   },

   createInfoLink: function ( noIcons ) {
      var $line = $( '<a></a>' );

      if ( typeof this.faction !== 'undefined' && typeof this.faction !== 'undefined' ) {
         $line.css( 'color', this.faction.color.getStyle() );
      }

      $line.addClass('system-link');
      $line.attr( 'data-goto', 'system' );
      $line.attr( 'data-system', this.id );
      $line.attr( 'href', '#system='+encodeURI( this.name ) );
      $line.attr( 'title', 'Show information on '+this.name );
      $line.html( '<i class="fa fa-crosshairs"></i>&nbsp;' + this.name );

      if ( !noIcons )
      {
         var icons = this.getIcons();
         if ( icons.length )
         {
            var $span = $('<span class="icons"></span>');
            for ( var i = 0; i < icons.length; i++ ) {
               $span.append( SCMAP.Symbol.getTag( icons[i] ) );
            }
            $line.append( $span );
         }
      }

      return $line;
   },

   getIcons: function () {
      var mySymbols = [];
      if ( false && this.name === 'Sol' ) {
         mySymbols.push( SCMAP.Symbols.DANGER );
         mySymbols.push( SCMAP.Symbols.WARNING );
         mySymbols.push( SCMAP.Symbols.HANGAR );
         mySymbols.push( SCMAP.Symbols.INFO );
         mySymbols.push( SCMAP.Symbols.TRADE );
         mySymbols.push( SCMAP.Symbols.BANNED );
         mySymbols.push( SCMAP.Symbols.COMMENTS );
         mySymbols.push( SCMAP.Symbols.BOOKMARK );
         return mySymbols;
      }
      if ( this.faction.isHostileTo( SCMAP.usersFaction() ) ) { mySymbols.push( SCMAP.Symbols.DANGER ); }
      if ( this.hasWarning() ) { mySymbols.push( SCMAP.Symbols.WARNING ); }
      if ( this.hasHangar() ) { mySymbols.push( SCMAP.Symbols.HANGAR ); }
      if ( this.blob.length ) { mySymbols.push( SCMAP.Symbols.INFO ); }
      if ( this.isMajorTradeHub() ) { mySymbols.push( SCMAP.Symbols.TRADE ); }
      if ( this.isOffLimits() ) { mySymbols.push( SCMAP.Symbols.BANNED ); }
      if ( this.hasComments() ) { mySymbols.push( SCMAP.Symbols.COMMENTS ); }
      if ( this.isBookmarked() ) { mySymbols.push( SCMAP.Symbols.BOOKMARK ); }
      return mySymbols;
   },

   displayInfo: function () {
      var worlds = '(No information)';
      var _import = '&mdash;';
      var _export = '&mdash;';
      var blackMarket = '&mdash;';
      var strategicValue = 'Unknown';
      var crimeStatus = 'Unknown';
      var i;
      var tmp = [];
      var $blurb = $('<div class="sc_system_info" '+makeSafeForCSS(this.name)+'"></div>');
      var currentStep = window.map.indexOfCurrentRoute( this );

      $('#systemname')
         .attr( 'class', makeSafeForCSS( this.faction.name ) )
         .css( 'color', this.faction.color.getStyle() )
         .text( 'System: ' + this.name );

      if ( typeof this.nickname === 'string' && this.nickname.length ) {
         $('#systemnickname').text( this.nickname ).show();
      } else {
         $('#systemnickname').text( '' ).hide();
      }

      if ( typeof currentStep === 'number' )
      {
         var currentRoute = window.map.currentRoute();
         var header = [];

         if ( currentStep > 0 ) {
            var $prev = currentRoute[currentStep-1].system.createInfoLink();
            $prev.attr( 'title', 'Previous jump to ' + currentRoute[currentStep-1].system.name +
               ' (' + currentRoute[currentStep-1].system.faction.name + ' territory)' );
            $prev.empty().append( '<i class="left fa fa-fw fa-arrow-left"></i>' );
            header.push( $prev );
         } else {
            header.push( $('<i class="left fa fa-fw"></i>') );
         }

         if ( currentStep < ( currentRoute.length - 1 ) ) {
            var $next = currentRoute[currentStep+1].system.createInfoLink();
            $next.attr( 'title', 'Next jump to ' + currentRoute[currentStep+1].system.name +
               ' (' + currentRoute[currentStep+1].system.faction.name + ' territory)'  );
            $next.empty().append( '<i class="right fa fa-fw fa-arrow-right"></i>' );
            header.push( $next );
         } else {
            header.push( $('<i class="right fa fa-fw"></i>') );
         }

         header.push( this.name );

         $('#systemname').empty().attr( 'class', makeSafeForCSS( this.faction.name ) ).append( header );
      }

      if ( this.planetaryRotation.length ) {
         worlds = this.planetaryRotation.join( ', ' );
      }

      if ( this.import.length ) {
         _import = $.map( this.import, function( elem, i ) {
            return SCMAP.data.goods[ elem ].name;
         }).join( ', ' );
      }

      if ( this.export.length ) {
         _export = $.map( this.export, function( elem, i ) {
            return SCMAP.data.goods[ elem ].name;
         }).join( ', ' );
      }

      if ( this.blackMarket.length ) {
         blackMarket = $.map( this.blackMarket, function( elem, i ) {
            return SCMAP.data.goods[ elem ].name;
         }).join( ', ' );
      }

      //if ( typeof this.planets === 'string' || typeof this.planets === 'number' ) {
      //   planets = this.planets;
      //}

      if ( typeof this.crimeStatus === 'object' ) {
         crimeStatus = this.crimeStatus.name;
      }

      if ( typeof this.ueeStrategicValue === 'object' ) {
         strategicValue = this.ueeStrategicValue.color;
      }

      $("dl.basic-system dd.faction").text( this.faction.name );
      //$("dl.basic-system dd.planets").text( planets );
      $("dl.basic-system dd.rotation").html( worlds );
      $("dl.basic-system dd.import").html( _import );
      $("dl.basic-system dd.export").html( _export );
      $("dl.basic-system dd.blackMarket").html( blackMarket );
      $("dl.basic-system dt.crime").addClass( 'crime_'+crimeStatus.toLowerCase() );
      $("dl.basic-system dd.crime").text( crimeStatus );
      $("dl.basic-system dt.strategic").addClass( 'strategic_value_'+strategicValue.toLowerCase() );
      $("dl.basic-system dd.strategic").text( strategicValue );

      if ( this.faction.name !== 'Unclaimed' ) {
         $('dl.basic-system dd.faction').css( 'color', this.faction.color.getStyle() );
      }

      // User's notes and bookmarks

      $('#hangar-location').prop( 'checked', this.hasHangar() ).attr( 'data-system', this.id );
      $('#bookmark').prop( 'checked', this.isBookmarked() ).attr( 'data-system', this.id );

      if ( storage && storage['comments.'+this.id] ) {
         $('#comments').empty().val( storage['comments.'+this.id] );
         var $commentmd = $( markdown.toHTML( storage['comments.'+this.id] ) );
         $('#comments-md').html( $commentmd );
      } else {
         $('#comments').empty().val('');
         $('#comments-md').empty();
      }

      $('#comments').data( 'system', this.id );
      $('#bookmark').data( 'system', this.id );
      $('#hangar-location').data( 'system', this.id );

      if ( this.blob.length ) {
         var $md = $(markdown.toHTML( this.blob ));
         $md.find('p').prepend('<i class="fa fa-2x fa-quote-left"></i>');
         $blurb.append( '<div id="systemInfo">', $md, '</div>' );
         $('#system-background-info').show();
      } else {
         $('#system-background-info').hide();
      }

      if ( this.source ) {
         $blurb.append( '<p><a class="system-source-url" href="' + this.source + '" target="_blank">(source)</a></p>' );
      }

      $('#systemblurb').empty();
      $('#systemblurb').append( $blurb );

      $('#map_ui #system-selected').show();
      $('#map_ui #system-not-selected').hide();
      $('#map_ui').tabs( 'option', 'active', 2 );
      $('#map_ui').data( 'jsp' ).reinitialise();
      $('#map_ui').data( 'jsp' ).scrollToPercentY( 0 );
   },

   // 2d/3d tween callback
   scaleY: function ( scalar ) {
      var wantedY = this.system.position.y * ( scalar / 100 );
      this.system.sceneObject.translateY( wantedY - this.system.sceneObject.position.y );
      for ( var j = 0; j < this.system._routeObjects.length; j++ ) {
         this.system._routeObjects[j].geometry.verticesNeedUpdate = true;
      }
   },

   moveTo: function ( vector ) {
      this.sceneObject.position.copy( vector );
      for ( var j = 0; j < this._routeObjects.length; j++ ) {
         this._routeObjects[j].geometry.verticesNeedUpdate = true;
      }
   },

   translateVector: function ( vector ) {
      this.sceneObject.add( vector );
      for ( var j = 0; j < this._routeObjects.length; j++ ) {
         this._routeObjects[j].geometry.verticesNeedUpdate = true;
      }
   },

   // Returns the jumppoint leading to the given destination
   jumpPointTo: function ( destination ) {
      for ( var i = 0; i < this.jumpPoints.length; i++ ) {
         if ( this.jumpPoints[i].destination === destination ) {
            return this.jumpPoints[i];
         }
      }
   },

   isBookmarked: function ( ) {
      return storage && storage[ 'bookmarks.' + this.id ] === '1';
   },

   hasHangar: function ( ) {
      return storage && storage[ 'hangarLocation.' + this.id ] === '1';
   },

   hasComments: function ( ) {
      return storage && storage[ 'comments.' + this.id ];
   },

   isOffLimits: function ( ) {
      // TODO this needs to come from the DB
      return ( this.id === 90 || this.id === 97 );
   },

   hasWarning: function ( ) {
      // TODO this needs to come from the DB
      return ( this.id === 81 || this.id === 94 );
   },

   isMajorTradeHub: function ( ) {
      // TODO this needs to come from the DB
      return ( this.id === 82 || this.id === 95 || this.id === 80 || this.id === 102 || this.id === 100 || this.id === 108 || this.id === 96 || this.id === 85 || this.id === 83 || this.id === 106 || this.id === 15 || this.id === 84 || this.id === 88 || this.id === 19 || this.id === 92 );
   },

   getValue: function ( key ) {
      if ( key === undefined ) {
         return;
      }
      var value = this[ key ];
      return value;
   },

   setValues: function ( values ) {
      var key, currentValue, newValue, jumpPoint;

      if ( values === undefined ) {
         return;
      }

      for ( key in values ) {
         newValue = values[ key ];
         if ( newValue === undefined ) {
            console.log( 'SCMAP.System: "' + key + '" parameter is undefined for "'+this.name+'"' );
            continue;
         }

         if ( key in this )
         {
            currentValue = this[ key ];

            if ( key == 'size' ) {
               switch ( newValue ) {
                  case 'dwarf': this.scale = 0.6; break;
                  case 'medium': this.scale = 1.0; break;
                  case 'large': this.scale = 1.25; break;
                  case 'giant': this.scale = 1.6; break;
                  case 'binary': this.scale = 1.6; this.binary = true; break;
               }
               this[ key ] = newValue;
            }

            if ( currentValue instanceof THREE.Color ) {

               if ( newValue instanceof THREE.Color ) {
                  this[ key ] = newValue;
               } else {
                  newValue = newValue.replace( '0x', '#' );
                  this[ key ] = new THREE.Color( newValue );
               }

            } else if ( currentValue instanceof SCMAP.Faction ) {

               this[ key ] = newValue.claim( this );

            } else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {

               currentValue.copy( newValue );

            } else if ( currentValue instanceof THREE.Vector3 ) {

               if ( newValue instanceof THREE.Vector3 ) {
                  currentValue.copy( newValue );
               } else if ( newValue instanceof Array ) {
                  currentValue.fromArray( newValue );
               }

            } else {

               this[ key ] = newValue;

            }
         }
      }
   }
};

SCMAP.System.preprocessSystems = function () {
   var i, systemName, system, data, faction;

   SCMAP.data.systemsById = {};
   SCMAP.System.List = [];

   for ( systemName in SCMAP.data.systems ) {

      data = SCMAP.data.systems[ systemName ];
      if ( data instanceof SCMAP.System ) {
         SCMAP.data.systemsById[ system.id ]   = data;
         SCMAP.data.systemsById[ system.uuid ] = data;
         continue;
      }

      faction = SCMAP.Faction.getById( data.faction_id );

      system = new SCMAP.System({
         id: data.system_id,
         uuid: data.uuid,
         name: systemName,
         position: data.coords,
         scale: data.scale || 1.0,
         starColor: data.color,
         faction: faction
      });

      system.setValues({
         'nickname': data.nickname,
         'size': data.size,
         'source': data.source,
         'crimeStatus': SCMAP.data.crime_levels[ data.crime_level_id ],
         'ueeStrategicValue': SCMAP.data.uee_strategic_values[ ""+data.uee_strategic_value_id ],
         'import': data.import,
         'export': data.export,
         'blackMarket': data.black_market,
         'blob': data.blob,
         'planets': 0,
         'planetaryRotation': [],
         'jumpPoints': data.jumppoints
      });

      SCMAP.data.systems[ system.name ]     = system;
      SCMAP.data.systemsById[ system.id ]   = system;
      SCMAP.data.systemsById[ system.uuid ] = system;

   }

   for ( systemName in SCMAP.data.systems )
   {

      system = SCMAP.System.getByName( systemName );

      SCMAP.System.List.push( system );

      for ( i = 0; i < system.jumpPoints.length; i++ )
      {
         jumpPoint = system.jumpPoints[ i ];
         system.jumpPoints[ i ] = new SCMAP.JumpPoint({
            source: system,
            destination: SCMAP.System.getById( jumpPoint.destination ),
            name: jumpPoint.name,
            typeId: jumpPoint.type_id,
            entryAU: jumpPoint.coords_au
         });
      }

   }
};

SCMAP.System.List = [];

SCMAP.System.SortedList = function() {
   var array = [];
   var i = SCMAP.System.List.length;
   while( i-- ) {
      array[i] = SCMAP.System.List[i];
   }
   var sorted = array.sort( humanSort );
   return sorted;
};

SCMAP.System.getByName = function ( name ) {
   return SCMAP.data.systems[ name ];
};

SCMAP.System.getById = function ( id ) {
   return SCMAP.data.systemsById[ id ];
};

SCMAP.Color = {};
SCMAP.Color.BLACK = new THREE.Color( 'black' );
SCMAP.Color.UNSET = new THREE.Color( 0x80A0CC );

SCMAP.System.COLORS = {
   RED: 0xFF6060,
   BLUE: 0x6060FF,
   WHITE: 0xFFFFFF,
   YELLOW: 0xFFFF60,
   ORANGE: 0xF0F080,
   UNKNOWN: 0xFFFFFF //0xC0FFC0
};
SCMAP.System.LABEL_SCALE = 0.06;
SCMAP.System.GLOW_SCALE = 6.5;

SCMAP.System.CUBE = new THREE.CubeGeometry( 1, 1, 1 );
//SCMAP.System.MESH = new THREE.SphereGeometry( 1, 12, 12 );

SCMAP.System.LODMESH = [
   [ new THREE.IcosahedronGeometry( 1, 3 ), 20 ],
   [ new THREE.IcosahedronGeometry( 1, 2 ), 50 ],
   [ new THREE.IcosahedronGeometry( 1, 1 ), 150 ]
];

//
//SCMAP.System.STAR_MATERIAL_RED = new THREE.MeshBasicMaterial({ color: SCMAP.System.COLORS.RED, name: 'STAR_MATERIAL_RED' });
//SCMAP.System.STAR_MATERIAL_BLUE = new THREE.MeshBasicMaterial({ color: SCMAP.System.COLORS.BLUE, name: 'STAR_MATERIAL_BLUE' });
SCMAP.System.STAR_MATERIAL_WHITE = new THREE.MeshBasicMaterial({ color: SCMAP.System.COLORS.WHITE, name: 'STAR_MATERIAL_WHITE' });
//SCMAP.System.STAR_MATERIAL_YELLOW = new THREE.MeshBasicMaterial({ color: SCMAP.System.COLORS.YELLOW, name: 'STAR_MATERIAL_YELLOW' });
//SCMAP.System.STAR_MATERIAL_ORANGE = new THREE.MeshBasicMaterial({ color: SCMAP.System.COLORS.ORANGE, name: 'STAR_MATERIAL_ORANGE' });
//SCMAP.System.STAR_MATERIAL_UNKNOWN = new THREE.MeshBasicMaterial({ color: SCMAP.System.COLORS.UNKNOWN, name: 'STAR_MATERIAL_UNKNOWN' });
//
SCMAP.System.CUBE_MATERIAL = new THREE.MeshBasicMaterial({ color: 0xFFFFFF, transparent: true, opacity: 0 });
SCMAP.System.CUBE_MATERIAL.opacity = 0.3;
SCMAP.System.CUBE_MATERIAL.transparent = true;
//
SCMAP.System.GLOW_MAP = new THREE.ImageUtils.loadTexture( $('#gl-info').data('glow-image') );
//SCMAP.System.GLOW_MATERIAL_RED =     new THREE.SpriteMaterial({ map: SCMAP.System.GLOW_MAP, blending: THREE.AdditiveBlending, color: SCMAP.System.COLORS.RED     });
//SCMAP.System.GLOW_MATERIAL_BLUE =    new THREE.SpriteMaterial({ map: SCMAP.System.GLOW_MAP, blending: THREE.AdditiveBlending, color: SCMAP.System.COLORS.BLUE    });
//SCMAP.System.GLOW_MATERIAL_WHITE =   new THREE.SpriteMaterial({ map: SCMAP.System.GLOW_MAP, blending: THREE.AdditiveBlending, color: SCMAP.System.COLORS.WHITE   });
//SCMAP.System.GLOW_MATERIAL_YELLOW =  new THREE.SpriteMaterial({ map: SCMAP.System.GLOW_MAP, blending: THREE.AdditiveBlending, color: SCMAP.System.COLORS.YELLOW  });
//SCMAP.System.GLOW_MATERIAL_ORANGE =  new THREE.SpriteMaterial({ map: SCMAP.System.GLOW_MAP, blending: THREE.AdditiveBlending, color: SCMAP.System.COLORS.ORANGE  });
//SCMAP.System.GLOW_MATERIAL_UNKNOWN = new THREE.SpriteMaterial({ map: SCMAP.System.GLOW_MAP, blending: THREE.AdditiveBlending, color: SCMAP.System.COLORS.UNKNOWN });
// EOF

/**
* @author Lianna Eeftinck / https://github.com/Leeft
*/

SCMAP.Dijkstra = function ( systems ) {
   if ( ! ( typeof systems === 'object' && Array.isArray( systems ) ) ) {
      console.error( "No array specified to SCMAP.Dijkstra constructor!" );
      return;
   }

   // First build a list of all nodes in the graph and
   // map them by system.id so they can be found quickly
   this._nodes = [];
   this._mapping = {}; // system.id to _nodes map
   i = systems.length;
   while( i-- ) {
      this._nodes[ i ] = {
         system:   systems[i],
         distance: Number.POSITIVE_INFINITY,
         previous: null
      };
      this._mapping[ systems[i].id ] = this._nodes[ i ];
   }

   this._result = {};
};

SCMAP.Dijkstra.prototype = {
   constructor: SCMAP.Dijkstra,

   buildGraph: function( parameters ) {
      var nodes, i, distance, system, currentNode, jumpPoint,
         otherNode, endTime, startTime = new Date();

      if ( typeof parameters !== "object" ) { throw "No parameters object given"; }
      if ( !parameters.source instanceof SCMAP.System ) { throw "No source given"; }
      if ( parameters.destination !== undefined && !parameters.destination instanceof SCMAP.System ) { throw "Invalid destination given"; }

      // This model allows for two priorities, time or fuel ... can't think
      // of any others which make sense (distance is really irrelevant for
      // gameplay purposes).
      // There will be other parameters to work out the route as well, but
      // this decides the main "cost" algorithm for the graph.
      if ( typeof priority !== 'string' || priority !== 'fuel' ) {
         priority = 'time';
      }

      if ( !( parameters.source instanceof SCMAP.System ) ) { return; }

      // TODO: expiry, map may have changed
      if ( this._result.source instanceof SCMAP.System && this._result.source === parameters.source && this._result.priority === priority ) {
         console.log( 'Reusing generated graph starting at', parameters.source.name );
         if ( parameters.destination instanceof SCMAP.System ) {
            this._result.destination = parameters.destination;
         }
         return;
      }

      if ( parameters.destination instanceof SCMAP.System ) {
         console.log( 'Building graph, starting at', parameters.source.name, 'and ending at', parameters.destination.name );
      } else {
         console.log( 'Building graph, starting at', parameters.source.name );
      }

      this.destroyGraph();
      this._result.source = parameters.source;
      this._result.destination = parameters.destination;

      // Created using http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm#Pseudocode

      for ( i = 0; i < this._nodes.length; i++ ) {
         this._nodes[ i ].distance = Number.POSITIVE_INFINITY;
         this._nodes[ i ].previous = null;
      }

      currentNode = this._mapping[ parameters.source.id ];
      currentNode.distance = 0; // distance from source to source
      currentNode.previous = null;

      nodes = SCMAP.Dijkstra.quickSort( this._nodes );

var distAU;

      while ( nodes.length )
      {
         currentNode = nodes[0];
         // Remove currentNode (the first node) from set
         nodes.splice( 0, 1 );
         //delete this._mapping[ currentNode.system.id ];

         // Don't bother with this node if it's not reachable
         if ( isInfinite( currentNode.distance ) ) {
            break;
         }

//console.log( "Working on node", currentNode.system.name, ', ', currentNode.system.jumpPoints.length, 'jumppoints to test' );

         for ( i = 0; i < currentNode.system.jumpPoints.length; i++ )
         {
            jumpPoint = currentNode.system.jumpPoints[i];
            otherNode = this._mapping[ jumpPoint.destination.id ];

            if ( jumpPoint.isUnconfirmed() && storage && storage['route.avoidUnknownJumppoints'] === '1' ) {
               continue;
            }

            // Don't go into "hostile" nodes, unless we already are in one
            if ( storage && storage['route.avoidHostile'] === '1' && !currentNode.system.faction.isHostileTo( SCMAP.usersFaction() ) && otherNode.system.faction.isHostileTo( SCMAP.usersFaction() ) ) {
               continue;
            }
            if ( storage && storage['route.avoidOffLimits'] === '1' && currentNode.system.isOffLimits() ) {
               continue;
            }

//console.log( "  JP to", otherNode.system.name );

            if ( priority === 'time' )
            {
               // cost = half time to JP + JP time + half time from JP
               // TODO: at start and end this can be from start and to dest rather than half
               //distance = currentNode.distance + jumpPoint.length();
               distance = currentNode.distance + jumpPoint.jumpTime();
               if ( currentNode.previous === null ) {
distance += SCMAP.travelTimeAU( 0.35 ); // FIXME
                  //distance += SCMAP.travelTimeAU( jumpPoint.entryAU.length() ); // FIXME
                  //console.log( '    Flight time to JP entrance is', SCMAP.travelTimeAU( distAU ), 's' );
               }
               else
               {
//                  distance += SCMAP.travelTimeAU( currentNode.previous.system.jumpPointTo( currentNode.system ).entryAU.length() );
                  distance += SCMAP.travelTimeAU( 0.7 );
                  //distAU = currentNode.previous.system.jumpPointTo( currentNode.system ).entryAU.length();
                  //console.log( '    AU from', currentNode.previous.system.name, 'to', currentNode.system.name, 'is', distAU.toFixed(2) );
                  //console.log( "would add", SCMAP.travelTimeAU( currentNode.previous.system.jumpPointTo( currentNode.system ).entryAU.length() ).toFixed( 1 ) );
               }
            }
            else // priority == 'fuel'
            {
               // cost = half fuel to JP +         + half fuel from JP
               // TODO: at start and end this can be from start and to dest rather than half
               distance = currentNode.distance + jumpPoint.length();
            }

            // Get out of "never" nodes asap by increasing the cost massively
            if ( storage && storage['route.avoidHostile'] === '1' && otherNode.system.faction.isHostileTo( SCMAP.usersFaction() ) ) {
               distance *= 15;
            }

            if ( distance < otherNode.distance ) {
               otherNode.distance = distance;
               otherNode.previous = currentNode;
               nodes = SCMAP.Dijkstra.quickSort( nodes );
            }
         }
      }

      this._result.nodes = nodes;
      this._result.priority = priority;
      endTime = new Date();
      console.log( 'Graph building took ' + (endTime.getTime() - startTime.getTime()) + ' msec' );
   },

   source: function() {
      var source = this._result.source;
      if ( source instanceof SCMAP.System ) {
         return source;
      }
   },

   destination: function() {
      var destination = this._result.destination;
      if ( destination instanceof SCMAP.System ) {
         return destination;
      }
   },

   rebuildGraph: function() {
      var source = this._result.source;
      var destination = this._result.destination;

      //console.log( "rebuildGraph from", source, 'to', destination );
      this.destroyGraph();

      if ( source instanceof SCMAP.System ) {
         this.buildGraph({
            source: source,
            destination: destination,
         });
         return true;
      }
   },

   destroyGraph: function() {
      this._result = {};
   },

   routeArray: function( destination ) {
      if ( ! ( destination instanceof SCMAP.System ) ) {
         console.error( 'No or invalid destination specified.' );
         return;
      }

      if ( this._result.nodes.length > 0 ) {
         // Get path and print it out, we're traversing backwards
         // through the optimal path for the destination
         var visited = [];
         var x = this._mapping[ destination.id ];
         var seen = {};
         while ( x !== null ) {
            seen[ x.system.name ] = true;
            visited.push( x );
            x = x.previous;
         }
         visited.reverse();
         return visited;
      }
   },

   constructRouteObject: function( from, to, callback ) {
      var routeArray, i, object;

      if ( !( from instanceof SCMAP.System ) || !( to instanceof SCMAP.System ) ) {
         return;
      }

      if ( typeof callback !== 'function' ) {
         console.error( "Callback not given or not a function" );
         return;
      }

      this.buildGraph({
         source: from,
         destination: to,
      });

      routeArray = this.routeArray( to );
      if ( typeof routeArray === 'object' && Array.isArray( routeArray ) ) {

         object = new THREE.Object3D();
         for ( i = 0; i < routeArray.length - 1; i++ ) {
            object.add( callback( routeArray[i+0].system, routeArray[i+1].system ) );
         }
         return object;

      }
   }
};

SCMAP.Dijkstra.quickSort = function ( nodes ) {
   // makes a copy, prevents overwriting
   var array = [];
   var i = nodes.length;
   while( i-- ) {
      array[i] = nodes[i];
   }

   if ( array.length <= 1 ) {
      return array;
   }

   var lhs = [];
   var rhs = [];
   var pivot = Math.ceil( array.length / 2 ) - 1;

   pivot = array.splice( pivot, 1 )[0];

   for ( i = 0; i < array.length; i++ ) {
      if ( array[i].distance <= pivot.distance ) {
         lhs.push( array[i] );
      } else {
         rhs.push( array[i] );
      }
   }

   var t1 = SCMAP.Dijkstra.quickSort( lhs );
   var t2 = SCMAP.Dijkstra.quickSort( rhs );

   t1.push( pivot );
   return t1.concat( t2 );
};

function isInfinite ( num ) {
   return !isFinite( num );
}

// End of file


/**
* @author Lianna Eeftinck / https://github.com/Leeft
*/

SCMAP.Map = function ( scene ) {
   this.name = "Star Citizen 'Verse";
   this.scene = scene;
   this.goods = {};

   this._selected = undefined;
   this._destination = undefined;
   this.group = undefined;
   this._interactables = [];
   this.referencePlane = undefined;

   this._selectorObject = this.createSelectorObject();
   this.scene.add( this._selectorObject );

   // No editing available for the moment (doesn't work yet)
   this.canEdit = false;
   $('#map_ui li.editor').hide();

   this.preprocessScene();
   this._graph = new SCMAP.Dijkstra( SCMAP.System.List );
   this._routeObject = undefined;
};

SCMAP.Map.prototype = {
   constructor: SCMAP.Map,

   createSelectorObject: function () {
      var mesh = new THREE.Mesh( SCMAP.SelectedSystemGeometry, new THREE.MeshBasicMaterial({
         color: 0xCCCCCC,
         transparent: true,
         blending: THREE.AdditiveBlending
      }) );
      mesh.scale.set( 4.2, 4.2, 4.2 );
      mesh.visible = false;
      mesh.systemPosition = new THREE.Vector3( 0, 0, 0 );
      // 2d/3d tween callback
      mesh.scaleY = function ( scalar ) {
         var wantedY = this.systemPosition.y * ( scalar / 100 );
         this.translateY( wantedY - this.position.y );
      };
      return mesh;
   },
   updateSelectorObject: function ( system ) {
      if ( system instanceof SCMAP.System ) {
         this._selectorObject.visible = true;
         this._selectorObject.systemPosition.copy( system.position );
         //this._selectorObject.position.copy( system.sceneObject.position );
         this.moveSelectorTo( system );
         this._selected = system;
      } else {
         this._selectorObject.visible = false;
         this._selected = undefined;
      }
   },

   system: function ( name ) {
      return SCMAP.System.getByName( name );
   },

   selected: function () {
      return this._selected;
   },

   interactables: function () {
      return this._interactables;
   },

   deselect: function ( ) {
      this._selectorObject.visible = false;
      this._selected = undefined;
      $('#system-selected').hide();
      $('#system-not-selected').show();
   },

   animateSelector: function ( ) {
      if ( this._selectorObject.visible ) {
         this._selectorObject.rotation.y = THREE.Math.degToRad( Date.now() * 0.00025 ) * 200;
      }
   },

   updateSystems: function ( ) {
      for ( var i = 0; i < SCMAP.System.List.length; i++ ) {
         SCMAP.System.List[i].updateSceneObject( this.scene );
      }
   },

   setAllLabelSizes: function ( vector ) {
      for ( var i = 0; i < SCMAP.System.List.length; i++ ) {
         var system = SCMAP.System.List[i];
         SCMAP.System.List[i].setLabelScale( vector );
      }
   },

   moveSelectorTo: function ( system ) {
      var tween, newPosition, position, _this = this, poi;

      if ( !(_this._selectorObject.visible) || !(_this._selected instanceof SCMAP.System) ) {
         _this._selectorObject.systemPosition.copy( system.position );
         _this._selectorObject.position.copy( system.sceneObject.position );
         _this._selectorObject.visible = true;
         _this._selected = system;
         return;
      }

      newPosition = system.sceneObject.position.clone();
      var graph = new SCMAP.Dijkstra( SCMAP.System.List );
      graph.buildGraph({
         source: _this._selected,
         destination: system
      });
      var route = graph.routeArray( system );

      if ( route.length <= 1 ) {
         _this._selectorObject.systemPosition.copy( system.position );
         _this._selectorObject.position.copy( system.sceneObject.position );
         _this._selectorObject.visible = true;
         _this._selected = system;
         return;
      }

      _this._selectorObject.position.copy( _this._selectorObject.position );

      position = {
         x: _this._selectorObject.position.x,
         y: _this._selectorObject.position.y,
         z: _this._selectorObject.position.z
      };

      var tweens = [];

      /* jshint ignore:start */
      for ( i = 0; i < route.length - 1; i++ ) {
         poi = route[ i + 1 ].system;

         tween = new TWEEN.Tween( position )
            .to( {
               x: poi.sceneObject.position.x,
               y: poi.sceneObject.position.y,
               z: poi.sceneObject.position.z
            }, 800 / ( route.length - 1 ) )
            .easing( TWEEN.Easing.Linear.None )
            .onUpdate( function () {
               _this._selectorObject.position.setX( this.x );
               _this._selectorObject.position.setY( this.y );
               _this._selectorObject.position.setZ( this.z );
            } );

         if ( i == 0 ) {
            if ( route.length == 2 ) {
               tween.easing( TWEEN.Easing.Cubic.InOut );
            } else {
               tween.easing( TWEEN.Easing.Cubic.In );
            }
         }

         if ( i > 0 ) {
            tweens[ i - 1 ].chain( tween );
         }

         if ( i == route.length - 2 ) {
            tween.easing( TWEEN.Easing.Cubic.Out );
            tween.onComplete( function() {
               _this._selectorObject.systemPosition.copy( poi.position );
               _this._selectorObject.position.copy( poi.sceneObject.position );
               _this._selected = system;
            } );
         }

         tweens.push( tween );
      }
      /* jshint ignore:end */

      tweens[0].start();

   },

   // TODO: move to control class
   handleSelection: function ( event, intersect ) {

      if ( typeof intersect !== 'object' ) {
         return;
      }

      var modifierPressed = ( event.shiftKey || event.ctrlKey ) ? true : false;

      if ( event.type === 'mousedown' )
      {
         //if ( window.editor.enabled )
         //{
         //   if ( ! event.altKey && typeof intersect.object.parent.system === 'object' ) {

         //      // if in edit mode, and the targeted object is already selected, start dragging
         //      // otherwise, select it
         //      if ( this._selected instanceof SCMAP.System &&
         //           intersect.object.parent.system instanceof SCMAP.System &&
         //           this._selected == intersect.object.parent.system
         //      ) {
         //         window.controls.editDrag = true;
         //      } else {
         //         this.updateSelectorObject( intersect.object.parent.system );
         //         window.controls.editDrag = false;
         //      }
         //   }
         //}
         //else
         {
            if ( modifierPressed ) {
               this._destination = intersect.object.parent.system;
            } else {
               this.moveSelectorTo( intersect.object.parent.system );
            }
         }
      }
      else if ( event.type === 'mouseup' )
      {
         if ( ! window.editor.enabled )
         {
            if ( ! modifierPressed )
            {
               if ( this._selected instanceof SCMAP.System && intersect.object.parent.system instanceof SCMAP.System ) {
                  if ( intersect.object.parent.system === this._selected ) {
                     //if ( $('#systemname').text() != intersect.object.parent.system.name ) {
                        this.updateSelectorObject( intersect.object.parent.system );
                        intersect.object.parent.system.displayInfo();
                     //}
                  }
               }
            }
            else
            {
               this.updateRoute( intersect.object.parent.system );
            }
         }
      }
   },

   currentRoute: function () {
      if ( this._destination instanceof SCMAP.System ) {
         return this._graph.routeArray( this._destination );
      }
      return [];
   },

   // TODO: separate Route class
   indexOfCurrentRoute: function ( system ) {
      if ( ! system instanceof SCMAP.System ) {
         return;
      }

      var currentStep;
      var currentRoute = this.currentRoute();

      if ( currentRoute.length ) {
         for ( i = 0; i < currentRoute.length; i++ ) {
            if ( currentRoute[i].system === system ) {
               currentStep = i;
               break;
            }
         }
      }

      return currentStep;
   },

   rebuildCurrentRoute: function () {
      var source, destination;
      if ( this._routeObject ) {
         scene.remove( this._routeObject );
      }
      $('#routelist').empty();
      if ( this._graph.rebuildGraph() ) {
         console.log( "have new graph" );
         destination = this._graph.destination();
         if ( destination ) {
         console.log( "have existing destination, updating route" );
            this.updateRoute( destination );
         }
      }
   },

   destroyCurrentRoute: function () {
      if ( this._routeObject ) {
         scene.remove( this._routeObject );
      }
      $('#routelist').empty();
   },

   updateRoute: function ( destination ) {
      var _this = this, i, route, material, system, $entry;

      material = new THREE.MeshBasicMaterial( { color: 0xDD3322 } );
      material.opacity = 0.8;
      material.transparent = true;
      //material.blending = THREE.AdditiveBlending;

      this.destroyCurrentRoute();

      // building all the parts of the route together in a single geometry group
      // the constructRouteObject method will iterate for us here with the callback
      this._routeObject = _this._graph.constructRouteObject( _this._selected, destination, function ( from, to ) {
         var mesh = _this.createRouteMesh( from, to );
         var line = new THREE.Mesh( mesh, material );
         line.position = from.sceneObject.position.clone();
         line.lookAt( to.sceneObject.position );
         return line;
      });
      if ( this._routeObject ) {
         this.scene.add( this._routeObject );
         this._destination = destination;
         route = this._graph.routeArray( destination );
         $('#routelist').empty();
         if ( route.length > 1 )
         {
            $('#routelist').append('<p>The shortest route from '+route[0].system.createInfoLink( true ).outerHtml()+' to ' +
               route[route.length-1].system.createInfoLink( true ).outerHtml()+' along <strong>' + (route.length - 1) +
               '</strong> jump points:</p>').append( '<ol class="routelist"></ol>' );

            for ( i = 0; i < route.length; i++ ) {
               system = route[i+0].system;
               $entry = $('<li></li>').append( system.createInfoLink() );
               $('#routelist ol').append( $entry );
            }
         }
         else
         {
            $('#routelist').append('<p class="impossible">No route available to '+
               route[0].system.createInfoLink( true ).outerHtml()+' with your current settings</p>');
         }

         $('#map_ui').tabs( 'option', 'active', 3 );
      }
   },

   createRouteMesh: function ( source, destination ) {
      var step = 2 * Math.PI / 16,
          zstep = 0.5,
          radius = 0.5,
          geometry, // = new THREE.Geometry(),
          distance = source.sceneObject.position.distanceTo( destination.sceneObject.position ),
          z = 0, theta, x, y;

      geometry = new THREE.CylinderGeometry( 0.6, 0.6, distance, 8, 1, true );
      geometry.applyMatrix( new THREE.Matrix4().makeTranslation( 0, distance / 2, 0 ) );
      geometry.applyMatrix( new THREE.Matrix4().makeRotationX( THREE.Math.degToRad( 90 ) ) );

      //for ( theta = 0; z < distance; theta += step )
      //{
      //   x = radius * Math.cos( theta );
      //   y = 0 - radius * Math.sin( theta );
      //   geometry.vertices.push( new THREE.Vector3( x, y, z ) );
      //   z += zstep;
      //}
      return geometry;
   },

   createRouteMeshTwirl: function ( source, destination ) {
      var step = 2 * Math.PI / 16,
          zstep = 0.5,
          radius = 0.5,
          geometry = new THREE.Geometry(),
          distance = source.sceneObject.position.distanceTo( destination.sceneObject.position ),
          z = 0, theta, x, y;

      for ( theta = 0; z < distance; theta += step )
      {
         x = radius * Math.cos( theta );
         y = 0 - radius * Math.sin( theta );
         geometry.vertices.push( new THREE.Vector3( x, y, z ) );
         z += zstep;
      }
      return geometry;
   },

   preprocessScene: function () {
      SCMAP.Faction.preprocessFactions();
      SCMAP.Goods.preprocessGoods();
      SCMAP.System.preprocessSystems();
   },

   populateScene: function () {
      var territory, territoryName, routeMaterial, system, systemName,
         source, destinations, destination, geometry,
         data, jumpPoint, jumpPointObject, faction, systemObject,
         endTime, startTime, systemCount = 0, good,
         i, systems, exports, black_markets, systemInfo, imports;

      endTime = startTime = new Date();

      // TODO: clean up the existing scene and map data when populating with
      // new data

      // First we go through the data to build the basic systems so
      // the routes can be built as well

      for ( systemName in SCMAP.data.systems )
      {

         system = SCMAP.System.getByName( systemName );
         sceneObject = system.buildSceneObject();
         this.scene.add( sceneObject );
         this._interactables.push( sceneObject.children[0] );
         //this._interactables.push( sceneObject.children[1] ); // Glow too big for now, disabled
         //this._interactables.push( sceneObject.children[2] ); // Even a properly sized label is too big :(

         systemCount++;

      }

      // Then we go through again and add the routes

      for ( systemName in SCMAP.data.systems )
      {

         system = SCMAP.System.getByName( systemName );

         for ( i = 0; i < system.jumpPoints.length; i ++ ) {

            jumpPoint = system.jumpPoints[ i ];
            jumpPointObject = jumpPoint.buildSceneObject();
            if ( jumpPointObject instanceof THREE.Object3D ) {
               system._routeObjects.push( jumpPointObject );
               this.scene.add( jumpPointObject );
            }

         }

      }

      endTime = new Date();
      console.log( "Populating the scene (without ref plane) took " +
         (endTime.getTime() - startTime.getTime()) + " msec" );

      $('#debug-systems').html( systemCount + ' systems loaded' );

      this.buildReferencePlane();
      //this.referencePlaneSolidColor( new THREE.Color( 0x000000 ) );
      //this.referencePlaneTerritoryColor();
   },

   closestPOI: function ( vector ) {
      var closest = Infinity, closestPOI, system, length, systemname, xd, zd;

      for ( systemname in SCMAP.data.systems ) {
         system = SCMAP.System.getByName( systemname );
         xd = vector.x - system.position.x;
         zd = vector.z - system.position.z;
         length = Math.sqrt( xd * xd + zd * zd );
         if ( length < closest ) {
            closest = length;
            closestPOI = system;
         }
      }

      return [ closest, closestPOI ];
   },

   closestFromArray: function ( vector, systems ) {
      var closest = Infinity, closestPOI, system, length, systemname, xd, zd;

      for ( var i = 0; i < systems.length; i++ ) {
         system = systems[i];
         xd = vector.x - system.position.x;
         zd = vector.z - system.position.z;
         length = Math.sqrt( xd * xd + zd * zd );
         if ( length < closest ) {
            closest = length;
            closestPOI = system;
         }
      }

      return [ closest, closestPOI ];
   },

   withinApproxDistance: function ( vector, distance ) {
      var systems = [];
      for ( var systemname in SCMAP.data.systems ) {
         system = SCMAP.System.getByName( systemname );
         if ( system.position.x < ( vector.x - distance ) ) { continue; }
         if ( system.position.x > ( vector.x + distance ) ) { continue; }
         if ( system.position.z < ( vector.z - distance ) ) { continue; }
         if ( system.position.z > ( vector.z + distance ) ) { continue; }
         systems.push( system );
      }
      return systems;
   },

   furthestPOI: function ( vector ) {
      var furthest = 0, furthestPOI, system, length, systemname, xd, zd;

      for ( systemname in SCMAP.data.systems ) {
         system = SCMAP.System.getByName[ systemname ];
         xd = vector.x - system.position.x;
         zd = vector.z - system.position.z;
         length = Math.sqrt( xd * xd + zd * zd );
         if ( length > furthest ) {
            furthest = length;
            furthestPOI = system;
         }
      }
      return [ furthest, furthestPOI ];
   },

   referencePlaneTerritoryColor: function() {
      if ( ! this.referencePlane instanceof THREE.Object3D ) {
         return;
      }

      var geometry = this.referencePlane.geometry,
         minDistance = 55;

      for ( var i = 0; i < geometry.vertices.length; i++ )
      {
         var point = geometry.vertices[ i ];
         var arr = this.closestPOI( point );
         var distance = arr[0],
             closest = arr[1];
         if ( distance > minDistance ) { distance = minDistance; }
         var strength = ( minDistance - distance ) / minDistance;
         var color = closest.faction.planeColor.clone();
         color.multiplyScalar( strength * 0.8 );
         geometry.colors[i] = color;

         //var color = closest.faction.color.clone();
         //   var strength = ( minDistance - distance ) / minDistance;
         //   color.multiplyScalar( strength * 1.2 );
         //   geometry.colors[i] = color;
      }
   },

   referencePlaneSolidColor: function( color ) {
      var geometry = this.referencePlane.geometry,
         i, point;
      if ( ! this.referencePlane instanceof THREE.Object3D ) {
         return;
      }
      for ( i = 0; i < geometry.vertices.length; i++ ) {
         point = geometry.vertices[ i ];
         geometry.colors[i] = color;
      }
   },

   pointAtPlane: function( theta, radius, y ) {
      return new THREE.Vector3( radius * Math.cos( theta ), y, -radius * Math.sin( theta ) );
   },

   referencePlaneTerritoryColourMesh: function( material, prevTheta, nextTheta, innerRadius, outerRadius )
   {
      var geo, mesh;
      geo = new THREE.Geometry();
      geo.vertices.push( this.pointAtPlane( prevTheta, innerRadius, -0.04 ) );
      geo.vertices.push( this.pointAtPlane( nextTheta, innerRadius, -0.04 ) );
      geo.vertices.push( this.pointAtPlane( nextTheta, outerRadius, -0.04 ) );
      geo.vertices.push( this.pointAtPlane( prevTheta, outerRadius, -0.04 ) );
      geo.faces.push( new THREE.Face3( 2, 1, 0 ) );
      geo.faces.push( new THREE.Face3( 3, 2, 0 ) );
      mesh = new THREE.Mesh( geo, material );
      return mesh;
   },

   buildReferencePlane: function()
   {
      var segmentWidth = 10.0, i, position, systemname,
         minX = 0, minZ = 0, maxX = 0, maxZ = 0,
         endTime, startTime;

      endTime = startTime = new Date();

      for ( systemname in SCMAP.data.systems ) {
         position = SCMAP.System.getByName( systemname ).position;
         if ( position.x < minX ) { minX = position.x; }
         if ( position.x > maxX ) { maxX = position.x; }
         if ( position.z < minZ ) { minZ = position.z; }
         if ( position.z > maxZ ) { maxZ = position.z; }
      }
      minX -= segmentWidth * 4;
      minZ -= segmentWidth * 4;
      maxX += segmentWidth * 4;
      maxZ += segmentWidth * 4;
      minX = Math.floor( minX / segmentWidth ) * segmentWidth;
      minZ = Math.floor( minZ / segmentWidth ) * segmentWidth;
      maxX = Math.floor( maxX / segmentWidth ) * segmentWidth;
      maxZ = Math.floor( maxZ / segmentWidth ) * segmentWidth;

      var startX = Math.floor( minX / segmentWidth );
      var startZ = Math.floor( minZ / segmentWidth );
      var gridX = Math.floor( maxX / segmentWidth );
      var gridZ = Math.floor( maxZ / segmentWidth );

      var geo = new THREE.Geometry();

var redcolor = new THREE.Color( 0x000000 );
var color;
      //var plane = new THREE.Object3D();
      var lineMaterial = new THREE.LineBasicMaterial({
         //color: 0x6060A0,
         linewidth: 1.5,
         wireframe: true,
         vertexColors: THREE.VertexColors
      });

      for ( var iz = startZ; iz <= gridZ; iz ++ ) {

         var z1 = iz * segmentWidth;
         var z2 = ( iz + 1 ) * segmentWidth;

         for ( var ix = startX; ix <= gridX; ix ++ ) {

            var x1 = ix * segmentWidth;
            var x2 = ( ix + 1 ) * segmentWidth;

            var vec1 = new THREE.Vector3( x1, 0, z1 );
            var vec2 = new THREE.Vector3( x2, 0, z1 );
            var vec3 = new THREE.Vector3( x2, 0, z2 );

            geo.vertices.push( vec1 );
            geo.vertices.push( vec2 );
            geo.vertices.push( vec2 );
            geo.vertices.push( vec3 );

            var systems = this.withinApproxDistance( vec2, 55 );

var arr = this.closestFromArray( vec1, systems );
if ( arr[0] <= 45 && arr[1] ) {
   color = arr[1].faction.planeColor.clone();
   if ( arr[0] >= 40 ) {
      color.multiplyScalar( 0.5 );
   } else if ( arr[0] >= 30 ) {
      color.multiplyScalar( 0.8 );
   }
} else {
   color = redcolor;
}
geo.colors.push( color );

arr = this.closestFromArray( vec2, systems );
if ( arr[0] <= 45 && arr[1] ) {
   color = arr[1].faction.planeColor.clone();
   if ( arr[0] >= 40 ) {
      color.multiplyScalar( 0.5 );
   } else if ( arr[0] >= 30 ) {
      color.multiplyScalar( 0.8 );
   }
} else {
   color = redcolor;
}
            geo.colors.push( color, color );

arr = this.closestFromArray( vec3, systems );
if ( arr[0] <= 45 && arr[1] ) {
   color = arr[1].faction.planeColor.clone();
   if ( arr[0] >= 40 ) {
      color.multiplyScalar( 0.5 );
   } else if ( arr[0] >= 30 ) {
      color.multiplyScalar( 0.8 );
   }
} else {
   color = redcolor;
}
            geo.colors.push( color );
         }

      }

      // and create the ground reference plane
      var referenceLines = new THREE.Line( geo, lineMaterial, THREE.LinePieces );
      scene.add( referenceLines );

      endTime = new Date();
      console.log( "Building the territory reference plane took " +
         (endTime.getTime() - startTime.getTime()) + " msec" );
   },

   buildOldReferencePlane: function()
   {
      var ringWidth = 10.0, // plane circle scaling factor to match the map video
         step = 2 * Math.PI / 36, // 36 radial segments
         radius, insideRadius, outsideRadius,
         lineMaterial, referenceLines, lineGeometry,
         centerTheta, cosPrevTheta, sinPrevTheta, cosCenterTheta, sinCenterTheta,
         xInside, zInside, xOutside, zOutside, zInside2, xOutside2, zOutside2,
         maxRadius, arr,
         endTime, startTime,
         referenceColours = new THREE.Object3D(), prevTheta, nextTheta, i;

      endTime = startTime = new Date();

      // Work out how far away the furtest system is
      // so that we can stop drawing just beyond that
      // point
      arr = this.furthestPOI( new THREE.Vector3() );
      maxRadius = arr[0] + 50;

      lineMaterial = new THREE.LineBasicMaterial({
         color: 0x6060A0,
         linewidth: 1.5,
         vertexColors: true,
         opacity: 0.6
      } );
      lineGeometry = new THREE.Geometry();

      // Around in a circle, processing each center point of the
      // squares we'll be drawing (dividing our step by 2 makes it
      // the center point)
      var theta;
      for ( centerTheta = step / 2; centerTheta < 2 * Math.PI; centerTheta += step )
      {
         cosCenterTheta = Math.cos( centerTheta );
         sinCenterTheta = Math.sin( centerTheta );

         prevTheta = centerTheta - step / 2;
         nextTheta = centerTheta + step / 2;
         cosPrevTheta = Math.cos( prevTheta );
         sinPrevTheta = Math.sin( prevTheta );

         // inside to out, stop at furthest out
         for ( radius = ringWidth / 2; radius < maxRadius; radius += ringWidth )
         {
            insideRadius  = radius - ringWidth / 2;
            outsideRadius = radius + ringWidth / 2;
            arr = this.closestPOI( new THREE.Vector3( radius * cosCenterTheta, 0, -radius * sinCenterTheta ) );

            if ( arr[0] <= 35 )
            {
               //var mesh = this.referencePlaneTerritoryColourMesh(
               //   arr[1].faction.material(), prevTheta, nextTheta, insideRadius, outsideRadius
               //);
               //if ( mesh ) {
               //   referenceColours.add( mesh );
               //}
         //var point = geometry.vertices[ i ];
         //var arr = this.closestPOI( point );
         //var distance = arr[0],
         //    closest = arr[1];
         //if ( distance > minDistance ) { distance = minDistance; }
         //var strength = ( minDistance - distance ) / minDistance;
         //var color = closest.faction.planeColor.clone();
         //color.multiplyScalar( strength * 0.8 );
         //geometry.colors[i] = color;
            }

            if ( arr[0] < 55 )
            {
               xInside  =  insideRadius  * cosPrevTheta;
               zInside  = -insideRadius  * sinPrevTheta;
               xOutside =  outsideRadius * cosPrevTheta;
               zOutside = -outsideRadius * sinPrevTheta;
               lineGeometry.vertices.push( new THREE.Vector3( xInside,  0, zInside  ) );
               lineGeometry.vertices.push( new THREE.Vector3( xOutside, 0, zOutside ) );
               lineGeometry.vertices.push( new THREE.Vector3( xInside,  0, zInside  ) );
               lineGeometry.vertices.push( new THREE.Vector3(
                  insideRadius * Math.cos( nextTheta ), 0, -insideRadius * Math.sin( nextTheta )
               ) );
            }
         }
      }

      // set basic color
      for ( i = 0; i < lineGeometry.vertices.length; i++ ) {
         lineGeometry.colors[i] = lineMaterial.color;
      }

      // and create the ground reference plane
      referenceLines = new THREE.Line( lineGeometry, lineMaterial, THREE.LinePieces );
      this.referencePlane = referenceLines;
      scene.add( referenceLines );

      scene.add( referenceColours );

      endTime = new Date();
      console.log( "Building the territory reference plane took " +
         (endTime.getTime() - startTime.getTime()) + " msec" );
   }
};


function initUI () {

   $('#bookmark-list-header a').append( SCMAP.Symbol.getTag( SCMAP.Symbols.BOOKMARK ).addClass('fa-lg') );
   $('#hangar-list-header a').append( SCMAP.Symbol.getTag( SCMAP.Symbols.HANGAR ).addClass('fa-lg') );
   $('#commented-list-header a').append( SCMAP.Symbol.getTag( SCMAP.Symbols.COMMENTS ).addClass('fa-lg') );

   $('#faction-list').empty();
   for ( var factionId in SCMAP.data.factions ) {
      var faction = SCMAP.data.factions[factionId];
      var $factionHeader = $('<h3><a href="#" data-toggle-next="next"><i class="fa fa-fw fa-lg fa-caret-right"></i>'+faction.name+'</a></h3>');
          $factionHeader.find('a').css( 'color', faction.color.getStyle() );
      var $factionSystems = $('<ul style="display: none;" id="list-faction-'+faction.id+'" class="fa-ul ui-section"></ul>');
      $('#faction-list').append( $factionHeader ).append( $factionSystems );
   }

   $( "#map_ui" ).tabs({
      active: 0,
      activate: function( event, ui ) {
         event.preventDefault();
         var clicked_on = ui.newTab.find('a').attr('href');

         switch ( clicked_on ) {

            case '#editor':
               if ( map.canEdit ) {
                  $('#webgl-container').removeClass().addClass( 'noselect webgl-container-edit' );
                  window.editor.enabled = true;
                  window.controls.requireAlt = true;
               }
               break;

            case '#listing':
               var systems = SCMAP.System.SortedList();
               var bookmarkCount = 0, hangarCount = 0, commentedCount = 0;
               var system;

               $('#hangar-list').empty();
               $('#bookmark-list').empty();
               $('#commented-list').empty();
               $('#a-z-list').empty();

               for ( var i = 0; i < systems.length; i += 1 ) {
                  system = systems[ i ];
                  var link = system.createInfoLink().outerHtml();

                  if ( storage && storage[ 'hangarLocation.' + system.id ] === '1' ) {
                     hangarCount += 1;
                     $('#hangar-list').append( $('<li>'+link+'</li>') );
                  }

                  if ( storage && storage[ 'bookmarks.' + system.id ] === '1' ) {
                     bookmarkCount += 1;
                     $('#bookmark-list').append( $('<li>'+link+'</li>') );
                  }

                  if ( storage ) {
                     if ( 'comments.'+system.id in storage ) {
                        commentedCount += 1;
                        $('#commented-list').append( $('<li>'+link+'</li>') );
                     }
                  }

                  $('#a-z-list').append( $('<li>'+link+'</li>') );
               }

               if ( bookmarkCount > 0 ) {
                  $('#bookmark-list-wrapper').show();
               } else {
                  $('#bookmark-list-wrapper').hide();
               }

               if ( hangarCount > 0 ) {
                  $('#hangar-list-wrapper').show();
               } else {
                  $('#hangar-list-wrapper').hide();
               }

               if ( commentedCount > 0 ) {
                  $('#commented-list-wrapper').show();
               } else {
                  $('#commented-list-wrapper').hide();
               }

               for ( var factionId in SCMAP.data.factions ) {
                  var faction = SCMAP.data.factions[factionId];
                  $('#list-faction-'+faction.id).empty();
                  for ( i = 0; i < systems.length; i += 1 ) {
                     system = systems[i];
                     if ( system.faction.id === faction.id ) {
                        $('#list-faction-'+faction.id).append( '<li>'+system.createInfoLink().outerHtml()+'</li>' );
                     }
                  }
               }

               break;

            default:
               $('#webgl-container').removeClass().addClass( 'noselect webgl-container-noedit' );
               window.editor.enabled = false;
               window.controls.requireAlt = false;
               //if ( clicked_on === '#info' && map.selected() instanceof SCMAP.System ) {
               //   map.selected().displayInfo();
               //}
               break;
         }

         $('#map_ui').data( 'jsp' ).reinitialise();
      }
   });

   /* jScrollPane */
   $('#map_ui').jScrollPane({ showArrows: true });

   $('#toggle-glow').prop( 'checked', SCMAP.settings.glow );
   $('#toggle-labels').prop( 'checked', SCMAP.settings.labels );
   $('#toggle-label-icons').prop( 'checked', SCMAP.settings.labelIcons );
   $('#avoid-hostile').prop( 'checked', ( storage && storage['route.avoidHostile'] === '1' ) );
   $('#avoid-off-limits').prop( 'checked', ( storage && storage['route.avoidOffLimits'] === '1' ) );
   $('#avoid-unknown-jumppoints').prop( 'checked', ( storage && storage['route.avoidUnknownJumppoints'] === '1' ) );

   for ( var icon in SCMAP.Symbols ) {
      icon = SCMAP.Symbols[ icon ];
      var $li = $('<li><i class="fa-li fa '+icon.faClass+'"></i>'+icon.description+'</li>' );
      $li.css( 'color', icon.color );
      $('#map_ui ul.legend').append( $li );
   }

   // Event handlers

   $('#toggle-fxaa').prop( 'checked', ( storage && storage['effect.FXAA'] === '1' ) ? true : false );
   $('#toggle-bloom').prop( 'checked', ( storage && storage['effect.Bloom'] === '1' ) ? true : false );

   $('#3d-mode').prop( 'checked', storage && storage.mode === '3d' );

   // Some simple UI stuff

   $('#lock-rotation').prop( 'checked', storage && storage['control.rotationLocked'] === '1' );

   $('#3d-mode').on( 'change', function() { if ( this.checked ) displayState.to3d(); else displayState.to2d(); });

   $('#avoid-hostile').on( 'change', function() {
      if ( storage ) {
         storage['route.avoidHostile'] = ( this.checked ) ? '1' : '0';
      }
      map.rebuildCurrentRoute();
   });
   $('#avoid-off-limits').on( 'change', function() {
      if ( storage ) {
         storage['route.avoidOffLimits'] = ( this.checked ) ? '1' : '0';
         map.rebuildCurrentRoute();
      }
   });
   $('#avoid-unknown-jumppoints').on( 'change', function() {
      if ( storage ) {
         storage['route.avoidUnknownJumppoints'] = ( this.checked ) ? '1' : '0';
         map.rebuildCurrentRoute();
      }
   });

   $('#lock-rotation').on( 'change', function() {
      controls.noRotate = this.checked;
      if ( storage ) {
         storage['control.rotationLocked'] = ( this.checked ) ? '1' : '0';
      }
   });
   $('#toggle-fxaa').on( 'change', function() {
      effectFXAA.enabled = this.checked;
      if ( storage ) {
         storage['effect.FXAA'] = ( this.checked ) ? '1' : '0';
      }
   });
   $('#toggle-bloom').on( 'change', function() {
      effectBloom.enabled = this.checked;
      if ( storage ) {
         storage['effect.Bloom'] = ( this.checked ) ? '1' : '0';
      }
   });

   $('#toggle-glow').on( 'change', function() {
      SCMAP.settings.glow = this.checked;
      map.updateSystems();
      if ( storage ) {
         storage['settings.Glow'] = ( this.checked ) ? '1' : '0';
      }
   });
   $('#toggle-labels').on( 'change', function() {
      SCMAP.settings.labels = this.checked;
      map.updateSystems();
      if ( storage ) {
         storage['settings.Labels'] = ( this.checked ) ? '1' : '0';
      }
   });
   $('#toggle-label-icons').on( 'change', function() {
      SCMAP.settings.labelIcons = this.checked;
      map.updateSystems();
      if ( storage ) {
         storage['settings.LabelIcons'] = ( this.checked ) ? '1' : '0';
      }
   });

   $('#resetCamera').on( 'click', function() {
      controls.cameraTo( cameraDefaults.target, cameraDefaults.theta, cameraDefaults.phi, cameraDefaults.radius );
   });
   $('#centreCamera').on( 'click', function() {
      controls.moveTo( cameraDefaults.target );
   });
   $('#northCamera').on( 'click', function() {
      controls.rotateTo( 0, undefined, undefined );
   });
   $('#topCamera').on( 'click', function() {
      controls.rotateTo( 0, 0, 180 );
   });
   $('#top2D').on( 'click', function() {
      controls.noRotate = true;
      $('#lock-rotation').prop( 'checked', true );
      displayState.to2d();
      controls.rotateTo( 0, 0, 180 );
   });
   $('.quick-button.with-checkbox').on( 'click', function ( event ) {
      var $this = $(this);
      $this.find('input[type=checkbox]').click();
   });

   $('#map_ui').on( 'click', 'a[data-toggle-next]', function ( event ) {
      var $this = $(this);
      event.preventDefault();
      var $element = $this.parent().next();
      $element.toggle();
      if ( $element.is(':visible') ) {
         $this.parent().find('> a > i').first().removeClass('fa-caret-right').addClass('fa-caret-down');
      } else {
         $this.parent().find('> a > i').first().addClass('fa-caret-right').removeClass('fa-caret-down');
      }
      $('#map_ui').data( 'jsp' ).reinitialise();
   });

   $('#map_ui').on( 'click', 'a[data-toggle-child]', function ( event ) {
      var $this = $(this);
      event.preventDefault();
      var $element = $this.parent().find( $this.data('toggle-child') );
      $element.toggle();
      if ( $element.is(':visible') ) {
         $this.parent().find('> a > i').removeClass('fa-caret-right').addClass('fa-caret-down');
      } else {
         $this.parent().find('> a > i').addClass('fa-caret-right').removeClass('fa-caret-down');
      }
      $('#map_ui').data( 'jsp' ).reinitialise();
   });

   $('#map_ui').on( 'click', "a[data-goto='system']", function( event ) {
      event.preventDefault();
      var $this = $(this);
      var system = SCMAP.System.getById( $this.data('system') );
      system.displayInfo();
      controls.moveTo( system );
   });

   var updateComments = function( event ) {
      event.preventDefault();
      if ( !storage ) { return; }
      var system = SCMAP.System.getById( $(this).data('system') );
      var text = $(this).val();
      if ( typeof text === 'string' && text.length > 0 ) {
         storage['comments.'+system.id] = text;
         //$md.find('p').prepend('<i class="fa fa-2x fa-quote-left"></i>');
         var $commentmd = $(markdown.toHTML( text ));
         $('#comments-md').html( $commentmd );
      } else {
         delete storage['comments.'+system.id];
         $('#comments-md').empty();
      }
      system.updateSceneObject( scene );
   };
   $('#comments').on( 'keyup', updateComments );
   $('#comments').on( 'blur', updateComments );
   $('#comments').on( 'change', updateComments );

   $('#bookmark').on( 'change', function() {
      var system = SCMAP.System.getById( $(this).data('system') );
      if ( !storage ) { return; }
      if ( this.checked ) {
         storage['bookmarks.'+system.id] = '1';
      } else {
         delete storage['bookmarks.'+system.id];
      }
      system.updateSceneObject( scene );
   });

   $('#hangar-location').on( 'change', function() {
      var system = SCMAP.System.getById( $(this).data('system') );
      if ( !storage ) { return; }
      if ( this.checked ) {
         storage['hangarLocation.'+system.id] = '1';
      } else {
         delete storage['hangarLocation.'+system.id];
      }
      system.updateSceneObject( scene );
   });
}

function makeSafeForCSS( name ) {
   if ( typeof name !== 'string' ) {
      return;
   }
   return name.replace( /[^a-zA-Z0-9]/g, function(s) {
      var c = s.charCodeAt(0);
      if (c == 32) return '-';
      if (c >= 65 && c <= 90) return '_' + s.toLowerCase();
      return (c.toString(16)).slice(-4);
   });
}

// End of file

var effectFXAA, camera, scene, renderer, composer, map, dpr,
   shift, ctrl, alt, controls, editor, stats, displayState,
   storage, cameraDefaults = {
      x: 0,
      y: 80,
      z: 100,
      target: new THREE.Vector3( 0, 10, 0 ),
      theta: 0,
      phi: THREE.Math.degToRad( 55.1 ),
      radius: 122.2
   };

$(function() {
   if ( ! Detector.webgl ) {
      Detector.addGetWebGLMessage();
   }

   init();
   animate();
});

function init()
{
   var container, renderModel, effectCopy, effectBloom, width, height, i;

   if ( hasLocalStorage() ) {
      storage = window.localStorage;
      console.log( "We have localStorage" );
   } else {
      console.log( "We don't have localStorage :(" );
   }

   dpr = 1;
   if ( window.devicePixelRatio !== undefined ) {
      dpr = window.devicePixelRatio;
   }

   SCMAP.settings.glow = ( storage && storage['settings.Glow'] === '0' ) ? false : true;
   SCMAP.settings.labels = ( storage && storage['settings.Labels'] === '0' ) ? false : true;
   SCMAP.settings.labelIcons = ( storage && storage['settings.LabelIcons'] === '0' ) ? false : true;

   container = document.createElement( 'div' );
   container.id = 'webgl-container';
   container.className = 'noselect webgl-container-noedit';
   document.body.appendChild( container );
   width = window.innerWidth || 2;
   height = window.innerHeight || 2;

   camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 10, 1600 );

   camera.position.x = cameraDefaults.x;
   camera.position.y = cameraDefaults.y;
   camera.position.z = cameraDefaults.z;
   camera.setViewOffset( width, height, -( $('#map_ui').width() / 2 ), 0, width, height );

   controls = new THREE.OrbitControlsFSM( camera, $('#webgl-container')[0] );
	controls.target = cameraDefaults.target.clone();
   controls.restoreOldPosition();
   controls.minPolarAngle = 0;
   controls.maxPolarAngle = THREE.Math.degToRad( 85 );
   controls.rotateSpeed = $('#gl-info').data('rotateSpeed');
   controls.zoomSpeed = $('#gl-info').data('zoomSpeed');
   controls.panSpeed = $('#gl-info').data('panSpeed');
   controls.noZoom = false;
   controls.noPan = false;
   controls.mapMode = true;
   controls.minDistance = 20;
   controls.maxDistance = 800;
   controls.keyPanSpeed = 25;
   controls.addEventListener( 'change', render );
   controls.noRotate = ( storage && storage['control.rotationLocked'] === '1' ) ? true : false;

   scene = new THREE.Scene();

   renderer = new THREE.WebGLRenderer( { clearColor: 0x000000, clearAlpha: 1, antialias: true } );
   renderer.setSize( window.innerWidth, window.innerHeight );
   renderer.autoClear = false;
   container.appendChild( renderer.domElement );

   map = new SCMAP.Map( scene );
   controls.map = map;

   editor = new SCMAP.Editor( map, camera );
   editor.panSpeed = 0.6;
   document.addEventListener( 'change', render );

   initUI();

   map.populateScene();

   // Stats

   stats = new Stats();
   stats.domElement.style.position = 'absolute';
   stats.domElement.style.top = '0px';
   stats.domElement.style.right = '0px';
   stats.domElement.style.display = 'none';
   stats.domElement.style.zIndex = '100';
   container.appendChild( stats.domElement );

   // Event handlers

   window.addEventListener( 'resize', onWindowResize, false );

   // Rendering

   renderModel = new THREE.RenderPass( scene, camera );
   effectBloom = new THREE.BloomPass( 0.75 );

   effectCopy = new THREE.ShaderPass( THREE.CopyShader );
   effectCopy.renderToScreen = true;

   effectFXAA = new THREE.ShaderPass( THREE.FXAAShader );
   effectFXAA.uniforms.resolution.value.set( 1 / (width * dpr), 1 / (height * dpr) );

   effectFXAA.enabled  = ( storage && storage['effect.FXAA'] === '1' ) ? true : false;
   effectBloom.enabled = ( storage && storage['effect.Bloom'] === '1' ) ? true : false;

   composer = new THREE.EffectComposer( renderer );
   composer.setSize( width * dpr, height * dpr );
   composer.addPass( renderModel );
   composer.addPass( effectFXAA );
   composer.addPass( effectBloom );
   composer.addPass( effectCopy );

   displayState = buildDisplayModeFSM( ( storage && storage.mode ) ? storage && storage.mode : '2d' );

//var smokeParticles = new THREE.Geometry();
//for (i = 0; i < 25; i++) {
//    var particle = new THREE.Vector3( Math.random() * 8, Math.random() * 10 + 5, Math.random() * 8 );
//    smokeParticles.vertices.push( particle );
//}
//var smokeTexture = THREE.ImageUtils.loadTexture('images/smoke.png');
//var smokeMaterial = new THREE.ParticleBasicMaterial({
//   map: smokeTexture,
//   transparent: true,
//   blending: THREE.AdditiveBlending,
//   size: 25,
//   color: 0x111111
//});
//
//var smoke = new THREE.ParticleSystem(smokeParticles, smokeMaterial);
//smoke.sortParticles = true;
//smoke.position.x = 10;
//
//scene.add(smoke);

}

function buildCross () {
   var material = new THREE.MeshBasicMaterial( { wireframe: true, color: 0xFF0000, linewidth: 1 } );
   var group = new THREE.Object3D();
   var geo = new THREE.Geometry();
   geo.vertices.push( new THREE.Vector3( -50, 1, 0 ) );
   geo.vertices.push( new THREE.Vector3( 50, 1, 0 ) );
   var cross = new THREE.Line( geo, material );
   group.add( cross );
   geo = new THREE.Geometry();
   var material2 = new THREE.MeshBasicMaterial( { wireframe: true, color: 0xF0F000, linewidth: 1 } );
   geo.vertices.push( new THREE.Vector3( 0, 1, -50 ) );
   geo.vertices.push( new THREE.Vector3( 0, 1, 50 ) );
   cross = new THREE.Line( geo, material2 );
   group.add( cross );
   var material3 = new THREE.MeshBasicMaterial( { wireframe: true, color: 0x0000F0, linewidth: 1 } );
   geo = new THREE.Geometry();
   geo.vertices.push( new THREE.Vector3( 0, -50, 0 ) );
   geo.vertices.push( new THREE.Vector3( 0, 50, 0 ) );
   cross = new THREE.Line( geo, material3 );
   group.add( cross );
   return group;
}

Object.values = function (obj ) {
    var vals = [];
    for ( var key in obj ) {
        if ( obj.hasOwnProperty(key) ) {
            vals.push( obj[key] );
        }
    }
    return vals;
};

function onWindowResize() {
   var width = window.innerWidth || 2;
   var height = window.innerHeight || 2;
   camera.aspect = width / height;
   camera.setViewOffset( width, height, -( $('#map_ui').width() / 2 ), 0, width, height );
   camera.updateProjectionMatrix();
   effectFXAA.uniforms.resolution.value.set( 1 / (width * dpr), 1 / (height * dpr) );
   renderer.setSize( width, height );
   composer.reset();
}

function buildDisplayModeFSM ( initialState )
{
   var tweenTo2d, tweenTo3d, position, fsm;

   position = { y: ( initialState === '3d' ) ? 100 : 0.5 };

   tweenTo2d = new TWEEN.Tween( position )
      .to( { y: 0.5 }, 1000 )
      .easing( TWEEN.Easing.Cubic.InOut )
      .onUpdate( function () {
            map.destroyCurrentRoute(); // TODO: find a way to update
            for ( var i = 0; i < scene.children.length; i++ ) {
               var child = scene.children[i];
               if ( typeof child.scaleY === 'function' ) {
                  child.scaleY( this.y );
               }
            }
      } );

   tweenTo3d = new TWEEN.Tween( position )
      .to( { y: 100.0 }, 1000 )
      .easing( TWEEN.Easing.Cubic.InOut )
      .onUpdate( function () {
            map.destroyCurrentRoute(); // TODO: find a way to update
            for ( var i = 0; i < scene.children.length; i++ ) {
               var child = scene.children[i];
               if ( typeof child.scaleY === 'function' ) {
                  child.scaleY( this.y );
               }
            }
      } );

   fsm = StateMachine.create({
      initial: initialState || '3d',

      events: [
         { name: 'to2d',  from: '3d', to: '2d' },
         { name: 'to3d', from: '2d', to: '3d' }
      ],

      callbacks: {
         onenter2d: function() {
            $('#3d-mode').prop( 'checked', false );
            if ( storage ) { storage.mode = '2d'; }
         },

         onenter3d: function() {
            $('#3d-mode').prop( 'checked', true );
            if ( storage ) { storage.mode = '3d'; }
         },

         onleave2d: function() {
            tweenTo3d.onComplete( function() {
               fsm.transition();
            });
            tweenTo3d.start();
            return StateMachine.ASYNC;
         },

         onleave3d: function() {
            tweenTo2d.onComplete( function() {
               fsm.transition();
            });
            tweenTo2d.start();
            return StateMachine.ASYNC;
         },
      },

      error: function( eventName, from, to, args, errorCode, errorMessage ) {
         console.log( 'event ' + eventName + ' was naughty : ' + errorMessage );
      }
   });

   return fsm;
}

//

function animate() {
   requestAnimationFrame( animate );
   TWEEN.update();
   if ( controls !== undefined ) {
      controls.update();
   }
   if ( editor !== undefined ) {
      editor.update();
   }
   stats.update();
   render();
}

function render() {
   scene.updateMatrixWorld();
   scene.traverse( function ( object ) {
      if ( object instanceof THREE.LOD ) {
         object.update( camera );
      }
   } );
   map.animateSelector();
   renderer.clear();
   composer.render();
}

function hasLocalStorage() {
   try {
      return 'localStorage' in window && window.localStorage !== null;
   } catch(e) {
      return false;
   }
}

jQuery.fn.outerHtml = function() {
     return jQuery('<div />').append(this.eq(0).clone()).html();
};

function humanSort( a, b ) {
   var x, cmp1, cmp2;
   var aa = a.name.split(/(\d+)/);
   var bb = b.name.split(/(\d+)/);

   for ( x = 0; x < Math.max( aa.length, bb.length ); x++ )
   {
      if ( aa[x] != bb[x] )
      {
         cmp1 = ( isNaN( parseInt( aa[x], 10 ) ) ) ? aa[x] : parseInt( aa[x], 10 );
         cmp2 = ( isNaN( parseInt( bb[x], 10 ) ) ) ? bb[x] : parseInt( bb[x], 10 );

         if ( cmp1 === undefined || cmp2 === undefined ) {
            return aa.length - bb.length;
         } else {
            return ( cmp1 < cmp2 ) ? -1 : 1;
         }
      }
   }

   return 0;
}

// End of file
