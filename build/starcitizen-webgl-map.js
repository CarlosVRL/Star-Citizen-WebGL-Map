/*!
 * starcitizen-webgl-map v0.2.0 by Lianna Eeftinck
 * Copyright 2014 Lianna Eeftinck
 * https://github.com/Leeft/Star-Citizen-WebGL-Map
 * Licensed under http://opensource.org/licenses/MIT
 */
if (typeof jQuery === "undefined") { throw new Error("starcitizen-webgl-map requires jQuery"); }
if (typeof THREE === "undefined") { throw new Error("starcitizen-webgl-map requires THREE.js"); }
/**
* @author LiannaEeftinck / https://github.com/Leeft
*/

var SCMAP = SCMAP || { REVISION: '2' };

self.console = self.console || {
   info: function () {},
   log: function () {},
   debug: function () {},
   warn: function () {},
   error: function () {}
};

SCMAP.data = {
   factions: [],
   crime_levels: [],
   uee_strategic_values: [],
   goods: [],
   map: {},
   systems: []
};

// constants here
// SCMAP.Foo = 'bar'


/**
* @author LiannaEeftinck / https://github.com/Leeft
*/

SCMAP.Settings = function () {
   this.glow = true;
   this.labels = true;
};

SCMAP.settings = new SCMAP.Settings();

/**
 * @author Leeft / https://github.com/Leeft
 */
/* Used OrbitControls.js as a template - But it doesn't do the same thing! */
/*global THREE, console, window */

SCMAP.Editor = function ( map, camera, domElement ) {

   this.map = map;
   this.camera = camera; // used to find our directions
   this.domElement = ( domElement !== undefined ) ? domElement : document;

   ///////////
   // API

   // Set to true to enable the editor while in edit mode
   this.enabled = false;

   ////////////
   // internals

   var scope = this;

   var moveStart = new THREE.Vector2();
   var moveEnd   = new THREE.Vector2();
   var moveDelta = new THREE.Vector2();

   var move = new THREE.Vector3();

   var lastPosition = new THREE.Vector3();

   var STATE = { NONE : -1, MOVE_XZ : 0, MOVE_Y : 1 };
   var state = STATE.NONE;

   // events

   var changeEvent = { type: 'change' };

   // pass in distance in world space to move left
   this.moveLeft = function ( distance ) {
      var sameLevelTarget = window.controls.target.clone().setY( this.camera.position.y );
      var vectorBack = this.camera.position.clone().sub( sameLevelTarget ).negate().setLength( distance );
      var axis = new THREE.Vector3( 0, 1, 0 );
      vectorBack.applyAxisAngle( axis, THREE.Math.degToRad( 90 ) );
      move.add( vectorBack );
   };

   // pass in distance in world space to move up
   this.moveUp = function ( distance ) {
      var moveOffset = new THREE.Vector3();
      var te = this.map.selected.object.matrix.elements;
      // get Y column of matrix
      moveOffset.set( te[4], te[5], te[6] );
      moveOffset.multiplyScalar(distance);
      move.add( moveOffset );
   };

   // pass in distance in world space to move forward
   this.moveBack = function ( distance ) {
      var sameLevelTarget = window.controls.target.clone().setY( this.camera.position.y );
      var vectorBack = this.camera.position.clone().sub( sameLevelTarget ).negate().setLength( distance );
      move.add( vectorBack );
   };

   // main entry point; pass in Vector2 of change desired in pixel space,
   // right and down are positive
   this.move = function ( delta ) {
      var element = scope.domElement === document ? scope.domElement.body : scope.domElement;
      var offset = scope.map.selected.object.position.clone().sub( scope.camera.position );
      var targetDistance = offset.length();

      // half of the fov is center to top of screen
      targetDistance *= Math.tan( (scope.camera.fov/2) * Math.PI / 180.0 );
      // we actually don't use screenWidth, since perspective camera is fixed to screen height
      if ( state === STATE.MOVE_Y ) {
         scope.moveUp( 2 * delta.y * targetDistance / element.clientHeight );
      } else {
         scope.moveLeft( 2 * delta.x * targetDistance / element.clientHeight );
         scope.moveBack( 2 * delta.y * targetDistance / element.clientHeight );
      }
      //if ( this.mapMode ) {
      //} else {
         //scope.moveUp( 2 * delta.y * targetDistance / element.clientHeight );
      //}
   };

   this.update = function () {
      if ( scope.enabled === false ) { return; }
      if ( this.map.selected === undefined ) { return; }

      // move target to new location
      this.map.selected.object.position.sub( move );
      if ( this.map.selected.object.system.labelObject !== undefined ) {
         this.map.selected.object.system.labelObject.position.sub( move );
      }
      for ( var i = 0; i < this.map.selected.object.system.routeObjects.length; i++ ) {
         var routeObject = this.map.selected.object.system.routeObjects[i];
         routeObject.geometry.verticesNeedUpdate = true;
      }
      //for ( var i = 0; i < this.map.selected.object.system.jumppoints.length; i++ ) {
      //   var destination = this.map.selected.object.system.jumppoints[i].destination;
      //   for ( var i = 0; i < destination.routeObjects.length; i++ ) {
      //      var routeObject = destination.routeObjects[i];
      //      routeObject.geometry.verticesNeedUpdate = true;
      //   }
      //}

      move.set( 0, 0, 0 );

      if ( lastPosition.distanceTo( this.map.selected.object.position ) > 0 ) {
         this.dispatchEvent( changeEvent );
         lastPosition.copy( this.map.selected.object.position );
      }
   };

   function onMouseDown( event ) {
      if ( scope.enabled === false ) { return; }
      if ( scope.map.selected === undefined ) return;
      if ( event.altKey ) { return; }

      event.preventDefault();

      if ( event.button === 0 ) {
         state = STATE.MOVE_XZ;
      } else if ( event.button === 2 ) {
         state = STATE.MOVE_Y;
      }

      moveStart.set( event.clientX, event.clientY );

      scope.domElement.addEventListener( 'mousemove', onMouseMove, false );
      scope.domElement.addEventListener( 'mouseup', onMouseUp, false );
   }

   function onMouseMove( event ) {
      if ( scope.enabled === false ) return;
      if ( scope.map.selected === undefined ) return;
      if ( event.altKey ) { return; }

      event.preventDefault();

      if ( state === STATE.MOVE_XZ || state === STATE.MOVE_Y ) {
         moveEnd.set( event.clientX, event.clientY );
         moveDelta.subVectors( moveEnd, moveStart );
         scope.move( moveDelta );
         moveStart.copy( moveEnd );
      }

      scope.update();

   }

   function onMouseUp( event ) {
      if ( scope.enabled === false ) return;
      if ( event.altKey ) { return; }

      scope.domElement.removeEventListener( 'mousemove', onMouseMove, false );
      scope.domElement.removeEventListener( 'mouseup', onMouseUp, false );

      state = STATE.NONE;
   }

   this.domElement.addEventListener( 'contextmenu', function ( event ) { event.preventDefault(); }, false );
   this.domElement.addEventListener( 'mousedown', onMouseDown, false );
};

SCMAP.Editor.prototype = Object.create( THREE.EventDispatcher.prototype );

function _build_selected_system_object () {
   var object = new THREE.JSONLoader().parse( {
    "metadata" : {
        "formatVersion" : 3.1,
        "sourceFile"    : "selected_system.obj",
        "generatedBy"   : "OBJConverter",
        "vertices"      : 248,
        "faces"         : 248,
        "normals"       : 960,
        "colors"        : 0,
        "uvs"           : 0,
        "materials"     : 1
    },
    "scale" : 1.000000,
    "vertices": [-0.500000,0.500000,0.500000,-0.520000,0.200000,0.500000,-0.520000,0.200000,0.440000,-0.520000,0.440000,0.440000,-0.520000,0.500000,0.500000,-0.500000,0.520000,0.500000,-0.500000,0.500000,0.520000,-0.520000,0.440000,0.200000,-0.520000,0.500000,0.200000,-0.500000,0.520000,0.200000,-0.440000,0.520000,0.200000,-0.440000,0.520000,0.440000,-0.440000,0.440000,0.520000,-0.500000,0.200000,0.520000,-0.440000,0.200000,0.520000,-0.200000,0.520000,0.440000,-0.200000,0.520000,0.500000,-0.200000,0.500000,0.520000,-0.200000,0.440000,0.520000,-0.500000,0.440000,0.200000,-0.500000,0.500000,0.200000,-0.440000,0.500000,0.200000,-0.200000,0.440000,0.500000,-0.200000,0.500000,0.440000,-0.200000,0.500000,0.500000,-0.500000,0.440000,0.440000,-0.440000,0.440000,0.500000,-0.440000,0.500000,0.440000,-0.500000,0.200000,0.500000,-0.500000,0.200000,0.440000,-0.440000,0.200000,0.500000,0.500000,0.500000,0.500000,0.520000,0.200000,0.500000,0.520000,0.200000,0.440000,0.520000,0.440000,0.440000,0.520000,0.500000,0.500000,0.500000,0.520000,0.500000,0.500000,0.500000,0.520000,0.520000,0.440000,0.200000,0.520000,0.500000,0.200000,0.500000,0.520000,0.200000,0.440000,0.520000,0.200000,0.440000,0.520000,0.440000,0.440000,0.440000,0.520000,0.500000,0.200000,0.520000,0.440000,0.200000,0.520000,0.200000,0.520000,0.440000,0.200000,0.520000,0.500000,0.200000,0.500000,0.520000,0.200000,0.440000,0.520000,0.500000,0.440000,0.200000,0.500000,0.500000,0.200000,0.440000,0.500000,0.200000,0.200000,0.440000,0.500000,0.200000,0.500000,0.440000,0.200000,0.500000,0.500000,0.500000,0.440000,0.440000,0.440000,0.440000,0.500000,0.440000,0.500000,0.440000,0.500000,0.200000,0.500000,0.500000,0.200000,0.440000,0.440000,0.200000,0.500000,-0.500000,-0.500000,0.500000,-0.520000,-0.200000,0.500000,-0.520000,-0.200000,0.440000,-0.520000,-0.440000,0.440000,-0.520000,-0.500000,0.500000,-0.500000,-0.520000,0.500000,-0.500000,-0.500000,0.520000,-0.520000,-0.440000,0.200000,-0.520000,-0.500000,0.200000,-0.500000,-0.520000,0.200000,-0.440000,-0.520000,0.200000,-0.440000,-0.520000,0.440000,-0.440000,-0.440000,0.520000,-0.500000,-0.200000,0.520000,-0.440000,-0.200000,0.520000,-0.200000,-0.520000,0.440000,-0.200000,-0.520000,0.500000,-0.200000,-0.500000,0.520000,-0.200000,-0.440000,0.520000,-0.500000,-0.440000,0.200000,-0.500000,-0.500000,0.200000,-0.440000,-0.500000,0.200000,-0.200000,-0.440000,0.500000,-0.200000,-0.500000,0.440000,-0.200000,-0.500000,0.500000,-0.500000,-0.440000,0.440000,-0.440000,-0.440000,0.500000,-0.440000,-0.500000,0.440000,-0.500000,-0.200000,0.500000,-0.500000,-0.200000,0.440000,-0.440000,-0.200000,0.500000,0.500000,-0.500000,0.500000,0.520000,-0.200000,0.500000,0.520000,-0.200000,0.440000,0.520000,-0.440000,0.440000,0.520000,-0.500000,0.500000,0.500000,-0.520000,0.500000,0.500000,-0.500000,0.520000,0.520000,-0.440000,0.200000,0.520000,-0.500000,0.200000,0.500000,-0.520000,0.200000,0.440000,-0.520000,0.200000,0.440000,-0.520000,0.440000,0.440000,-0.440000,0.520000,0.500000,-0.200000,0.520000,0.440000,-0.200000,0.520000,0.200000,-0.520000,0.440000,0.200000,-0.520000,0.500000,0.200000,-0.500000,0.520000,0.200000,-0.440000,0.520000,0.500000,-0.440000,0.200000,0.500000,-0.500000,0.200000,0.440000,-0.500000,0.200000,0.200000,-0.440000,0.500000,0.200000,-0.500000,0.440000,0.200000,-0.500000,0.500000,0.500000,-0.440000,0.440000,0.440000,-0.440000,0.500000,0.440000,-0.500000,0.440000,0.500000,-0.200000,0.500000,0.500000,-0.200000,0.440000,0.440000,-0.200000,0.500000,-0.500000,0.500000,-0.500000,-0.520000,0.200000,-0.500000,-0.520000,0.200000,-0.440000,-0.520000,0.440000,-0.440000,-0.520000,0.500000,-0.500000,-0.500000,0.520000,-0.500000,-0.500000,0.500000,-0.520000,-0.520000,0.440000,-0.200000,-0.520000,0.500000,-0.200000,-0.500000,0.520000,-0.200000,-0.440000,0.520000,-0.200000,-0.440000,0.520000,-0.440000,-0.440000,0.440000,-0.520000,-0.500000,0.200000,-0.520000,-0.440000,0.200000,-0.520000,-0.200000,0.520000,-0.440000,-0.200000,0.520000,-0.500000,-0.200000,0.500000,-0.520000,-0.200000,0.440000,-0.520000,-0.500000,0.440000,-0.200000,-0.500000,0.500000,-0.200000,-0.440000,0.500000,-0.200000,-0.200000,0.440000,-0.500000,-0.200000,0.500000,-0.440000,-0.200000,0.500000,-0.500000,-0.500000,0.440000,-0.440000,-0.440000,0.440000,-0.500000,-0.440000,0.500000,-0.440000,-0.500000,0.200000,-0.500000,-0.500000,0.200000,-0.440000,-0.440000,0.200000,-0.500000,0.500000,0.500000,-0.500000,0.520000,0.200000,-0.500000,0.520000,0.200000,-0.440000,0.520000,0.440000,-0.440000,0.520000,0.500000,-0.500000,0.500000,0.520000,-0.500000,0.500000,0.500000,-0.520000,0.520000,0.440000,-0.200000,0.520000,0.500000,-0.200000,0.500000,0.520000,-0.200000,0.440000,0.520000,-0.200000,0.440000,0.520000,-0.440000,0.440000,0.440000,-0.520000,0.500000,0.200000,-0.520000,0.440000,0.200000,-0.520000,0.200000,0.520000,-0.440000,0.200000,0.520000,-0.500000,0.200000,0.500000,-0.520000,0.200000,0.440000,-0.520000,0.500000,0.440000,-0.200000,0.500000,0.500000,-0.200000,0.440000,0.500000,-0.200000,0.200000,0.440000,-0.500000,0.200000,0.500000,-0.440000,0.200000,0.500000,-0.500000,0.500000,0.440000,-0.440000,0.440000,0.440000,-0.500000,0.440000,0.500000,-0.440000,0.500000,0.200000,-0.500000,0.500000,0.200000,-0.440000,0.440000,0.200000,-0.500000,-0.500000,-0.500000,-0.500000,-0.520000,-0.200000,-0.500000,-0.520000,-0.200000,-0.440000,-0.520000,-0.440000,-0.440000,-0.520000,-0.500000,-0.500000,-0.500000,-0.520000,-0.500000,-0.500000,-0.500000,-0.520000,-0.520000,-0.440000,-0.200000,-0.520000,-0.500000,-0.200000,-0.500000,-0.520000,-0.200000,-0.440000,-0.520000,-0.200000,-0.440000,-0.520000,-0.440000,-0.440000,-0.440000,-0.520000,-0.500000,-0.200000,-0.520000,-0.440000,-0.200000,-0.520000,-0.200000,-0.520000,-0.440000,-0.200000,-0.520000,-0.500000,-0.200000,-0.500000,-0.520000,-0.200000,-0.440000,-0.520000,-0.500000,-0.440000,-0.200000,-0.500000,-0.500000,-0.200000,-0.440000,-0.500000,-0.200000,-0.200000,-0.440000,-0.500000,-0.200000,-0.500000,-0.440000,-0.200000,-0.500000,-0.500000,-0.500000,-0.440000,-0.440000,-0.440000,-0.440000,-0.500000,-0.440000,-0.500000,-0.440000,-0.500000,-0.200000,-0.500000,-0.500000,-0.200000,-0.440000,-0.440000,-0.200000,-0.500000,0.500000,-0.500000,-0.500000,0.520000,-0.200000,-0.500000,0.520000,-0.200000,-0.440000,0.520000,-0.440000,-0.440000,0.520000,-0.500000,-0.500000,0.500000,-0.520000,-0.500000,0.500000,-0.500000,-0.520000,0.520000,-0.440000,-0.200000,0.520000,-0.500000,-0.200000,0.500000,-0.520000,-0.200000,0.440000,-0.520000,-0.200000,0.440000,-0.520000,-0.440000,0.440000,-0.440000,-0.520000,0.500000,-0.200000,-0.520000,0.440000,-0.200000,-0.520000,0.200000,-0.520000,-0.440000,0.200000,-0.520000,-0.500000,0.200000,-0.500000,-0.520000,0.200000,-0.440000,-0.520000,0.500000,-0.440000,-0.200000,0.500000,-0.500000,-0.200000,0.440000,-0.500000,-0.200000,0.200000,-0.440000,-0.500000,0.200000,-0.500000,-0.440000,0.200000,-0.500000,-0.500000,0.500000,-0.440000,-0.440000,0.440000,-0.440000,-0.500000,0.440000,-0.500000,-0.440000,0.500000,-0.200000,-0.500000,0.500000,-0.200000,-0.440000,0.440000,-0.200000,-0.500000],
    "morphTargets": [],
    "morphColors": [],
    "normals": [-0.25969,0.62694,-0.73451,-0.62694,0.25969,-0.73451,-0.91018,0.29289,0.29289,-0.29289,0.91018,0.29289,-0.62694,-0.73451,0.25969,-0.25969,-0.73451,0.62694,-0.29289,0.29289,0.91018,-0.91018,0.29289,0.29289,0.73451,0.25969,0.62694,0.73451,0.62694,0.25969,-0.29289,0.91018,0.29289,-0.29289,0.29289,0.91018,-0.29289,0.29289,0.91018,-0.29289,0.91018,0.29289,-0.91018,0.29289,0.29289,0.57735,-0.57735,-0.57735,0.57735,-0.57735,0.57735,0.40825,-0.40825,0.8165,0.40825,-0.40825,-0.8165,0.57735,-0.57735,0.57735,0.57735,-0.57735,-0.57735,0.40825,-0.40825,-0.8165,0.40825,-0.40825,0.8165,0.57735,0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.40825,-0.8165,-0.40825,0.40825,0.8165,-0.40825,0.57735,-0.57735,-0.57735,0.57735,0.57735,-0.57735,0.40825,0.8165,-0.40825,0.40825,-0.8165,-0.40825,-0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.8165,-0.40825,-0.40825,-0.8165,-0.40825,-0.40825,0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.8165,-0.40825,-0.40825,0.8165,-0.40825,-0.40825,0.57735,-0.57735,0.57735,0.40825,-0.40825,0.8165,-0.29289,0.29289,0.91018,-0.25969,-0.73451,0.62694,0.40825,-0.40825,0.8165,0.57735,-0.57735,0.57735,0.73451,0.25969,0.62694,-0.29289,0.29289,0.91018,-0.91018,0.29289,0.29289,-0.8165,-0.40825,-0.40825,-0.57735,-0.57735,-0.57735,-0.62694,-0.73451,0.25969,-0.57735,-0.57735,-0.57735,-0.8165,-0.40825,-0.40825,-0.91018,0.29289,0.29289,-0.62694,0.25969,-0.73451,0.40825,0.8165,-0.40825,0.57735,0.57735,-0.57735,-0.25969,0.62694,-0.73451,-0.29289,0.91018,0.29289,0.57735,0.57735,-0.57735,0.40825,0.8165,-0.40825,-0.29289,0.91018,0.29289,0.73451,0.62694,0.25969,0.57735,-0.57735,-0.57735,0.8165,-0.40825,-0.40825,0.57735,-0.57735,-0.57735,0.30151,-0.90453,-0.30151,0.8165,-0.40825,-0.40825,0.57735,-0.57735,-0.57735,0.30151,-0.30151,-0.90453,0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.40825,-0.8165,-0.40825,0.57735,-0.57735,-0.57735,0.30151,-0.30151,-0.90453,0.57735,-0.57735,-0.57735,0.40825,-0.8165,-0.40825,0.57735,-0.57735,-0.57735,0.90453,-0.30151,-0.30151,0.40825,-0.40825,-0.8165,0.57735,-0.57735,-0.57735,0.30151,-0.90453,-0.30151,0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.40825,-0.40825,-0.8165,0.57735,-0.57735,-0.57735,0.90453,-0.30151,-0.30151,0.57735,-0.57735,-0.57735,0.90453,-0.30151,-0.30151,0.73451,0.25969,0.62694,0.57735,-0.57735,0.57735,0.90453,-0.30151,-0.30151,0.73451,0.62694,0.25969,0.73451,0.25969,0.62694,0.57735,-0.57735,-0.57735,0.57735,0.57735,-0.57735,0.73451,0.62694,0.25969,0.90453,-0.30151,-0.30151,-0.62694,0.25969,-0.73451,-0.25969,0.62694,-0.73451,0.30151,-0.30151,-0.90453,-0.62694,0.25969,-0.73451,0.30151,-0.30151,-0.90453,0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.62694,-0.73451,0.25969,-0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.30151,-0.90453,-0.30151,-0.62694,-0.73451,0.25969,0.30151,-0.90453,-0.30151,-0.25969,-0.73451,0.62694,0.30151,-0.30151,-0.90453,-0.25969,0.62694,-0.73451,0.57735,0.57735,-0.57735,0.57735,-0.57735,-0.57735,-0.25969,-0.73451,0.62694,0.30151,-0.90453,-0.30151,0.57735,-0.57735,-0.57735,0.57735,-0.57735,0.57735,0.91018,0.29289,0.29289,0.62694,0.25969,-0.73451,0.25969,0.62694,-0.73451,0.29289,0.91018,0.29289,0.29289,0.29289,0.91018,0.25969,-0.73451,0.62694,0.62694,-0.73451,0.25969,0.91018,0.29289,0.29289,0.29289,0.91018,0.29289,-0.73451,0.62694,0.25969,-0.73451,0.25969,0.62694,0.29289,0.29289,0.91018,0.29289,0.91018,0.29289,0.29289,0.29289,0.91018,0.91018,0.29289,0.29289,-0.40825,-0.40825,0.8165,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,-0.57735,-0.40825,-0.40825,-0.8165,-0.40825,-0.40825,-0.8165,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,0.57735,-0.40825,-0.40825,0.8165,-0.40825,-0.8165,-0.40825,-0.57735,-0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.40825,0.8165,-0.40825,-0.40825,0.8165,-0.40825,-0.57735,0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.40825,-0.8165,-0.40825,-0.8165,-0.40825,-0.40825,-0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.8165,-0.40825,-0.40825,0.8165,-0.40825,-0.40825,0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.8165,-0.40825,-0.40825,0.29289,0.29289,0.91018,-0.40825,-0.40825,0.8165,-0.57735,-0.57735,0.57735,0.25969,-0.73451,0.62694,-0.73451,0.25969,0.62694,-0.57735,-0.57735,0.57735,-0.40825,-0.40825,0.8165,0.29289,0.29289,0.91018,0.57735,-0.57735,-0.57735,0.8165,-0.40825,-0.40825,0.91018,0.29289,0.29289,0.62694,-0.73451,0.25969,0.91018,0.29289,0.29289,0.8165,-0.40825,-0.40825,0.57735,-0.57735,-0.57735,0.62694,0.25969,-0.73451,0.25969,0.62694,-0.73451,-0.57735,0.57735,-0.57735,-0.40825,0.8165,-0.40825,0.29289,0.91018,0.29289,0.29289,0.91018,0.29289,-0.40825,0.8165,-0.40825,-0.57735,0.57735,-0.57735,-0.73451,0.62694,0.25969,-0.57735,-0.57735,-0.57735,-0.8165,-0.40825,-0.40825,-0.57735,-0.57735,-0.57735,-0.30151,-0.90453,-0.30151,-0.30151,-0.30151,-0.90453,-0.57735,-0.57735,-0.57735,-0.8165,-0.40825,-0.40825,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.40825,-0.8165,-0.40825,-0.57735,-0.57735,-0.57735,-0.30151,-0.30151,-0.90453,-0.57735,-0.57735,-0.57735,-0.40825,-0.8165,-0.40825,-0.57735,-0.57735,-0.57735,-0.90453,-0.30151,-0.30151,-0.30151,-0.90453,-0.30151,-0.57735,-0.57735,-0.57735,-0.40825,-0.40825,-0.8165,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.40825,-0.40825,-0.8165,-0.57735,-0.57735,-0.57735,-0.90453,-0.30151,-0.30151,-0.73451,0.25969,0.62694,-0.90453,-0.30151,-0.30151,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,0.57735,-0.73451,0.62694,0.25969,-0.90453,-0.30151,-0.30151,-0.73451,0.25969,0.62694,-0.73451,0.62694,0.25969,-0.57735,0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.90453,-0.30151,-0.30151,0.25969,0.62694,-0.73451,0.62694,0.25969,-0.73451,-0.30151,-0.30151,-0.90453,-0.57735,-0.57735,-0.57735,-0.30151,-0.30151,-0.90453,0.62694,0.25969,-0.73451,0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.62694,-0.73451,0.25969,-0.30151,-0.90453,-0.30151,-0.30151,-0.90453,-0.30151,0.62694,-0.73451,0.25969,0.25969,-0.73451,0.62694,-0.57735,0.57735,-0.57735,0.25969,0.62694,-0.73451,-0.30151,-0.30151,-0.90453,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.30151,-0.90453,-0.30151,0.25969,-0.73451,0.62694,-0.57735,-0.57735,0.57735,-0.91018,-0.29289,0.29289,-0.62694,-0.25969,-0.73451,-0.25969,-0.62694,-0.73451,-0.29289,-0.91018,0.29289,-0.29289,-0.29289,0.91018,-0.25969,0.73451,0.62694,-0.62694,0.73451,0.25969,-0.91018,-0.29289,0.29289,-0.29289,-0.91018,0.29289,0.73451,-0.62694,0.25969,0.73451,-0.25969,0.62694,-0.29289,-0.29289,0.91018,-0.29289,-0.91018,0.29289,-0.29289,-0.29289,0.91018,-0.91018,-0.29289,0.29289,0.40825,0.40825,0.8165,0.57735,0.57735,0.57735,0.57735,0.57735,-0.57735,0.40825,0.40825,-0.8165,0.40825,0.40825,-0.8165,0.57735,0.57735,-0.57735,0.57735,0.57735,0.57735,0.40825,0.40825,0.8165,0.40825,0.8165,-0.40825,0.57735,0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.40825,-0.8165,-0.40825,0.40825,-0.8165,-0.40825,0.57735,-0.57735,-0.57735,0.57735,0.57735,-0.57735,0.40825,0.8165,-0.40825,0.8165,0.40825,-0.40825,0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.8165,0.40825,-0.40825,-0.8165,0.40825,-0.40825,-0.57735,0.57735,-0.57735,0.57735,0.57735,-0.57735,0.8165,0.40825,-0.40825,-0.29289,-0.29289,0.91018,0.40825,0.40825,0.8165,0.57735,0.57735,0.57735,-0.25969,0.73451,0.62694,0.73451,-0.25969,0.62694,0.57735,0.57735,0.57735,0.40825,0.40825,0.8165,-0.29289,-0.29289,0.91018,-0.57735,0.57735,-0.57735,-0.8165,0.40825,-0.40825,-0.91018,-0.29289,0.29289,-0.62694,0.73451,0.25969,-0.91018,-0.29289,0.29289,-0.8165,0.40825,-0.40825,-0.57735,0.57735,-0.57735,-0.62694,-0.25969,-0.73451,-0.25969,-0.62694,-0.73451,0.57735,-0.57735,-0.57735,0.40825,-0.8165,-0.40825,-0.29289,-0.91018,0.29289,-0.29289,-0.91018,0.29289,0.40825,-0.8165,-0.40825,0.57735,-0.57735,-0.57735,0.73451,-0.62694,0.25969,0.57735,0.57735,-0.57735,0.8165,0.40825,-0.40825,0.57735,0.57735,-0.57735,0.30151,0.90453,-0.30151,0.30151,0.30151,-0.90453,0.57735,0.57735,-0.57735,0.8165,0.40825,-0.40825,0.57735,0.57735,-0.57735,0.57735,0.57735,-0.57735,0.40825,0.8165,-0.40825,0.57735,0.57735,-0.57735,0.30151,0.30151,-0.90453,0.57735,0.57735,-0.57735,0.40825,0.8165,-0.40825,0.57735,0.57735,-0.57735,0.90453,0.30151,-0.30151,0.30151,0.90453,-0.30151,0.57735,0.57735,-0.57735,0.40825,0.40825,-0.8165,0.57735,0.57735,-0.57735,0.57735,0.57735,-0.57735,0.40825,0.40825,-0.8165,0.57735,0.57735,-0.57735,0.90453,0.30151,-0.30151,0.73451,-0.25969,0.62694,0.90453,0.30151,-0.30151,0.57735,0.57735,-0.57735,0.57735,0.57735,0.57735,0.73451,-0.62694,0.25969,0.90453,0.30151,-0.30151,0.73451,-0.25969,0.62694,0.73451,-0.62694,0.25969,0.57735,-0.57735,-0.57735,0.57735,0.57735,-0.57735,0.90453,0.30151,-0.30151,-0.25969,-0.62694,-0.73451,-0.62694,-0.25969,-0.73451,0.30151,0.30151,-0.90453,0.57735,0.57735,-0.57735,0.30151,0.30151,-0.90453,-0.62694,-0.25969,-0.73451,-0.57735,0.57735,-0.57735,0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.62694,0.73451,0.25969,0.30151,0.90453,-0.30151,0.30151,0.90453,-0.30151,-0.62694,0.73451,0.25969,-0.25969,0.73451,0.62694,0.57735,-0.57735,-0.57735,-0.25969,-0.62694,-0.73451,0.30151,0.30151,-0.90453,0.57735,0.57735,-0.57735,0.57735,0.57735,-0.57735,0.30151,0.90453,-0.30151,-0.25969,0.73451,0.62694,0.57735,0.57735,0.57735,0.25969,-0.62694,-0.73451,0.62694,-0.25969,-0.73451,0.91018,-0.29289,0.29289,0.29289,-0.91018,0.29289,0.62694,0.73451,0.25969,0.25969,0.73451,0.62694,0.29289,-0.29289,0.91018,0.91018,-0.29289,0.29289,-0.73451,-0.25969,0.62694,-0.73451,-0.62694,0.25969,0.29289,-0.91018,0.29289,0.29289,-0.29289,0.91018,0.29289,-0.29289,0.91018,0.29289,-0.91018,0.29289,0.91018,-0.29289,0.29289,-0.57735,0.57735,-0.57735,-0.57735,0.57735,0.57735,-0.40825,0.40825,0.8165,-0.40825,0.40825,-0.8165,-0.57735,0.57735,0.57735,-0.57735,0.57735,-0.57735,-0.40825,0.40825,-0.8165,-0.40825,0.40825,0.8165,-0.57735,-0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.40825,0.8165,-0.40825,-0.40825,-0.8165,-0.40825,-0.57735,0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.40825,-0.8165,-0.40825,-0.40825,0.8165,-0.40825,0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.8165,0.40825,-0.40825,0.8165,0.40825,-0.40825,-0.57735,0.57735,-0.57735,0.57735,0.57735,-0.57735,0.8165,0.40825,-0.40825,-0.8165,0.40825,-0.40825,-0.57735,0.57735,0.57735,-0.40825,0.40825,0.8165,0.29289,-0.29289,0.91018,0.25969,0.73451,0.62694,-0.40825,0.40825,0.8165,-0.57735,0.57735,0.57735,-0.73451,-0.25969,0.62694,0.29289,-0.29289,0.91018,0.91018,-0.29289,0.29289,0.8165,0.40825,-0.40825,0.57735,0.57735,-0.57735,0.62694,0.73451,0.25969,0.57735,0.57735,-0.57735,0.8165,0.40825,-0.40825,0.91018,-0.29289,0.29289,0.62694,-0.25969,-0.73451,-0.40825,-0.8165,-0.40825,-0.57735,-0.57735,-0.57735,0.25969,-0.62694,-0.73451,0.29289,-0.91018,0.29289,-0.57735,-0.57735,-0.57735,-0.40825,-0.8165,-0.40825,0.29289,-0.91018,0.29289,-0.73451,-0.62694,0.25969,-0.57735,0.57735,-0.57735,-0.8165,0.40825,-0.40825,-0.57735,0.57735,-0.57735,-0.30151,0.90453,-0.30151,-0.8165,0.40825,-0.40825,-0.57735,0.57735,-0.57735,-0.30151,0.30151,-0.90453,-0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.40825,0.8165,-0.40825,-0.57735,0.57735,-0.57735,-0.30151,0.30151,-0.90453,-0.57735,0.57735,-0.57735,-0.40825,0.8165,-0.40825,-0.57735,0.57735,-0.57735,-0.90453,0.30151,-0.30151,-0.40825,0.40825,-0.8165,-0.57735,0.57735,-0.57735,-0.30151,0.90453,-0.30151,-0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.40825,0.40825,-0.8165,-0.57735,0.57735,-0.57735,-0.90453,0.30151,-0.30151,-0.57735,0.57735,-0.57735,-0.90453,0.30151,-0.30151,-0.73451,-0.25969,0.62694,-0.57735,0.57735,0.57735,-0.90453,0.30151,-0.30151,-0.73451,-0.62694,0.25969,-0.73451,-0.25969,0.62694,-0.57735,0.57735,-0.57735,-0.57735,-0.57735,-0.57735,-0.73451,-0.62694,0.25969,-0.90453,0.30151,-0.30151,0.62694,-0.25969,-0.73451,0.25969,-0.62694,-0.73451,-0.30151,0.30151,-0.90453,0.62694,-0.25969,-0.73451,-0.30151,0.30151,-0.90453,-0.57735,0.57735,-0.57735,0.57735,0.57735,-0.57735,0.62694,0.73451,0.25969,0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.57735,-0.30151,0.90453,-0.30151,0.62694,0.73451,0.25969,-0.30151,0.90453,-0.30151,0.25969,0.73451,0.62694,-0.30151,0.30151,-0.90453,0.25969,-0.62694,-0.73451,-0.57735,-0.57735,-0.57735,-0.57735,0.57735,-0.57735,0.25969,0.73451,0.62694,-0.30151,0.90453,-0.30151,-0.57735,0.57735,-0.57735,-0.57735,0.57735,0.57735,-0.91018,0.29289,-0.29289,-0.62694,0.25969,0.73451,-0.25969,0.62694,0.73451,-0.29289,0.91018,-0.29289,-0.29289,0.29289,-0.91018,-0.25969,-0.73451,-0.62694,-0.62694,-0.73451,-0.25969,-0.91018,0.29289,-0.29289,-0.29289,0.91018,-0.29289,0.73451,0.62694,-0.25969,0.73451,0.25969,-0.62694,-0.29289,0.29289,-0.91018,-0.29289,0.91018,-0.29289,-0.29289,0.29289,-0.91018,-0.91018,0.29289,-0.29289,0.40825,-0.40825,-0.8165,0.57735,-0.57735,-0.57735,0.57735,-0.57735,0.57735,0.40825,-0.40825,0.8165,0.40825,-0.40825,0.8165,0.57735,-0.57735,0.57735,0.57735,-0.57735,-0.57735,0.40825,-0.40825,-0.8165,0.40825,-0.8165,0.40825,0.57735,-0.57735,0.57735,0.57735,0.57735,0.57735,0.40825,0.8165,0.40825,0.40825,0.8165,0.40825,0.57735,0.57735,0.57735,0.57735,-0.57735,0.57735,0.40825,-0.8165,0.40825,0.8165,-0.40825,0.40825,0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.8165,-0.40825,0.40825,-0.8165,-0.40825,0.40825,-0.57735,-0.57735,0.57735,0.57735,-0.57735,0.57735,0.8165,-0.40825,0.40825,-0.29289,0.29289,-0.91018,0.40825,-0.40825,-0.8165,0.57735,-0.57735,-0.57735,-0.25969,-0.73451,-0.62694,0.73451,0.25969,-0.62694,0.57735,-0.57735,-0.57735,0.40825,-0.40825,-0.8165,-0.29289,0.29289,-0.91018,-0.57735,-0.57735,0.57735,-0.8165,-0.40825,0.40825,-0.91018,0.29289,-0.29289,-0.62694,-0.73451,-0.25969,-0.91018,0.29289,-0.29289,-0.8165,-0.40825,0.40825,-0.57735,-0.57735,0.57735,-0.62694,0.25969,0.73451,-0.25969,0.62694,0.73451,0.57735,0.57735,0.57735,0.40825,0.8165,0.40825,-0.29289,0.91018,-0.29289,-0.29289,0.91018,-0.29289,0.40825,0.8165,0.40825,0.57735,0.57735,0.57735,0.73451,0.62694,-0.25969,0.57735,-0.57735,0.57735,0.8165,-0.40825,0.40825,0.57735,-0.57735,0.57735,0.30151,-0.90453,0.30151,0.30151,-0.30151,0.90453,0.57735,-0.57735,0.57735,0.8165,-0.40825,0.40825,0.57735,-0.57735,0.57735,0.57735,-0.57735,0.57735,0.40825,-0.8165,0.40825,0.57735,-0.57735,0.57735,0.30151,-0.30151,0.90453,0.57735,-0.57735,0.57735,0.40825,-0.8165,0.40825,0.57735,-0.57735,0.57735,0.90453,-0.30151,0.30151,0.30151,-0.90453,0.30151,0.57735,-0.57735,0.57735,0.40825,-0.40825,0.8165,0.57735,-0.57735,0.57735,0.57735,-0.57735,0.57735,0.40825,-0.40825,0.8165,0.57735,-0.57735,0.57735,0.90453,-0.30151,0.30151,0.73451,0.25969,-0.62694,0.90453,-0.30151,0.30151,0.57735,-0.57735,0.57735,0.57735,-0.57735,-0.57735,0.73451,0.62694,-0.25969,0.90453,-0.30151,0.30151,0.73451,0.25969,-0.62694,0.73451,0.62694,-0.25969,0.57735,0.57735,0.57735,0.57735,-0.57735,0.57735,0.90453,-0.30151,0.30151,-0.25969,0.62694,0.73451,-0.62694,0.25969,0.73451,0.30151,-0.30151,0.90453,0.57735,-0.57735,0.57735,0.30151,-0.30151,0.90453,-0.62694,0.25969,0.73451,-0.57735,-0.57735,0.57735,0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.62694,-0.73451,-0.25969,0.30151,-0.90453,0.30151,0.30151,-0.90453,0.30151,-0.62694,-0.73451,-0.25969,-0.25969,-0.73451,-0.62694,0.57735,0.57735,0.57735,-0.25969,0.62694,0.73451,0.30151,-0.30151,0.90453,0.57735,-0.57735,0.57735,0.57735,-0.57735,0.57735,0.30151,-0.90453,0.30151,-0.25969,-0.73451,-0.62694,0.57735,-0.57735,-0.57735,0.25969,0.62694,0.73451,0.62694,0.25969,0.73451,0.91018,0.29289,-0.29289,0.29289,0.91018,-0.29289,0.62694,-0.73451,-0.25969,0.25969,-0.73451,-0.62694,0.29289,0.29289,-0.91018,0.91018,0.29289,-0.29289,-0.73451,0.25969,-0.62694,-0.73451,0.62694,-0.25969,0.29289,0.91018,-0.29289,0.29289,0.29289,-0.91018,0.29289,0.29289,-0.91018,0.29289,0.91018,-0.29289,0.91018,0.29289,-0.29289,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,-0.57735,-0.40825,-0.40825,-0.8165,-0.40825,-0.40825,0.8165,-0.57735,-0.57735,-0.57735,-0.57735,-0.57735,0.57735,-0.40825,-0.40825,0.8165,-0.40825,-0.40825,-0.8165,-0.57735,0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.40825,-0.8165,0.40825,-0.40825,0.8165,0.40825,-0.57735,-0.57735,0.57735,-0.57735,0.57735,0.57735,-0.40825,0.8165,0.40825,-0.40825,-0.8165,0.40825,0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.8165,-0.40825,0.40825,0.8165,-0.40825,0.40825,-0.57735,-0.57735,0.57735,0.57735,-0.57735,0.57735,0.8165,-0.40825,0.40825,-0.8165,-0.40825,0.40825,-0.57735,-0.57735,-0.57735,-0.40825,-0.40825,-0.8165,0.29289,0.29289,-0.91018,0.25969,-0.73451,-0.62694,-0.40825,-0.40825,-0.8165,-0.57735,-0.57735,-0.57735,-0.73451,0.25969,-0.62694,0.29289,0.29289,-0.91018,0.91018,0.29289,-0.29289,0.8165,-0.40825,0.40825,0.57735,-0.57735,0.57735,0.62694,-0.73451,-0.25969,0.57735,-0.57735,0.57735,0.8165,-0.40825,0.40825,0.91018,0.29289,-0.29289,0.62694,0.25969,0.73451,-0.40825,0.8165,0.40825,-0.57735,0.57735,0.57735,0.25969,0.62694,0.73451,0.29289,0.91018,-0.29289,-0.57735,0.57735,0.57735,-0.40825,0.8165,0.40825,0.29289,0.91018,-0.29289,-0.73451,0.62694,-0.25969,-0.57735,-0.57735,0.57735,-0.8165,-0.40825,0.40825,-0.57735,-0.57735,0.57735,-0.30151,-0.90453,0.30151,-0.8165,-0.40825,0.40825,-0.57735,-0.57735,0.57735,-0.30151,-0.30151,0.90453,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.40825,-0.8165,0.40825,-0.57735,-0.57735,0.57735,-0.30151,-0.30151,0.90453,-0.57735,-0.57735,0.57735,-0.40825,-0.8165,0.40825,-0.57735,-0.57735,0.57735,-0.90453,-0.30151,0.30151,-0.40825,-0.40825,0.8165,-0.57735,-0.57735,0.57735,-0.30151,-0.90453,0.30151,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.40825,-0.40825,0.8165,-0.57735,-0.57735,0.57735,-0.90453,-0.30151,0.30151,-0.57735,-0.57735,0.57735,-0.90453,-0.30151,0.30151,-0.73451,0.25969,-0.62694,-0.57735,-0.57735,-0.57735,-0.90453,-0.30151,0.30151,-0.73451,0.62694,-0.25969,-0.73451,0.25969,-0.62694,-0.57735,-0.57735,0.57735,-0.57735,0.57735,0.57735,-0.73451,0.62694,-0.25969,-0.90453,-0.30151,0.30151,0.62694,0.25969,0.73451,0.25969,0.62694,0.73451,-0.30151,-0.30151,0.90453,0.62694,0.25969,0.73451,-0.30151,-0.30151,0.90453,-0.57735,-0.57735,0.57735,0.57735,-0.57735,0.57735,0.62694,-0.73451,-0.25969,0.57735,-0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.30151,-0.90453,0.30151,0.62694,-0.73451,-0.25969,-0.30151,-0.90453,0.30151,0.25969,-0.73451,-0.62694,-0.30151,-0.30151,0.90453,0.25969,0.62694,0.73451,-0.57735,0.57735,0.57735,-0.57735,-0.57735,0.57735,0.25969,-0.73451,-0.62694,-0.30151,-0.90453,0.30151,-0.57735,-0.57735,0.57735,-0.57735,-0.57735,-0.57735,-0.25969,-0.62694,0.73451,-0.62694,-0.25969,0.73451,-0.91018,-0.29289,-0.29289,-0.29289,-0.91018,-0.29289,-0.62694,0.73451,-0.25969,-0.25969,0.73451,-0.62694,-0.29289,-0.29289,-0.91018,-0.91018,-0.29289,-0.29289,0.73451,-0.25969,-0.62694,0.73451,-0.62694,-0.25969,-0.29289,-0.91018,-0.29289,-0.29289,-0.29289,-0.91018,-0.29289,-0.29289,-0.91018,-0.29289,-0.91018,-0.29289,-0.91018,-0.29289,-0.29289,0.57735,0.57735,0.57735,0.57735,0.57735,-0.57735,0.40825,0.40825,-0.8165,0.40825,0.40825,0.8165,0.57735,0.57735,-0.57735,0.57735,0.57735,0.57735,0.40825,0.40825,0.8165,0.40825,0.40825,-0.8165,0.57735,-0.57735,0.57735,0.57735,0.57735,0.57735,0.40825,0.8165,0.40825,0.40825,-0.8165,0.40825,0.57735,0.57735,0.57735,0.57735,-0.57735,0.57735,0.40825,-0.8165,0.40825,0.40825,0.8165,0.40825,-0.57735,0.57735,0.57735,0.57735,0.57735,0.57735,0.8165,0.40825,0.40825,-0.8165,0.40825,0.40825,0.57735,0.57735,0.57735,-0.57735,0.57735,0.57735,-0.8165,0.40825,0.40825,0.8165,0.40825,0.40825,0.57735,0.57735,-0.57735,0.40825,0.40825,-0.8165,-0.29289,-0.29289,-0.91018,-0.25969,0.73451,-0.62694,0.40825,0.40825,-0.8165,0.57735,0.57735,-0.57735,0.73451,-0.25969,-0.62694,-0.29289,-0.29289,-0.91018,-0.91018,-0.29289,-0.29289,-0.8165,0.40825,0.40825,-0.57735,0.57735,0.57735,-0.62694,0.73451,-0.25969,-0.57735,0.57735,0.57735,-0.8165,0.40825,0.40825,-0.91018,-0.29289,-0.29289,-0.62694,-0.25969,0.73451,0.40825,-0.8165,0.40825,0.57735,-0.57735,0.57735,-0.25969,-0.62694,0.73451,-0.29289,-0.91018,-0.29289,0.57735,-0.57735,0.57735,0.40825,-0.8165,0.40825,-0.29289,-0.91018,-0.29289,0.73451,-0.62694,-0.25969,0.57735,0.57735,0.57735,0.8165,0.40825,0.40825,0.57735,0.57735,0.57735,0.30151,0.90453,0.30151,0.8165,0.40825,0.40825,0.57735,0.57735,0.57735,0.30151,0.30151,0.90453,0.57735,0.57735,0.57735,0.57735,0.57735,0.57735,0.40825,0.8165,0.40825,0.57735,0.57735,0.57735,0.30151,0.30151,0.90453,0.57735,0.57735,0.57735,0.40825,0.8165,0.40825,0.57735,0.57735,0.57735,0.90453,0.30151,0.30151,0.40825,0.40825,0.8165,0.57735,0.57735,0.57735,0.30151,0.90453,0.30151,0.57735,0.57735,0.57735,0.57735,0.57735,0.57735,0.40825,0.40825,0.8165,0.57735,0.57735,0.57735,0.90453,0.30151,0.30151,0.57735,0.57735,0.57735,0.90453,0.30151,0.30151,0.73451,-0.25969,-0.62694,0.57735,0.57735,-0.57735,0.90453,0.30151,0.30151,0.73451,-0.62694,-0.25969,0.73451,-0.25969,-0.62694,0.57735,0.57735,0.57735,0.57735,-0.57735,0.57735,0.73451,-0.62694,-0.25969,0.90453,0.30151,0.30151,-0.62694,-0.25969,0.73451,-0.25969,-0.62694,0.73451,0.30151,0.30151,0.90453,-0.62694,-0.25969,0.73451,0.30151,0.30151,0.90453,0.57735,0.57735,0.57735,-0.57735,0.57735,0.57735,-0.62694,0.73451,-0.25969,-0.57735,0.57735,0.57735,0.57735,0.57735,0.57735,0.30151,0.90453,0.30151,-0.62694,0.73451,-0.25969,0.30151,0.90453,0.30151,-0.25969,0.73451,-0.62694,0.30151,0.30151,0.90453,-0.25969,-0.62694,0.73451,0.57735,-0.57735,0.57735,0.57735,0.57735,0.57735,-0.25969,0.73451,-0.62694,0.30151,0.90453,0.30151,0.57735,0.57735,0.57735,0.57735,0.57735,-0.57735,0.91018,-0.29289,-0.29289,0.62694,-0.25969,0.73451,0.25969,-0.62694,0.73451,0.29289,-0.91018,-0.29289,0.29289,-0.29289,-0.91018,0.25969,0.73451,-0.62694,0.62694,0.73451,-0.25969,0.91018,-0.29289,-0.29289,0.29289,-0.91018,-0.29289,-0.73451,-0.62694,-0.25969,-0.73451,-0.25969,-0.62694,0.29289,-0.29289,-0.91018,0.29289,-0.91018,-0.29289,0.29289,-0.29289,-0.91018,0.91018,-0.29289,-0.29289,-0.40825,0.40825,-0.8165,-0.57735,0.57735,-0.57735,-0.57735,0.57735,0.57735,-0.40825,0.40825,0.8165,-0.40825,0.40825,0.8165,-0.57735,0.57735,0.57735,-0.57735,0.57735,-0.57735,-0.40825,0.40825,-0.8165,-0.40825,0.8165,0.40825,-0.57735,0.57735,0.57735,-0.57735,-0.57735,0.57735,-0.40825,-0.8165,0.40825,-0.40825,-0.8165,0.40825,-0.57735,-0.57735,0.57735,-0.57735,0.57735,0.57735,-0.40825,0.8165,0.40825,-0.8165,0.40825,0.40825,-0.57735,0.57735,0.57735,0.57735,0.57735,0.57735,0.8165,0.40825,0.40825,0.8165,0.40825,0.40825,0.57735,0.57735,0.57735,-0.57735,0.57735,0.57735,-0.8165,0.40825,0.40825,0.29289,-0.29289,-0.91018,-0.40825,0.40825,-0.8165,-0.57735,0.57735,-0.57735,0.25969,0.73451,-0.62694,-0.73451,-0.25969,-0.62694,-0.57735,0.57735,-0.57735,-0.40825,0.40825,-0.8165,0.29289,-0.29289,-0.91018,0.57735,0.57735,0.57735,0.8165,0.40825,0.40825,0.91018,-0.29289,-0.29289,0.62694,0.73451,-0.25969,0.91018,-0.29289,-0.29289,0.8165,0.40825,0.40825,0.57735,0.57735,0.57735,0.62694,-0.25969,0.73451,0.25969,-0.62694,0.73451,-0.57735,-0.57735,0.57735,-0.40825,-0.8165,0.40825,0.29289,-0.91018,-0.29289,0.29289,-0.91018,-0.29289,-0.40825,-0.8165,0.40825,-0.57735,-0.57735,0.57735,-0.73451,-0.62694,-0.25969,-0.57735,0.57735,0.57735,-0.8165,0.40825,0.40825,-0.57735,0.57735,0.57735,-0.30151,0.90453,0.30151,-0.30151,0.30151,0.90453,-0.57735,0.57735,0.57735,-0.8165,0.40825,0.40825,-0.57735,0.57735,0.57735,-0.57735,0.57735,0.57735,-0.40825,0.8165,0.40825,-0.57735,0.57735,0.57735,-0.30151,0.30151,0.90453,-0.57735,0.57735,0.57735,-0.40825,0.8165,0.40825,-0.57735,0.57735,0.57735,-0.90453,0.30151,0.30151,-0.30151,0.90453,0.30151,-0.57735,0.57735,0.57735,-0.40825,0.40825,0.8165,-0.57735,0.57735,0.57735,-0.57735,0.57735,0.57735,-0.40825,0.40825,0.8165,-0.57735,0.57735,0.57735,-0.90453,0.30151,0.30151,-0.73451,-0.25969,-0.62694,-0.90453,0.30151,0.30151,-0.57735,0.57735,0.57735,-0.57735,0.57735,-0.57735,-0.73451,-0.62694,-0.25969,-0.90453,0.30151,0.30151,-0.73451,-0.25969,-0.62694,-0.73451,-0.62694,-0.25969,-0.57735,-0.57735,0.57735,-0.57735,0.57735,0.57735,-0.90453,0.30151,0.30151,0.25969,-0.62694,0.73451,0.62694,-0.25969,0.73451,-0.30151,0.30151,0.90453,-0.57735,0.57735,0.57735,-0.30151,0.30151,0.90453,0.62694,-0.25969,0.73451,0.57735,0.57735,0.57735,-0.57735,0.57735,0.57735,0.57735,0.57735,0.57735,0.62694,0.73451,-0.25969,-0.30151,0.90453,0.30151,-0.30151,0.90453,0.30151,0.62694,0.73451,-0.25969,0.25969,0.73451,-0.62694,-0.57735,-0.57735,0.57735,0.25969,-0.62694,0.73451,-0.30151,0.30151,0.90453,-0.57735,0.57735,0.57735,-0.57735,0.57735,0.57735,-0.30151,0.90453,0.30151,0.25969,0.73451,-0.62694,-0.57735,0.57735,-0.57735],
    "colors": [],
    "uvs": [[]],
    "faces": [35,9,8,4,5,0,0,1,2,3,35,1,13,6,4,0,4,5,6,7,35,17,16,5,6,0,8,9,10,11,34,6,5,4,0,12,13,14,35,22,18,12,26,0,15,16,17,18,35,14,30,26,12,0,19,20,21,22,35,15,23,27,11,0,23,24,25,26,35,21,10,11,27,0,27,28,29,30,35,7,19,25,3,0,31,32,33,34,35,29,2,3,25,0,35,36,37,38,35,14,12,6,13,0,39,40,41,42,35,12,18,17,6,0,43,44,45,46,35,4,3,2,1,0,47,48,49,50,35,7,3,4,8,0,51,52,53,54,35,11,10,9,5,0,55,56,57,58,35,15,11,5,16,0,59,60,61,62,35,29,25,0,28,0,63,64,65,66,35,25,19,20,0,0,67,68,69,70,35,21,27,0,20,0,71,72,73,74,35,0,27,23,24,0,75,76,77,78,35,26,30,28,0,0,79,80,81,82,35,22,26,0,24,0,83,84,85,86,35,22,24,17,18,0,87,88,89,90,34,24,16,17,0,91,92,93,35,23,15,16,24,0,94,95,96,97,34,8,9,20,0,98,99,100,35,8,20,19,7,0,101,102,103,104,35,1,2,29,28,0,105,106,107,108,34,1,28,13,0,109,110,111,35,20,9,10,21,0,112,113,114,115,35,13,28,30,14,0,116,117,118,119,35,35,39,40,36,0,120,121,122,123,35,37,44,32,35,0,124,125,126,127,35,36,47,48,37,0,128,129,130,131,34,36,37,35,0,132,133,134,35,43,49,53,57,0,135,136,137,138,35,57,61,45,43,0,139,140,141,142,35,58,54,46,42,0,143,144,145,146,35,42,41,52,58,0,147,148,149,150,35,56,50,38,34,0,151,152,153,154,35,34,33,60,56,0,155,156,157,158,35,37,43,45,44,0,159,160,161,162,35,48,49,43,37,0,163,164,165,166,35,33,34,35,32,0,167,168,169,170,35,35,34,38,39,0,171,172,173,174,35,40,41,42,36,0,175,176,177,178,35,36,42,46,47,0,179,180,181,182,35,31,56,60,59,0,183,184,185,186,35,51,50,56,31,0,187,188,189,190,35,31,58,52,51,0,191,192,193,194,35,54,58,31,55,0,195,196,197,198,35,59,61,57,31,0,199,200,201,202,35,31,57,53,55,0,203,204,205,206,35,48,55,53,49,0,207,208,209,210,34,47,55,48,0,211,212,213,35,47,46,54,55,0,214,215,216,217,34,40,39,51,0,218,219,220,35,50,51,39,38,0,221,222,223,224,35,60,33,32,59,0,225,226,227,228,34,59,32,44,0,229,230,231,35,41,40,51,52,0,232,233,234,235,35,61,59,44,45,0,236,237,238,239,35,66,70,71,67,0,240,241,242,243,35,68,75,63,66,0,244,245,246,247,35,67,78,79,68,0,248,249,250,251,34,67,68,66,0,252,253,254,35,74,80,84,88,0,255,256,257,258,35,88,92,76,74,0,259,260,261,262,35,89,85,77,73,0,263,264,265,266,35,73,72,83,89,0,267,268,269,270,35,87,81,69,65,0,271,272,273,274,35,65,64,91,87,0,275,276,277,278,35,68,74,76,75,0,279,280,281,282,35,79,80,74,68,0,283,284,285,286,35,64,65,66,63,0,287,288,289,290,35,66,65,69,70,0,291,292,293,294,35,71,72,73,67,0,295,296,297,298,35,67,73,77,78,0,299,300,301,302,35,62,87,91,90,0,303,304,305,306,35,82,81,87,62,0,307,308,309,310,35,62,89,83,82,0,311,312,313,314,35,85,89,62,86,0,315,316,317,318,35,90,92,88,62,0,319,320,321,322,35,62,88,84,86,0,323,324,325,326,35,79,86,84,80,0,327,328,329,330,34,78,86,79,0,331,332,333,35,78,77,85,86,0,334,335,336,337,34,71,70,82,0,338,339,340,35,81,82,70,69,0,341,342,343,344,35,91,64,63,90,0,345,346,347,348,34,90,63,75,0,349,350,351,35,72,71,82,83,0,352,353,354,355,35,92,90,75,76,0,356,357,358,359,35,102,101,97,98,0,360,361,362,363,35,94,106,99,97,0,364,365,366,367,35,110,109,98,99,0,368,369,370,371,34,99,98,97,0,372,373,374,35,115,111,105,119,0,375,376,377,378,35,107,123,119,105,0,379,380,381,382,35,108,116,120,104,0,383,384,385,386,35,114,103,104,120,0,387,388,389,390,35,100,112,118,96,0,391,392,393,394,35,122,95,96,118,0,395,396,397,398,35,107,105,99,106,0,399,400,401,402,35,105,111,110,99,0,403,404,405,406,35,97,96,95,94,0,407,408,409,410,35,100,96,97,101,0,411,412,413,414,35,104,103,102,98,0,415,416,417,418,35,108,104,98,109,0,419,420,421,422,35,122,118,93,121,0,423,424,425,426,35,118,112,113,93,0,427,428,429,430,35,114,120,93,113,0,431,432,433,434,35,93,120,116,117,0,435,436,437,438,35,119,123,121,93,0,439,440,441,442,35,115,119,93,117,0,443,444,445,446,35,115,117,110,111,0,447,448,449,450,34,117,109,110,0,451,452,453,35,116,108,109,117,0,454,455,456,457,34,101,102,113,0,458,459,460,35,101,113,112,100,0,461,462,463,464,35,94,95,122,121,0,465,466,467,468,34,94,121,106,0,469,470,471,35,113,102,103,114,0,472,473,474,475,35,106,121,123,107,0,476,477,478,479,35,128,132,133,129,0,480,481,482,483,35,130,137,125,128,0,484,485,486,487,35,129,140,141,130,0,488,489,490,491,34,129,130,128,0,492,493,494,35,136,142,146,150,0,495,496,497,498,35,150,154,138,136,0,499,500,501,502,35,151,147,139,135,0,503,504,505,506,35,135,134,145,151,0,507,508,509,510,35,149,143,131,127,0,511,512,513,514,35,127,126,153,149,0,515,516,517,518,35,130,136,138,137,0,519,520,521,522,35,141,142,136,130,0,523,524,525,526,35,126,127,128,125,0,527,528,529,530,35,128,127,131,132,0,531,532,533,534,35,133,134,135,129,0,535,536,537,538,35,129,135,139,140,0,539,540,541,542,35,124,149,153,152,0,543,544,545,546,35,144,143,149,124,0,547,548,549,550,35,124,151,145,144,0,551,552,553,554,35,147,151,124,148,0,555,556,557,558,35,152,154,150,124,0,559,560,561,562,35,124,150,146,148,0,563,564,565,566,35,141,148,146,142,0,567,568,569,570,34,140,148,141,0,571,572,573,35,140,139,147,148,0,574,575,576,577,34,133,132,144,0,578,579,580,35,143,144,132,131,0,581,582,583,584,35,153,126,125,152,0,585,586,587,588,34,152,125,137,0,589,590,591,35,134,133,144,145,0,592,593,594,595,35,154,152,137,138,0,596,597,598,599,35,164,163,159,160,0,600,601,602,603,35,156,168,161,159,0,604,605,606,607,35,172,171,160,161,0,608,609,610,611,34,161,160,159,0,612,613,614,35,177,173,167,181,0,615,616,617,618,35,169,185,181,167,0,619,620,621,622,35,170,178,182,166,0,623,624,625,626,35,176,165,166,182,0,627,628,629,630,35,162,174,180,158,0,631,632,633,634,35,184,157,158,180,0,635,636,637,638,35,169,167,161,168,0,639,640,641,642,35,167,173,172,161,0,643,644,645,646,35,159,158,157,156,0,647,648,649,650,35,162,158,159,163,0,651,652,653,654,35,166,165,164,160,0,655,656,657,658,35,170,166,160,171,0,659,660,661,662,35,184,180,155,183,0,663,664,665,666,35,180,174,175,155,0,667,668,669,670,35,176,182,155,175,0,671,672,673,674,35,155,182,178,179,0,675,676,677,678,35,181,185,183,155,0,679,680,681,682,35,177,181,155,179,0,683,684,685,686,35,177,179,172,173,0,687,688,689,690,34,179,171,172,0,691,692,693,35,178,170,171,179,0,694,695,696,697,34,163,164,175,0,698,699,700,35,163,175,174,162,0,701,702,703,704,35,156,157,184,183,0,705,706,707,708,34,156,183,168,0,709,710,711,35,175,164,165,176,0,712,713,714,715,35,168,183,185,169,0,716,717,718,719,35,195,194,190,191,0,720,721,722,723,35,187,199,192,190,0,724,725,726,727,35,203,202,191,192,0,728,729,730,731,34,192,191,190,0,732,733,734,35,208,204,198,212,0,735,736,737,738,35,200,216,212,198,0,739,740,741,742,35,201,209,213,197,0,743,744,745,746,35,207,196,197,213,0,747,748,749,750,35,193,205,211,189,0,751,752,753,754,35,215,188,189,211,0,755,756,757,758,35,200,198,192,199,0,759,760,761,762,35,198,204,203,192,0,763,764,765,766,35,190,189,188,187,0,767,768,769,770,35,193,189,190,194,0,771,772,773,774,35,197,196,195,191,0,775,776,777,778,35,201,197,191,202,0,779,780,781,782,35,215,211,186,214,0,783,784,785,786,35,211,205,206,186,0,787,788,789,790,35,207,213,186,206,0,791,792,793,794,35,186,213,209,210,0,795,796,797,798,35,212,216,214,186,0,799,800,801,802,35,208,212,186,210,0,803,804,805,806,35,208,210,203,204,0,807,808,809,810,34,210,202,203,0,811,812,813,35,209,201,202,210,0,814,815,816,817,34,194,195,206,0,818,819,820,35,194,206,205,193,0,821,822,823,824,35,187,188,215,214,0,825,826,827,828,34,187,214,199,0,829,830,831,35,206,195,196,207,0,832,833,834,835,35,199,214,216,200,0,836,837,838,839,35,221,225,226,222,0,840,841,842,843,35,223,230,218,221,0,844,845,846,847,35,222,233,234,223,0,848,849,850,851,34,222,223,221,0,852,853,854,35,229,235,239,243,0,855,856,857,858,35,243,247,231,229,0,859,860,861,862,35,244,240,232,228,0,863,864,865,866,35,228,227,238,244,0,867,868,869,870,35,242,236,224,220,0,871,872,873,874,35,220,219,246,242,0,875,876,877,878,35,223,229,231,230,0,879,880,881,882,35,234,235,229,223,0,883,884,885,886,35,219,220,221,218,0,887,888,889,890,35,221,220,224,225,0,891,892,893,894,35,226,227,228,222,0,895,896,897,898,35,222,228,232,233,0,899,900,901,902,35,217,242,246,245,0,903,904,905,906,35,237,236,242,217,0,907,908,909,910,35,217,244,238,237,0,911,912,913,914,35,240,244,217,241,0,915,916,917,918,35,245,247,243,217,0,919,920,921,922,35,217,243,239,241,0,923,924,925,926,35,234,241,239,235,0,927,928,929,930,34,233,241,234,0,931,932,933,35,233,232,240,241,0,934,935,936,937,34,226,225,237,0,938,939,940,35,236,237,225,224,0,941,942,943,944,35,246,219,218,245,0,945,946,947,948,34,245,218,230,0,949,950,951,35,227,226,237,238,0,952,953,954,955,35,247,245,230,231,0,956,957,958,959]
   } );
   return object.geometry;
}
SCMAP.SelectedSystemGeometry = SCMAP.SelectedSystemGeometry || _build_selected_system_object();

/**
* @author LiannaEeftinck / https://github.com/Leeft
*/

SCMAP.JumpPoint = function ( source, destination, name ) {
   this.name = typeof name === 'string' && name.length > 1 ? name : undefined;
   this.source = source instanceof SCMAP.System ? source : undefined;
   this.destination = destination instanceof SCMAP.System ? destination : undefined;
   this.is_valid = false;
   this.drawn = false;
   if ( this.source === undefined || this.destination === undefined || this.source === this.destination ) {
      console.error( "Invalid route created" );
   } else {
      this.is_valid = true;
      if ( this.name === undefined ) {
         this.name = "[" + this.source.name + " to " + this.destination.name + "]";
      }
   }
};

SCMAP.JumpPoint.prototype = {
   constructor: SCMAP.JumpPoint,
   length: function() {
      if ( !this.is_valid ) {
         return;
      }
      var vec = new THREE.Vector3();
      vec.subVectors( this.source.position, this.destination.position );
      return vec.length();
   },

   sceneObject: function() {
      var i, jumppoint, startColour, endColour, factor, length, geometry, midColour, routeObject;
      if ( this.drawn ) {
         return;
      }
      for ( i = 0; i < this.destination.jumppoints.length; i++ ) {
         jumppoint = this.destination.jumppoints[i];
         if ( jumppoint.destination == this.source ) {
            if ( jumppoint.drawn ) {
               return;
            }
         }
      }

      startColour = new THREE.Color( this.source.color );
      endColour = new THREE.Color( this.destination.color );
      factor = 1.0;

      length = this.source.position.clone().sub( this.destination.position ).length();

      geometry = new THREE.Geometry();
      geometry.dynamic = true;
      geometry.vertices.push( this.source.scenePosition );
      geometry.vertices.push( this.destination.scenePosition );
      startColour.setRGB( startColour.r * factor, startColour.g * factor, startColour.b * factor );
      endColour.setRGB( endColour.r * factor, endColour.g * factor, endColour.b * factor );
      midColour = startColour.clone().lerp( endColour, 0.5 );

      geometry.colors[0] = midColour; //startColour;
      geometry.colors[1] = midColour; //endColour;
      this.setDrawn();

      for ( i = 0; i < this.destination.jumppoints.length; i++ ) {
         jumppoint = this.destination.jumppoints[i];
         if ( jumppoint.destination == this.source ) {
            jumppoint.setDrawn();
         }
      }

      routeObject = new THREE.Line( geometry, SCMAP.JumpPoint.lineMaterial );
      this.source.routeObjects.push( routeObject );
      return routeObject;
   },

   setDrawn: function() {
      this.drawn = true;
   }
};

SCMAP.JumpPoint.lineMaterial = new THREE.LineBasicMaterial({ color: 0xCCCCCC, linewidth: 1.5, vertexColors: true });


/**
* @author LiannaEeftinck / https://github.com/Leeft
*/
// TODO: this is currently hardcoded, data should come from elsewhere ... very low priority for me though
SCMAP.Faction = function ( data ) {
   this.name = 'Unclaimed';
   this.isRealFaction = false;
   this.color = new THREE.Color( 0xFFFFFF );
   this.dark = new THREE.Color( 0x000000 );
   this.setValues( data );

   // Internals
   this.owns = [];
   this.material = undefined;
};

SCMAP.Faction.prototype = {
   constructor: SCMAP.Faction,

   // TODO: this might need some way of dealing with ownership changing
   claim: function ( system ) {
      if ( ! system instanceof SCMAP.System ) {
         new Error( "A faction can only claim ownership over a system" );
         return;
      }
      //system.setOwnership( this );
      this.owns.push( system );
   },

   getValue: function ( key ) {
      if ( key === undefined ) {
         return;
      }
      var value = this[ key ];
      return value;
   },

   setValues: function ( values ) {
      if ( values === undefined ) {
         return;
      }

      for ( var key in values ) {
         var newValue = values[ key ];
         if ( newValue === undefined ) {
            console.log( 'SCMAP.Faction: "' + key + '" parameter is undefined for "'+this.name+'"' );
            continue;
         }

         if ( key in this )
         {
            var currentValue = this[ key ];
            if ( currentValue instanceof THREE.Color ) {
               if ( newValue instanceof THREE.Color ) {
                  this[ key ] = newValue;
               } else {
                  this[ key ] = new THREE.Color( newValue );
               }
            } else {
               this[ key ] = newValue;
            }
         }
      }
   }
};

SCMAP.Faction.FACTIONS = {
   "UEE": new SCMAP.Faction({ name: 'United Empire of Earth', color: 0x90ABD9, dark: 0x000011, isRealFaction: true }),
   "VANDUUL": new SCMAP.Faction({ name: 'Vanduul', color: 0xF9B29C, dark: 0x110000, isRealFaction: true }),
   "XIAN": new SCMAP.Faction({ name: "Xi'An", color: 0xA4D49C, dark: 0x001100, isRealFaction: true }),
   "BANU": new SCMAP.Faction({ name: "Banu", color: 0xFFED9B, dark: 0x111100, isRealFaction: true }),
   "NONE": new SCMAP.Faction({ name: "Unclaimed", color: 0x666666, dark: 0x000000 }),
   "OTHER": new SCMAP.Faction({ name: "(Other)", color: 0xD1A4D0, dark: 0x110011 })
};

SCMAP.Faction.getByName = function ( name ) {
   var mapped;
   if ( name instanceof SCMAP.Faction ) {
      return name;
   }

   switch ( name.toUpperCase() )
   {
      case 'UNITED EMPIRE OF EARTH':
         mapped = 'UEE';
         break;
      case "XI'AN":
         mapped = 'XIAN';
         break;
      case "UNCLAIMED":
         mapped = 'NONE';
         break;

      default:
         mapped = name.toUpperCase();
   }

   var faction;
   if ( SCMAP.Faction.FACTIONS[ mapped ] instanceof SCMAP.Faction ) {
      faction = SCMAP.Faction.FACTIONS[ mapped ];
   } else {
      faction = SCMAP.Faction.FACTIONS.OTHER;
   }
   if ( typeof faction.material === 'undefined' ) {
      var newColor = faction.dark.clone();
      //newColor.multiplyScalar( 0.3 );
      faction.material = new THREE.MeshBasicMaterial({ color: newColor, vertexColors: false });
   }
   return faction;
};

// EOF


/**
* @author LiannaEeftinck / https://github.com/Leeft
*/

SCMAP.System = function ( data ) {
   // Filled in from the config
   this.iid = undefined;
   this.uuid = undefined;
   this.name = '';
   this.nickname = undefined;
   this.position = new THREE.Vector3();
   this.ownership = new SCMAP.Faction();
   this.size = 'medium';
   this.jumppoints = [];
   this.star_color = 'unknown';
   this.source = undefined;
   this.planets = 0;
   this.planetary_rotation = [];
   this.import = [];
   this.export = [];
   this.crime_status = '';
   this.black_market = [];
   this.description = [];
   this.uue_strategic_value = undefined;
   this.blob = [];

   this.setValues( data );

   // Internals -- For Dijkstra routing code
   this.distance = Number.MAX_VALUE *2;
   this.visited = false;
   this.parent = undefined;

   // Generated
   this.color = new THREE.Color( SCMAP.System.COLORS.UNKNOWN );
   this.sceneObjects = {};
   this.routeVertices = [];
   this.routeObjects = [];
   this.have_info = false;
   this.scale = 1.0;
   this.binary = false;
};

SCMAP.System.prototype = {
   constructor: SCMAP.System,

   buildObject: function () {
      var star, label, glow, object;

      star = new THREE.Mesh( SCMAP.System.MESH, this.starMaterial() );
      star.scale.set( this.scale, this.scale, this.scale );
      star.system = this;
      this.sceneObjects.mesh = star; // TODO Remove/replace

      object = new THREE.Object3D();

      if ( SCMAP.settings.glow ) {
         glow = new THREE.Sprite( this.glowMaterial() );
         glow.scale.set( SCMAP.System.GLOW_SCALE * this.scale, SCMAP.System.GLOW_SCALE * this.scale, 1.0 );
         glow.system = this;
         glow.isGlow = true;
         this.sceneObjects.glow = glow; // TODO Remove/replace
         object.add( this.sceneObjects.glow );
      }

      if ( SCMAP.settings.labels ) {
         label = new THREE.Sprite( this.labelMaterial() );
         label.position.set( 0, 3, 0 );
         label.scale.set( SCMAP.System.LABEL_SCALE * label.material.map.image.width, SCMAP.System.LABEL_SCALE * label.material.map.image.height, 1 );
         label.system = this;
         label.isLabel = true;
         this.sceneObjects.label = label; // TODO Remove/replace
         object.add( this.sceneObjects.label );
      }

      object.add( this.sceneObjects.mesh );
      object.position = this.position.clone();
      object.system = this;
      this.sceneObject = object;
      this.scenePosition = object.position; // TODO Remove/replace
      return object;
   },

   rotateAroundAxis: function ( axis, radians ) {
      var rotObjectMatrix = new THREE.Matrix4();
      rotObjectMatrix.makeRotationAxis( axis.normalize(), radians );
      this.sceneObject.matrix.multiply( rotObjectMatrix );
      this.sceneObject.rotation.setFromRotationMatrix( this.sceneObject.matrix );
//var euler = new THREE.Euler( axis.x, axis.y, axis.z, 'XYZ' );
//this.sceneObjects.rotation = euler;

      //for ( var i = 0; i < this.sceneObject.children.length; i++ ) {
      //   var obj = this.sceneObject.children[i];
      //   if ( obj.isGlow || obj.isLabel ) {
      //      obj.rotation.setFromRotationMatrix( rotObjectMatrix );
      //   }
      //}
      //this.sceneObjects.glow.rotation.setFromRotationMatrix( rotObjectMatrix );
      //this.sceneObjects.label.rotation.setFromRotationMatrix( rotObjectMatrix );
   },

   getColorByName: function ( color ) {
      color = color.toUpperCase();
      if ( typeof SCMAP.System.COLORS[ color ] !== 'undefined' ) {
         return SCMAP.System.COLORS[ color ];
      } else {
         return SCMAP.System.COLORS.UNKNOWN;
      }
   },

   starMaterial: function () {
      return SCMAP.System.STAR_MATERIAL_WHITE;
      //var color = this.star_color.toUpperCase();
      //if ( SCMAP.System[ 'STAR_MATERIAL_'+color ] instanceof THREE.MeshBasicMaterial ) {
      //   return SCMAP.System[ 'STAR_MATERIAL_'+color ];
      //} else {
      //   return SCMAP.System[ SCMAP.System.STAR_MATERIAL_UNKNOWN ];
      //}
   },

   glowMaterial: function () {
      var color = this.star_color.toUpperCase();
      if ( SCMAP.System[ 'GLOW_MATERIAL_'+color ] instanceof THREE.SpriteMaterial ) {
         return SCMAP.System[ 'GLOW_MATERIAL_'+color ];
      } else {
         return SCMAP.System[ SCMAP.System.GLOW_MATERIAL_UNKNOWN ];
      }
   },

   labelMaterial: function () {
      var canvas, context, texture, material;
      canvas = document.createElement('canvas');
      canvas.width = 300;
      canvas.height = 64;
      context = canvas.getContext('2d');
      context.font = "36pt Electrolize, sans-serif";
      context.textAlign = 'center';
      context.strokeStyle = 'rgba(0,0,0,0.95)';
      context.lineWidth = 5;
      context.strokeText( this.name, canvas.width / 2, 38 );
      context.fillStyle = "rgba(255,255,255,0.95)";
      //systemNameWidth = context.measureText( this.name ).width; // didn't get this to work yet
      context.fillText( this.name, canvas.width / 2, 38 );
      texture = new THREE.Texture( canvas ) ;
      texture.needsUpdate = true;
      material = new THREE.SpriteMaterial({ map: texture, useScreenCoordinates: false });
      return material;
   },

   createLink: function () {
      var _this = this, $line = $( '<a></a>' );
      if ( typeof _this.ownership !== 'undefined' && typeof _this.ownership !== 'undefined' ) {
         $line.css( 'color', new THREE.Color( _this.ownership.color ).getStyle() );
      }
      $line.attr( 'href', '#system='+encodeURI( _this.name ) );
      $line.attr( 'title', 'Show information on '+_this.name );
      $line.text( _this.name );
      $line.bind( 'click', function() {
         _this.displayInfo( _this );
         window.controls.goTo( _this.position );
         window.map.select( _this.name );
      } );
      return $line;
   },

   displayInfo: function ( system ) {
      if ( typeof system === 'undefined' ) { system = this; }

      var blurb = $('<div class="sc_system_info '+makeSafeForCSS(system.name)+'"></div>');
      var i;

      $('#systemname')
         .attr( 'class', makeSafeForCSS( system.ownership.name ) )
         .css( 'color', new THREE.Color( system.ownership.color ).getStyle() )
         .text( 'System: ' + system.name );

      var currentRoute = window.map.currentRoute();
      if ( currentRoute.length )
      {
         var partOfRoute = false;
         var currentStep = 0;

         for ( i = 0; i < currentRoute.length; i++ ) {
            if ( currentRoute[i] == system ) {
               partOfRoute = true;
               currentStep = i;
               break;
            }
         }

         if ( partOfRoute )
         {
            var header = [];

            if ( currentStep > 0 ) {
               var $prev = currentRoute[currentStep-1].createLink();
               //$prev.addClass( 'left' );
               $prev.attr( 'title', 'Previous jump to ' + currentRoute[currentStep-1].name +
                  ' (' + currentRoute[currentStep-1].ownership.name + ' territory)' );
               $prev.empty().append( '<i class="left fa fa-fw fa-arrow-left"></i>' );
               header.push( $prev );
            } else {
               header.push( $('<i class="left fa fa-fw"></i>') );
            }

            if ( currentStep < ( currentRoute.length - 1 ) ) {
               var $next = currentRoute[currentStep+1].createLink();
               //$next.addClass( 'right' );
               $next.attr( 'title', 'Next jump to ' + currentRoute[currentStep+1].name +
                  ' (' + currentRoute[currentStep+1].ownership.name + ' territory)'  );
               $next.empty().append( '<i class="right fa fa-fw fa-arrow-right"></i>' );
               header.push( $next );
            } else {
               header.push( $('<i class="right fa fa-fw"></i>') );
            }

            header.push( system.name );

            $('#systemname').empty().attr( 'class', makeSafeForCSS( system.ownership.name ) ).append( header );
         }
      }

      if ( ! system.have_info )
      {
         blurb.append( "<p><strong>No data available yet for '"+system.name+"'</strong></p>" );
      }
      else
      {
         var worlds = 'No inhabitable worlds',
             _import = '&mdash;',
             _export = '&mdash;',
             black_market = '&mdash;',
             strategic_value = 'Unknown',
             crime_status = 'Unknown',
             planets = 'Unknown',
             nickname,
             tmp = [];

         if ( system.planetary_rotation.length ) {
            worlds = system.planetary_rotation.join( ', ' );
         }

         if ( system.import.length ) {
            tmp = [];
            for ( i = 0; i < system.import.length; i++ ) {
               tmp.push( system.import[i].name );
            }
            _import = tmp.join( ', ' );
         }

         if ( system.export.length ) {
            tmp = [];
            for ( i = 0; i < system.export.length; i++ ) {
               tmp.push( system.export[i].name );
            }
            _export = tmp.join( ', ' );
         }

         if ( system.black_market.length ) {
            tmp = [];
            for ( i = 0; i < system.black_market.length; i++ ) {
               tmp.push( system.black_market[i].name );
            }
            black_market = tmp.join( ', ' );
         }

         if ( typeof system.planets === 'string' || typeof system.planets === 'number' ) {
            planets = system.planets;
         }

         if ( typeof system.crime_status === 'string' && system.crime_status.length ) {
            crime_status = system.crime_status;
         }

         if ( typeof system.uee_strategic_value === 'string' && system.uee_strategic_value.length ) {
            strategic_value = system.uee_strategic_value;
         }

         blurb.append( '<dl>' +
            ( ( typeof nickname === 'string' ) ? '<dt class="nickname">Nickname</dt><dd class="nickname">'+nickname+'</dd>' : '' ) +
            '<dt class="ownership">Ownership</dt><dd class="ownership">'+system.ownership.name+'</dd>' +
            '<dt class="planets">Planets</dt><dd class="planets">'+planets+'</dd>' +
            '<dt class="rotation">Planetary rotation</dt><dd class="rotation">'+worlds+'</dd>' +
            '<dt class="import">Import</dt><dd class="import">'+_import+'</dd>' +
            '<dt class="export">Export</dt><dd class="export">'+_export+'</dd>' +
            '<dt class="black_market">Black market</dt><dd class="crime">'+black_market+'</dd>' +
            '<dt class="crime_'+crime_status.toLowerCase()+'">Crime status</dt><dd class="crime">'+crime_status+'</dd>' +
            '<dt class="strategic_value_'+strategic_value.toLowerCase()+'">UEE strategic value</dt><dd class="strategic">'+strategic_value+'</dd>' +
         '</dl>' );

         blurb.append( markdown.toHTML( system.blob ) );

         if ( system.source ) {
            blurb.append( '<p class=""><a href="' + system.source + '" target="_blank">(source)</a></p>' );
         }
      }

      blurb.append( '<div id="destinations">' );

      $('#systemblurb').empty();
      $('#systemblurb').append( blurb );

      $('#map_ui').tabs( 'option', 'active', 0 );
      $('#map_ui').data( 'jsp' ).reinitialise();

   //   var text = new destinationSystem();
   //   var gui = new dat.GUI({ autoPlace: false });
   //   var customContainer = document.getElementById('destinations');
   //   customContainer.appendChild( gui.domElement );
   //// Choose from accepted values
   //gui.add(text, 'name', [ 'pizza', 'chrome', 'hooray' ] );

   //   var select = $('<select>').attr('id','destination').appendTo('#destinations');
   //   $( system.jumppoints ).each( function() {
   //      select.append( $('<option>').attr( 'value', system.destination.name ).text( system.destination.name ) );
   //   } );
   //
   //   $('<input>').attr( 'type', 'checkbox' ).attr( 'id', 'locked' ).appendTo('#destinations');
   },

   getValue: function ( key ) {
      if ( key === undefined ) {
         return;
      }
      var value = this[ key ];
      return value;
   },

   setValues: function ( values ) {
      if ( values === undefined ) {
         return;
      }

      for ( var key in values ) {
         var newValue = values[ key ];
         if ( newValue === undefined ) {
            console.log( 'SCMAP.System: "' + key + '" parameter is undefined for "'+this.name+'"' );
            continue;
         }

         if ( key in this )
         {
            var currentValue = this[ key ];

            if ( key == 'size' ) {
               switch ( newValue ) {
                  case 'dwarf': this.scale = 0.6; break;
                  case 'medium': this.scale = 1.0; break;
                  case 'large': this.scale = 1.25; break;
                  case 'giant': this.scale = 1.6; break;
                  case 'binary': this.scale = 1.6; this.binary = true; break;
               }
               this[ key ] = newValue;
            }
            if ( currentValue instanceof THREE.Color ) {
               if ( newValue instanceof THREE.Color ) {
                  this[ key ] = newValue;
               } else {
                  this[ key ] = new THREE.Color( this.getColorByName( newValue ) );
               }
            } else if ( currentValue instanceof SCMAP.Faction ) {
               this[ key ] = SCMAP.Faction.getByName( newValue );
            } else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {
               currentValue.copy( newValue );
            } else {
               this[ key ] = newValue;
            }

            if ( key == 'star_color' && typeof this.star_color == 'string' ) {
               this.color = new THREE.Color( this.getColorByName( this.star_color ) );
            }
         }
      }
   }
};

SCMAP.System.COLORS = {
   RED: 0xFF6060,
   BLUE: 0x6060FF,
   WHITE: 0xFFFFFF,
   YELLOW: 0xFFFF60,
   ORANGE: 0xF0F080,
   UNKNOWN: 0xC0FFC0
};
SCMAP.System.LABEL_SCALE = 0.06;
SCMAP.System.GLOW_SCALE = 6;
SCMAP.System.MESH = new THREE.SphereGeometry( 1, 12, 12 );
//
SCMAP.System.STAR_MATERIAL_RED = new THREE.MeshBasicMaterial({ color: SCMAP.System.COLORS.RED, name: 'STAR_MATERIAL_RED' });
SCMAP.System.STAR_MATERIAL_BLUE = new THREE.MeshBasicMaterial({ color: SCMAP.System.COLORS.BLUE, name: 'STAR_MATERIAL_BLUE' });
SCMAP.System.STAR_MATERIAL_WHITE = new THREE.MeshBasicMaterial({ color: SCMAP.System.COLORS.WHITE, name: 'STAR_MATERIAL_WHITE' });
SCMAP.System.STAR_MATERIAL_YELLOW = new THREE.MeshBasicMaterial({ color: SCMAP.System.COLORS.YELLOW, name: 'STAR_MATERIAL_YELLOW' });
SCMAP.System.STAR_MATERIAL_ORANGE = new THREE.MeshBasicMaterial({ color: SCMAP.System.COLORS.ORANGE, name: 'STAR_MATERIAL_ORANGE' });
SCMAP.System.STAR_MATERIAL_UNKNOWN = new THREE.MeshBasicMaterial({ color: SCMAP.System.COLORS.UNKNOWN, name: 'STAR_MATERIAL_UNKNOWN' });
//
SCMAP.System.GLOW_MAP = new THREE.ImageUtils.loadTexture( $('#gl-info').data('glow-image') );
SCMAP.System.GLOW_MATERIAL_RED =     new THREE.SpriteMaterial({ map: SCMAP.System.GLOW_MAP, blending: THREE.AdditiveBlending, color: SCMAP.System.COLORS.RED     });
SCMAP.System.GLOW_MATERIAL_BLUE =    new THREE.SpriteMaterial({ map: SCMAP.System.GLOW_MAP, blending: THREE.AdditiveBlending, color: SCMAP.System.COLORS.BLUE    });
SCMAP.System.GLOW_MATERIAL_WHITE =   new THREE.SpriteMaterial({ map: SCMAP.System.GLOW_MAP, blending: THREE.AdditiveBlending, color: SCMAP.System.COLORS.WHITE   });
SCMAP.System.GLOW_MATERIAL_YELLOW =  new THREE.SpriteMaterial({ map: SCMAP.System.GLOW_MAP, blending: THREE.AdditiveBlending, color: SCMAP.System.COLORS.YELLOW  });
SCMAP.System.GLOW_MATERIAL_ORANGE =  new THREE.SpriteMaterial({ map: SCMAP.System.GLOW_MAP, blending: THREE.AdditiveBlending, color: SCMAP.System.COLORS.ORANGE  });
SCMAP.System.GLOW_MATERIAL_UNKNOWN = new THREE.SpriteMaterial({ map: SCMAP.System.GLOW_MAP, blending: THREE.AdditiveBlending, color: SCMAP.System.COLORS.UNKNOWN });
// EOF

/**
* @author LiannaEeftinck / https://github.com/Leeft
*/

function isInfinite ( num ) {
   return !isFinite( num );
}

SCMAP.Dijkstra = function ( map ) {
   if ( ! ( map instanceof SCMAP.Map ) ) {
      console.error( "No map specified to SCMAP.Dijkstra constructor!" );
      return;
   }

   this.scene = map.scene;
   this.results = [];
   this.object = undefined;
   this.source = undefined;
   this.destination = undefined;
};

SCMAP.Dijkstra.prototype = {
   constructor: SCMAP.Dijkstra,

   createRouteObject: function() {
      this.destroyRoute();
      this.object = new THREE.Object3D();
      return this.object;
   },

   destroyRoute: function() {
      if ( this.object instanceof THREE.Object3D ) {
         this.scene.remove( this.object );
         this.object = undefined;
      }
   },

   destroyGraph: function() {
      this.destroyRoute();
      this.results = [];
      this.source = undefined;
      this.destination = undefined;
   },

   buildGraph: function( initialNode ) {
      var endTime, startTime = new Date();

      this.source = initialNode;
      console.log( 'Building graph starting at ' + initialNode.name + ' ...' );

      // Built using:
      // http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm#Pseudocode

      for ( var k = 0; k < map.systems.length; k++ ) {
         map.systems[k].distance = Number.POSITIVE_INFINITY;
         map.systems[k].parent = null;
      }

      var currentSystem = initialNode;
      currentSystem.distance = 0;
      currentSystem.parent = null;

      var unvisited = map.systems.slice(0); // Make a copy
      unvisited = SCMAP.Dijkstra.quickSort( unvisited );

      //var distance = 0;
      var currentIndex = 0;

      while ( unvisited.length >= 1 )
      {
         currentSystem = unvisited[0];
         // Remove currentSystem from unvisited set
         unvisited.splice( 0, 1 );

         if ( isInfinite( currentSystem.distance ) ) {
            break;
         }

         for ( var i = 0; i < currentSystem.jumppoints.length; i++ )
         {
            var alt = currentSystem.distance + currentSystem.jumppoints[i].length();

            if ( alt < currentSystem.jumppoints[i].destination.distance ) {
               currentSystem.jumppoints[i].destination.distance = alt;
               currentSystem.jumppoints[i].destination.parent = currentSystem;
               unvisited = SCMAP.Dijkstra.quickSort( unvisited );
            }
         }
      }

      this.results = map.systems;
      endTime = new Date();
      console.log( "Graph building took " + (endTime.getTime() - startTime.getTime()) + " msec" );
   },

   routeArray: function( target ) {
      if ( ! ( target instanceof SCMAP.System ) ) {
         console.error( 'No or invalid target specified.' );
         return ;
      }
      if ( this.results.length > 0 ) {
         this.destination = target;
         // Get path and print it out, we're traversing backwards through the optimal path for the target
         var route = [];
         var currentNode = target;
         var visited = [];
         var x = currentNode;
         var seen = {};
         while ( x !== null ) {
            seen[ x.name ] = true;
            visited.push( x );
            x = x.parent;
         }
         visited.reverse();
         return visited;
      }
   }
};

SCMAP.Dijkstra.quickSort = function ( systems ) {
   var array = systems.slice(0); // makes a copy, prevents overwriting

   if ( array.length <= 1 ) {
      return array;
   }

   var lhs = [];
   var rhs = [];
   var pivot = Math.ceil( array.length / 2 ) - 1;

   pivot = array.splice( pivot, 1 )[0];

   for ( var i = 0; i < array.length; i++ ) {
      if ( array[i].distance <= pivot.distance ) {
         lhs.push( array[i] );
      } else {
         rhs.push( array[i] );
      }
   }

   var t1 = SCMAP.Dijkstra.quickSort( lhs );
   var t2 = SCMAP.Dijkstra.quickSort( rhs );

   t1.push( pivot );
   return t1.concat( t2 );
};

// End of file


/**
* @author LiannaEeftinck / https://github.com/Leeft
*/

SCMAP.Map = function ( scene, mapdata ) {
   this.name = "Star Citizen 'Verse";
   this.scene = scene;
   this.mapdata = typeof mapdata === 'object' ? mapdata : {};
   this.route = undefined;
   this.graph = new SCMAP.Dijkstra( this );

   this.systemsByName = {};
   this.systems = [];
   this.selector = this.createSelector();
   this.selected = undefined;
   this.selectedTarget = undefined;
   this.scene.add( this.selector );
   this.group = undefined;
   this.interactables = [];
   this.referencePlane = undefined;

   // No editing available for the moment (doesn't work yet)
   this.canEdit = false;
   $('#map_ui li.editor').hide();

   if ( Object.keys( mapdata ).length ) {
      this.populateScene();
   }
};

SCMAP.Map.prototype = {
   constructor: SCMAP.Map,

   createSelector: function () {
      var material = new THREE.MeshBasicMaterial( { color: 0xCCCCCC } );
      material.transparent = true;
      material.blending = THREE.AdditiveBlending;
      var mesh = new THREE.Mesh( SCMAP.SelectedSystemGeometry, material );
      mesh.scale.set( 4, 4, 4 );
      mesh.visible = false;
      return mesh;
   },

   system: function ( name ) {
      return this.systemsByName[ name ];
   },

   select: function ( system ) {
      if ( system instanceof SCMAP.System ) {
         this.selector.position = system.sceneObject.position;
         this.selector.visible = true;
         this.selected = system;
      } else {
         this.selector.visible = false;
         this.selected = undefined;
      }
      $('#routelist').empty();
   },

   deselect: function ( ) {
      this.selector.visible = false;
      this.selected = undefined;
   },

   animateSelector: function ( ) {
      if ( this.selector.visible ) {
         this.selector.rotation.y = THREE.Math.degToRad( Date.now() * 0.00025 ) * 200;
      }
   },

   handleSelection: function ( event, intersect ) {

      if ( typeof intersect !== 'object' ) {
         return;
      }

      var modifierPressed = ( event.shiftKey || event.ctrlKey ) ? true : false;

      if ( event.type === 'mouseup' )
      {
         if ( ! window.editor.enabled )
         {
            if ( ! modifierPressed )
            {
               if ( this.selected instanceof SCMAP.System && intersect.object.system instanceof SCMAP.System ) {
                  if ( intersect.object.system === this.selected ) {
                     //if ( $('#systemname').text() != intersect.object.system.name ) {
                        this.select( intersect.object.system );
                        intersect.object.system.displayInfo();
                     //}
                  }
               }
            }
            else
            {
               this.updateRoute( intersect.object.system );
            }
         }
      }
      else if ( event.type === 'mousedown' )
      {
         if ( window.editor.enabled )
         {
            if ( ! event.altKey && typeof intersect.object.system === 'object' ) {

               // if in edit mode, and the targeted object is already selected, start dragging
               // otherwise, select it
               if ( this.selected instanceof SCMAP.System &&
                    intersect.object.system instanceof SCMAP.System &&
                    this.selected == intersect.object.system
               ) {
                  window.controls.editDrag = true;
               } else {
                  this.select( intersect.object.system );
                  window.controls.editDrag = false;
               }
            }
         }
         else
         {
            if ( modifierPressed ) {
               this.selectedTarget = intersect.object.system;
            } else {
               this.selected = intersect.object.system;
            }
         }
      }
   },

   currentRoute: function () {
      if ( this.selectedTarget instanceof SCMAP.System ) {
         return this.graph.routeArray( this.selectedTarget );
      }
      return [];
   },

   updateRoute: function ( destination ) {
      var i, route, mesh, line, material, group, from_system, $entry;

      this.graph.destroyRoute();
      this.graph.buildGraph( this.selected );
      this.selectedTarget = destination;
      route = this.graph.routeArray( destination );

      material = new THREE.LineBasicMaterial( { color: 0xFF00FF, linewidth: 2.5 } );
      group = this.graph.createRouteObject(); // all the parts of the route together in a single geometry group
      for ( i = 0; i < route.length - 1; i++ ) {
         mesh = this.createRouteMesh( route[i+0], route[i+1] );
         line = new THREE.Line( mesh, material );
         line.position = route[i+0].sceneObject.position;
         line.lookAt( route[i+1].sceneObject.position );
         group.add( line );
      }

      this.scene.add( group );

      $('#routelist').empty();
      $('#routelist').append('<p>The shortest route from '+route[0].name+' to ' +
         route[route.length-1].name+' along <strong>' + (route.length - 1) +
         '</strong> jump points:</p>').append( '<ol class="routelist"></ol>' );

      for ( i = 0; i < route.length; i++ ) {
         from_system = route[i+0];
         $entry = $( '<li></li>' ).append( from_system.createLink() );
         $('#routelist ol').append( $entry );
         $('#map_ui').tabs( 'option', 'active', 1 );
      }
   },

   createRouteMesh: function ( source, destination ) {
      var step = 2 * Math.PI / 16,
          zstep = 0.5,
          radius = 0.5,
          geometry = new THREE.Geometry(),
          distance = source.position.distanceTo( destination.sceneObject.position ),
          z = 0, theta, x, y;

      for ( theta = 0; z < distance; theta += step )
      {
         x = radius * Math.cos( theta );
         y = 0 - radius * Math.sin( theta );
         geometry.vertices.push( new THREE.Vector3( x, y, z ) );
         z += zstep;
      }
      return geometry;
   },

   populateScene: function ( mapdata ) {
      var territory, territoryName, routeMaterial, system, systemName,
         source, destinations, destination, geometry,
         data, starSystemObject, jumpPoint, faction,
         endTime, startTime,
         i, systems, exports, black_markets, systemInfo, imports;

      endTime = startTime = new Date();

      // TODO: clean up the existing scene and mapdata when populating with
      // new data

      this.mapdata = typeof mapdata === 'object' ? mapdata : this.mapdata;
      this.systems = [];
      this.systemsByName = {};

      // First we go through the data to build the basic systems so
      // the routes can be built as well

      for ( territoryName in this.mapdata )
      {
         territory = this.mapdata[ territoryName ];

         faction = SCMAP.Faction.getByName( territoryName );

         for ( systemName in territory.systems )
         {
            data = territory.systems[ systemName ];
            if (typeof data.scale !== 'number' ) {
               data.scale = 1.0;
            }

            system = new SCMAP.System({
               name: systemName,
               position: new THREE.Vector3( data.coords[0], data.coords[1], data.coords[2] ),
               scale: data.scale,
               color: territory.color,
               ownership: faction
            });

            systemInfo = SCMAP.data.systems[ systemName ];
            if ( typeof systemInfo === 'object' ) {
               imports = [];
               exports = [];
               black_markets = [];
               for ( i = 0; i < systemInfo['import'].length; i++ ) {
                  imports.push( SCMAP.data.goods[ systemInfo.import[i] ] );
               }
               for ( i = 0; i < systemInfo['export'].length; i++ ) {
                  exports.push( SCMAP.data.goods[ systemInfo.export[i] ] );
               }
               for ( i = 0; i < systemInfo.black_market.length; i++ ) {
                  black_markets.push( SCMAP.data.goods[ systemInfo.black_market[i] ] );
               }
               system.setValues({
                  'nickname': systemInfo.nick,
                  'star_color': systemInfo.color,
                  'size': systemInfo.size,
                  'source': systemInfo.source,
                  'crime_status': SCMAP.data.crime_levels[ systemInfo.crime ].name,
                  'uee_strategic_value': SCMAP.data.uee_strategic_values[ systemInfo.uee_sv ].color,
                  'import': imports,
                  'export': exports,
                  'black_market': black_markets,
                  'blob': systemInfo.blob,
                  'planets': 0,
                  'planetary_rotation': [],
                  'have_info': true
               });
            }

            faction.claim( system ); // assign ownership to this faction

            this.systemsByName[ systemName ] = system;
            this.systems.push( system );

            starSystemObject = system.buildObject();
            this.scene.add( starSystemObject );
            this.interactables.push( system.sceneObjects.mesh );
         }
      }

      // Then we go through again and add the routes

      for ( territoryName in this.mapdata )
      {
         territory = this.mapdata[ territoryName ];

         for ( systemName in territory.known_routes )
         {
            if ( this.system( systemName ) === undefined ) {
               console.log( "Territory '"+territoryName+"' space route: can't find the source system '"+systemName+"'" );
               continue;
            }

            source = this.system( systemName );

            destinations = territory.known_routes[ systemName ];

            for ( i = 0; i < destinations.length; i++ )
            {
               destination = this.system( destinations[i] );
               if ( destination === undefined ) {
                  console.log( territoryName+" space route from "+systemName+
                     " can't find the destination system '"+destinations[i]+"'" );
                  continue;
               }

               jumpPoint = new SCMAP.JumpPoint( source, destination );
               var jumpObject = jumpPoint.sceneObject();
               if ( jumpObject instanceof THREE.Object3D ) {
                  this.scene.add( jumpObject );
               }
               source.jumppoints.push( jumpPoint );
               // for now, add another route the other way as well (we're making
               // the crude assumption that jumppoints are bi-directional
               destination.jumppoints.push( new SCMAP.JumpPoint( destination, source ) );
            }
         }
      }

      endTime = new Date();
      console.log( "Populating the scene (without ref plane) took " +
         (endTime.getTime() - startTime.getTime()) + " msec" );

      this.buildReferencePlane();
      //this.referencePlaneSolidColor( new THREE.Color( 0x000000 ) );
      this.referencePlaneTerritoryColor();
   },

   closestPOI: function ( vector ) {
      var closest = Infinity, closestPOI, system, length, systemname, xd, zd;

      for ( systemname in this.systemsByName ) {
         system = this.systemsByName[ systemname ];
         xd = vector.x - system.sceneObject.position.x;
         zd = vector.z - system.sceneObject.position.z;
         length = Math.sqrt( xd * xd + zd * zd );
         if ( length < closest ) {
            closest = length;
            closestPOI = system;
         }
      }

      return [ closest, closestPOI ];
   },

   furthestPOI: function ( vector ) {
      var furthest = 0, furthestPOI, system, length, systemname, xd, zd;

      for ( systemname in this.systemsByName ) {
         system = this.systemsByName[ systemname ];
         xd = vector.x - system.sceneObject.position.x;
         zd = vector.z - system.sceneObject.position.z;
         length = Math.sqrt( xd * xd + zd * zd );
         if ( length > furthest ) {
            furthest = length;
            furthestPOI = system;
         }
      }
      return [ furthest, furthestPOI ];
   },

   referencePlaneTerritoryColor: function() {
      if ( ! this.referencePlane instanceof THREE.Object3D ) {
         return;
      }
      var geometry = this.referencePlane.geometry,
         minDistance = 35;
      for ( var i = 0; i < geometry.vertices.length; i++ )
      {
         var point = geometry.vertices[ i ];
         var arr = this.closestPOI( point );
         var distance = arr[0], closest = arr[1];
         if ( distance > minDistance ) { distance = minDistance; }
         //color = closest.ownership.color.clone();
         var color = closest.ownership.color.clone();
         var strength = ( minDistance - distance ) / minDistance;
         color.setRGB( strength * color.r * 0.8, strength * color.g * 0.8, strength * color.b * 0.8 );
         //color.setRGB( strength * color.r, strength * color.g, strength * color.b );
         //color.setRGB( strength * color.r * 1.2, strength * color.g * 1.2, strength * color.b * 1.2 );
         geometry.colors[i] = color;
      }
   },

   referencePlaneSolidColor: function( color ) {
      var geometry = this.referencePlane.geometry,
         i, point;
      if ( ! this.referencePlane instanceof THREE.Object3D ) {
         return;
      }
      for ( i = 0; i < geometry.vertices.length; i++ ) {
         point = geometry.vertices[ i ];
         geometry.colors[i] = color;
      }
   },

   pointAtPlane: function( theta, radius, y ) {
      return new THREE.Vector3( radius * Math.cos( theta ), y, -radius * Math.sin( theta ) );
   },

   referencePlaneTerritoryColourMesh: function( ownership, prevTheta, nextTheta, innerRadius, outerRadius )
   {
      var geo, mesh;
      geo = new THREE.Geometry();
      geo.vertices.push( this.pointAtPlane( prevTheta, innerRadius, -0.04 ) );
      geo.vertices.push( this.pointAtPlane( nextTheta, innerRadius, -0.04 ) );
      geo.vertices.push( this.pointAtPlane( nextTheta, outerRadius, -0.04 ) );
      geo.vertices.push( this.pointAtPlane( prevTheta, outerRadius, -0.04 ) );
      geo.faces.push( new THREE.Face3( 2, 1, 0 ) );
      geo.faces.push( new THREE.Face3( 3, 2, 0 ) );
      mesh = new THREE.Mesh( geo, ownership.material );
      return mesh;
   },

   buildReferencePlane: function()
   {
      var ringWidth = 10.0, // plane circle scaling factor to match the map video
         step = 2 * Math.PI / 36, // 36 radial segments
         radius, insideRadius, outsideRadius,
         lineMaterial, referenceLines, lineGeometry,
         centerTheta, cosPrevTheta, sinPrevTheta, cosCenterTheta, sinCenterTheta,
         xInside, zInside, xOutside, zOutside, zInside2, xOutside2, zOutside2,
         maxRadius, arr,
         endTime, startTime,
         referenceColours = new THREE.Object3D(), prevTheta, nextTheta, i;

      endTime = startTime = new Date();

      // Work out how far away the furtest system is
      // so that we can stop drawing just beyond that
      // point
      arr = this.furthestPOI( new THREE.Vector3() );
      maxRadius = arr[0] + 50;

      lineMaterial = new THREE.LineBasicMaterial({
         color: 0xA0A0A0,
         linewidth: 1.5,
         vertexColors: true,
         opacity: 0.6
      } );
      lineGeometry = new THREE.Geometry();

      // Around in a circle, processing each center point of the
      // squares we'll be drawing (dividing our step by 2 makes it
      // the center point)
      var theta;
      for ( centerTheta = step / 2; centerTheta < 2 * Math.PI; centerTheta += step )
      {
         cosCenterTheta = Math.cos( centerTheta );
         sinCenterTheta = Math.sin( centerTheta );

         prevTheta = centerTheta - step / 2;
         nextTheta = centerTheta + step / 2;
         cosPrevTheta = Math.cos( prevTheta );
         sinPrevTheta = Math.sin( prevTheta );

         // inside to out, stop at furthest out
         for ( radius = ringWidth / 2; radius < maxRadius; radius += ringWidth )
         {
            insideRadius  = radius - ringWidth / 2;
            outsideRadius = radius + ringWidth / 2;
            arr = this.closestPOI( new THREE.Vector3( radius * cosCenterTheta, 0, -radius * sinCenterTheta ) );

            if ( arr[0] <= 35 )
            {
               referenceColours.add(
                  this.referencePlaneTerritoryColourMesh(
                     arr[1].ownership, prevTheta, nextTheta, insideRadius, outsideRadius
                  )
               );
            }

            if ( arr[0] < 55 )
            {
               xInside  =  insideRadius  * cosPrevTheta;
               zInside  = -insideRadius  * sinPrevTheta;
               xOutside =  outsideRadius * cosPrevTheta;
               zOutside = -outsideRadius * sinPrevTheta;
               lineGeometry.vertices.push( new THREE.Vector3( xInside,  0, zInside  ) );
               lineGeometry.vertices.push( new THREE.Vector3( xOutside, 0, zOutside ) );
               lineGeometry.vertices.push( new THREE.Vector3( xInside,  0, zInside  ) );
               lineGeometry.vertices.push( new THREE.Vector3(
                  insideRadius * Math.cos( nextTheta ), 0, -insideRadius * Math.sin( nextTheta )
               ) );
            }
         }
      }

      // set basic color
      for ( i = 0; i < lineGeometry.vertices.length; i++ ) {
         lineGeometry.colors[i] = lineMaterial.color;
      }

      // and create the ground reference plane
      referenceLines = new THREE.Line( lineGeometry, lineMaterial, THREE.LinePieces );
      this.referencePlane = referenceLines;
      scene.add( referenceLines );

      scene.add( referenceColours );

      endTime = new Date();
      console.log( "Building the territory reference plane took " +
         (endTime.getTime() - startTime.getTime()) + " msec" );
   }
};


var effectFXAA, camera, scene, renderer, composer, map,
   shift, ctrl, alt, controls, editor, stats, displayState;

$(function() {
   $( "#map_ui" ).tabs({
      active: 0,
      activate: function( event, ui ) {
         event.preventDefault();
         var clicked_on = ui.newTab.find('a').attr('href');
         if ( clicked_on === '#editor' && map.canEdit ) {
            $('#webgl-container').removeClass().addClass( 'noselect webgl-container-edit' );
            window.editor.enabled = true;
            window.controls.requireAlt = true;
         } else {
            $('#webgl-container').removeClass().addClass( 'noselect webgl-container-noedit' );
            window.editor.enabled = false;
            window.controls.requireAlt = false;
            if ( clicked_on === '#info' && typeof map.selected !== 'undefined' && typeof map.selected.object !== 'undefined' ) {
               map.selected.object.system.displayInfo();
            }
         }
         $('#map_ui').data( 'jsp' ).reinitialise();
      }
   });

   /* jScrollPane */
   $('#map_ui').jScrollPane({ showArrows: true });

   if ( ! Detector.webgl ) {
      Detector.addGetWebGLMessage();
   }

   init();
   animate();
});

function init()
{
   var container, renderModel, effectCopy, effectBloom, width, height;

   container = document.createElement( 'div' );
   container.id = 'webgl-container';
   container.className = 'noselect webgl-container-noedit';
   document.body.appendChild( container );
   width = window.innerWidth || 2;
   height = window.innerHeight || 2;

   camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 10000 );

   camera.position.y = 80;
   camera.position.z = 100;
   camera.setViewOffset( width, height, 0, - ( height / 6 ), width, height );

   controls = new THREE.OrbitControlsFSM( camera, $('#webgl-container')[0] );
   controls.rotateSpeed = $('#gl-info').data('rotateSpeed');
   controls.zoomSpeed = $('#gl-info').data('zoomSpeed');
   controls.panSpeed = $('#gl-info').data('panSpeed');
   controls.noZoom = false;
   controls.noPan = false;
   controls.mapMode = true;
   controls.minDistance = 20;
   controls.maxDistance = 500;
   controls.keyPanSpeed = 25;
   controls.minPolarAngle = 0;
   controls.maxPolarAngle = THREE.Math.degToRad( 85 );
	controls.target = new THREE.Vector3( 0, 10, 0 );
   controls.addEventListener( 'change', render );

   scene = new THREE.Scene();

   renderer = new THREE.WebGLRenderer( { clearColor: 0x000000, clearAlpha: 1, antialias: true } );
   renderer.setSize( window.innerWidth, window.innerHeight );
   renderer.autoClear = false;
   container.appendChild( renderer.domElement );

   map = new SCMAP.Map( scene, SCMAP.data.map );
   controls.map = map;

   editor = new SCMAP.Editor( map, camera );
   editor.panSpeed = 0.6;
   document.addEventListener( 'change', render );

   // Stats

   stats = new Stats();
   stats.domElement.style.position = 'absolute';
   stats.domElement.style.top = '0px';
   stats.domElement.style.right = '0px';
   stats.domElement.style.display = 'none';
   stats.domElement.style.zIndex = '100';
   container.appendChild( stats.domElement );

   // Event handlers

   window.addEventListener( 'resize', onWindowResize, false );

   renderer.domElement.addEventListener( 'mousedown', onDocumentMouseUpAndDown, false );
   renderer.domElement.addEventListener( 'mouseup', onDocumentMouseUpAndDown, false );

   // Rendering

   renderModel = new THREE.RenderPass( scene, camera );
   effectBloom = new THREE.BloomPass( 0.75 );

   effectCopy = new THREE.ShaderPass( THREE.CopyShader );
   effectCopy.renderToScreen = true;

   effectFXAA = new THREE.ShaderPass( THREE.FXAAShader );
   effectFXAA.uniforms.resolution.value.set( 1 / width, 1 / height );

   effectFXAA.enabled = false;
   effectBloom.enabled = false;

   composer = new THREE.EffectComposer( renderer );
   composer.addPass( renderModel );
   composer.addPass( effectFXAA );
   composer.addPass( effectBloom );
   composer.addPass( effectCopy );

   displayState = buildDisplayModeFSM( '3d' ); // TODO get current state for user on load

   $('#3d-mode').on( 'change', function() {
      if ( this.checked ) {
         displayState.thick();
      } else {
         displayState.thin();
      }
   });

   $('#lock-rotation').on( 'change', function() {
      controls.noRotate = this.checked;
   });

   $('#toggle-fxaa').on( 'change', function() {
      effectFXAA.enabled = this.checked;
   });

   $('#toggle-bloom').on( 'change', function() {
      effectBloom.enabled = this.checked;
   });
}

function buildCross () {
   var material = new THREE.MeshBasicMaterial( { wireframe: true, color: 0xFF0000, linewidth: 1 } );
   var group = new THREE.Object3D();
   var geo = new THREE.Geometry();
   geo.vertices.push( new THREE.Vector3( -50, 1, 0 ) );
   geo.vertices.push( new THREE.Vector3( 50, 1, 0 ) );
   var cross = new THREE.Line( geo, material );
   group.add( cross );
   geo = new THREE.Geometry();
   var material2 = new THREE.MeshBasicMaterial( { wireframe: true, color: 0xF0F000, linewidth: 1 } );
   geo.vertices.push( new THREE.Vector3( 0, 1, -50 ) );
   geo.vertices.push( new THREE.Vector3( 0, 1, 50 ) );
   cross = new THREE.Line( geo, material2 );
   group.add( cross );
   var material3 = new THREE.MeshBasicMaterial( { wireframe: true, color: 0x0000F0, linewidth: 1 } );
   geo = new THREE.Geometry();
   geo.vertices.push( new THREE.Vector3( 0, -50, 0 ) );
   geo.vertices.push( new THREE.Vector3( 0, 50, 0 ) );
   cross = new THREE.Line( geo, material3 );
   group.add( cross );
   return group;
}

function onWindowResize()
{
   var width = window.innerWidth || 2;
   var height = window.innerHeight || 2;
   camera.aspect = width / height;
   camera.setViewOffset( width, height, 0, - ( height / 8 ), width, height );
   camera.updateProjectionMatrix();

   renderer.setSize( window.innerWidth, window.innerHeight );

   //effectFXAA.uniforms[ 'resolution' ].value.set( 1 / window.innerWidth, 1 / window.innerHeight );

   composer.reset();
}

function onDocumentMouseUpAndDown( event )
{
   var vector, projector, raycaster, intersects, clickedOut;
   vector = new THREE.Vector3( (event.clientX / window.innerWidth) * 2 - 1, -(event.clientY / window.innerHeight) * 2 + 1, 0.5 );
   projector = new THREE.Projector();
   projector.unprojectVector( vector, camera );
   raycaster = new THREE.Raycaster(camera.position, vector.sub(camera.position).normalize());
   intersects = raycaster.intersectObjects( map.interactables );
   map.handleSelection( event, intersects[0] );
}

function makeSafeForCSS( name ) {
   if ( typeof name !== 'string' ) {
      return;
   }
   return name.replace( /[^a-z0-9]/g, function(s) {
      var c = s.charCodeAt(0);
      if (c == 32) return '-';
      if (c >= 65 && c <= 90) return '_' + s.toLowerCase();
      return (c.toString(16)).slice(-4);
   });
}

function buildDisplayModeFSM ( initialState )
{
   var tweenTo2d, tweenTo3d, position, fsm;

   position = { x: 100 };

   tweenTo2d = new TWEEN.Tween( position )
      .to( { x: 0.5, rotate: 0 }, 2000 )
      .easing( TWEEN.Easing.Cubic.InOut )
      .onUpdate( function () {
            map.deselect();
            map.graph.destroyRoute();
            for ( var i = 0; i < scene.children.length; i++ ) {
               var child = scene.children[i];
               if ( child.system ) {
//child.system.rotateAroundAxis( new THREE.Vector3( 0, 1, 0 ), THREE.Math.degToRad( 45 ) );
                  var wantedY = child.system.position.y * ( this.x / 100 );
                  child.translateY( wantedY - child.position.y );
                  for ( var j = 0; j < child.system.routeObjects.length; j++ ) {
                     var routeObject = child.system.routeObjects[j];
                     routeObject.geometry.verticesNeedUpdate = true;
                  }
               }
            }
      } );

   tweenTo3d = new TWEEN.Tween( position )
      .to( { x: 100, rotate: 90 }, 2000 )
      .easing( TWEEN.Easing.Cubic.InOut )
      .onUpdate( function () {
            map.deselect();
            map.graph.destroyRoute();
            for ( var i = 0; i < scene.children.length; i++ ) {
               var child = scene.children[i];
               if ( child.system ) {
                  var wantedY = child.system.position.y * ( this.x / 100 );
                  child.translateY( wantedY - child.position.y );
                  for ( var j = 0; j < child.system.routeObjects.length; j++ ) {
                     var routeObject = child.system.routeObjects[j];
                     routeObject.geometry.verticesNeedUpdate = true;
                  }
               }
            }
      } );

   fsm = StateMachine.create({
      initial: initialState || '3d',

      events: [
         { name: 'thin',  from: '3d', to: '2d' },
         { name: 'thick', from: '2d', to: '3d' }
      ],

      callbacks: {
         onenter2d: function() {
            $('#3d-mode').prop( 'checked', false );
         },

         onenter3d: function() {
            $('#3d-mode').prop( 'checked', true );
         },

         onleave2d: function() {
            tweenTo3d.onComplete( function() {
               fsm.transition();
            });
            tweenTo3d.start();
            return StateMachine.ASYNC;
         },

         onleave3d: function() {
            tweenTo2d.onComplete( function() {
               fsm.transition();
            });
            tweenTo2d.start();
            return StateMachine.ASYNC;
         },
      },

      error: function( eventName, from, to, args, errorCode, errorMessage ) {
         console.log( 'event ' + eventName + ' was naughty : ' + errorMessage );
      }
   });

   return fsm;
}

//

function animate() {
   requestAnimationFrame( animate );
   if ( controls !== undefined ) {
      controls.update();
   }
   if ( editor !== undefined ) {
      editor.update();
   }
   stats.update();
   TWEEN.update();
   render();
}

function render() {
   map.animateSelector();

//var m = new THREE.Matrix4();
//m.extractRotation( camera.matrixWorldInverse );
//var v = new THREE.Vector3( 1, 0, 0 );
//v.applyMatrix4( m );
//var angle = Math.atan2( v.z, v.x );
//$('#debug-angle').html( 'Camera heading: ' + THREE.Math.radToDeg( angle ).toFixed(2) + '&deg; ' + angle.toFixed(3) );

//var m = new THREE.Matrix4();
//m.extractRotation( camera.matrixWorldInverse );
//var v = new THREE.Vector3( 0, 0, 1 );
//v.applyMatrix4( m );
//var angle = Math.atan2( v.z, v.y ) - 1.57079633;
//$('#debug-angle').html( 'Camera banking: ' + THREE.Math.radToDeg( angle ).toFixed(2) + '&deg; ' + angle.toFixed(3) );

   renderer.clear();
   composer.render();
}

// End of file

